var searchIndex = {};
searchIndex["av"] = {"doc":"","items":[[3,"AV","av","",null,null],[3,"LibAV","","",null,null],[4,"LogLevel","","",null,null],[13,"Quiet","","Print no output.",0,null],[13,"Panic","","Something went really wrong and we will crash now.",0,null],[13,"Fatal","","Something went wrong and recovery is not possible. For example, no header was found for a format which depends on headers or an illegal combination of parameters is used.",0,null],[13,"Error","","Something went wrong and cannot losslessly be recovered. However, not all future data is affected.",0,null],[13,"Warning","","Something somehow does not look correct. This may or may not lead to problems. An example would be the use of '-vstrict -2'.",0,null],[13,"Info","","Standard information.",0,null],[13,"Verbose","","Detailed information.",0,null],[13,"Debug","","Stuff which is only useful for libav* developers.",0,null],[13,"Trace","","Extremely verbose debugging, useful for libav* development.",0,null],[0,"common","","",null,null],[3,"Packet","av::common","A reference to a packet as returned e.g. by Demuxer::read_packet",null,null],[3,"Timebase","","",null,null],[0,"encoder","","",null,null],[5,"init","av::common::encoder","",null,null],[5,"open","","",null,null],[5,"require_is_encoder","","",null,{"inputs":[{"name":"codec"}],"output":{"name":"result"}}],[5,"require_codec_type","","",null,{"inputs":[{"name":"mediatype"},{"name":"codec"}],"output":{"name":"result"}}],[0,"stream","av::common","",null,null],[3,"Stream","av::common::stream","",null,null],[3,"Streams","","",null,null],[11,"from_ptr","","",1,null],[11,"index","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"time_base","","",1,{"inputs":[{"name":"self"}],"output":{"name":"timebase"}}],[11,"duration","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"num_frames","","Returns the number of frames if known",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"codec_parameters","","",1,{"inputs":[{"name":"self"}],"output":{"name":"codecparameters"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"avstream"}}],[11,"as_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"avstream"}}],[11,"as_ptr","","",1,null],[11,"as_mut_ptr","","",1,null],[11,"from_slice","","",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"codec_parameters","av::common","",null,null],[3,"CodecParameters","av::common::codec_parameters","",null,null],[11,"from_ptr","","",3,null],[11,"media_type","","",3,{"inputs":[{"name":"self"}],"output":{"name":"mediatype"}}],[11,"codec_id","","",3,{"inputs":[{"name":"self"}],"output":{"name":"avcodecid"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"avcodecparameters"}}],[11,"as_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"avcodecparameters"}}],[11,"as_ptr","","",3,null],[11,"as_mut_ptr","","",3,null],[11,"from_ptr","av::common","",4,null],[11,"stream_index","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_slice","","",4,null],[11,"time_base","","",4,{"inputs":[{"name":"self"}],"output":{"name":"timebase"}}],[11,"is_rc","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_rc","","",4,{"inputs":[{"name":"self"}],"output":{"name":"packet"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"as_raw","","",4,{"inputs":[{"name":"self"}],"output":{"name":"avpacket"}}],[11,"as_ptr","","",4,null],[11,"as_mut_ptr","","",4,null],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[0,"ts","","",null,null],[3,"Ts","av::common::ts","",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"ts"}}],[11,"new","","",5,{"inputs":[{"name":"i64"},{"name":"tb"}],"output":{"name":"self"}}],[11,"index","","",5,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"time_base","","",5,{"inputs":[{"name":"self"}],"output":{"name":"timebase"}}],[11,"calc_index_since","","",5,{"inputs":[{"name":"self"},{"name":"instant"}],"output":null}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"ts"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"ts"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"ts"}],"output":{"name":"ordering"}}],[11,"add_assign","","",5,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"clone","av::common","",6,{"inputs":[{"name":"self"}],"output":{"name":"timebase"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",6,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"self"}}],[11,"num","","",6,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"den","","",6,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"as_f32","","",6,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"as_f64","","",6,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"from","","",6,{"inputs":[{"name":"avrational"}],"output":{"name":"self"}}],[11,"from","","",6,null],[11,"from","","",6,{"inputs":[{"name":"c_int"}],"output":{"name":"self"}}],[11,"into","","",6,{"inputs":[{"name":"self"}],"output":{"name":"avrational"}}],[0,"format","av","",null,null],[3,"Muxer","av::format","",null,null],[3,"MuxerBuilder","","",null,null],[3,"Demuxer","","",null,null],[3,"OutputFormat","","",null,null],[11,"new","","",7,{"inputs":[{"name":"outputformat"},{"name":"w"}],"output":{"name":"result"}}],[11,"num_streams","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"duration","","Duration in seconds (floored) TODO: Return a more exact/fexible representation",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"format_name","","",7,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"format_long_name","","",7,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"dump_info","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"mux","","",7,{"inputs":[{"name":"self"},{"name":"packet"},{"name":"usize"}],"output":{"name":"result"}}],[11,"mux_all","","",7,{"inputs":[{"name":"self"},{"name":"p"},{"name":"usize"}],"output":{"name":"result"}}],[11,"close","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"avformatcontext"}}],[11,"as_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"avformatcontext"}}],[11,"as_ptr","","",7,null],[11,"as_mut_ptr","","",7,null],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[{"name":"outputformat"},{"name":"w"}],"output":{"name":"result"}}],[11,"add_stream_from_encoder","","Add a new stream using the settings from an encoder.",8,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"open","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"open","","",9,{"inputs":[{"name":"w"}],"output":{"name":"result"}}],[11,"streams","","",9,{"inputs":[{"name":"self"}],"output":{"name":"streams"}}],[11,"num_streams","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"duration","","Duration in seconds (floored) TODO: Return a more exact/fexible representation",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"format_name","","",9,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"format_long_name","","",9,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"dump_info","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"read_packet","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"avformatcontext"}}],[11,"as_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"avformatcontext"}}],[11,"as_ptr","","",9,null],[11,"as_mut_ptr","","",9,null],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"outputformat"}}],[11,"from_name","","Get format from short name like `mp4`, `avi`, `ogg` etc.",10,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"from_filename","","Get format from filename extension",10,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"as_ptr","","",10,null],[11,"as_mut_ptr","","",10,null],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"avoutputformat"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"video","av","",null,null],[3,"Encoder","av::video","",null,null],[3,"EncoderBuilder","","TODO: Check for invalid value ranges",null,null],[3,"Packets","","",null,null],[3,"Decoder","","",null,null],[3,"Frames","","",null,null],[3,"Frame","","",null,null],[3,"Scaler","","A context for scaling/converting video frames.",null,null],[11,"from_codec","","",11,{"inputs":[{"name":"codec"}],"output":{"name":"result"}}],[11,"pixel_format","","",11,{"inputs":[{"name":"self"}],"output":{"name":"avpixelformat"}}],[11,"width","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"height","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"codec","","",11,{"inputs":[{"name":"self"}],"output":{"name":"codec"}}],[11,"time_base","","",11,{"inputs":[{"name":"self"}],"output":{"name":"timebase"}}],[11,"encode","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"flush","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"avcodeccontext"}}],[11,"as_ptr","","",11,null],[11,"as_mut_ptr","","",11,null],[11,"as_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"avcodeccontext"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"from_codec","","",12,{"inputs":[{"name":"codec"}],"output":{"name":"result"}}],[11,"width","","TODO: Check for overflow",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"height","","TODO: Check for overflow",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pixel_format","","",12,{"inputs":[{"name":"self"},{"name":"avpixelformat"}],"output":{"name":"self"}}],[11,"time_base","","",12,{"inputs":[{"name":"self"},{"name":"tb"}],"output":{"name":"self"}}],[11,"open","","",12,{"inputs":[{"name":"self"},{"name":"outputformat"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"from_codec_parameters","","",14,{"inputs":[{"name":"codecparameters"}],"output":{"name":"result"}}],[11,"from_stream","","",14,{"inputs":[{"name":"stream"}],"output":{"name":"result"}}],[11,"codec","","",14,{"inputs":[{"name":"self"}],"output":{"name":"codec"}}],[11,"time_base","","",14,{"inputs":[{"name":"self"}],"output":{"name":"timebase"}}],[11,"pixel_format","","",14,{"inputs":[{"name":"self"}],"output":{"name":"avpixelformat"}}],[11,"decode","","",14,{"inputs":[{"name":"self"},{"name":"packet"}],"output":{"name":"result"}}],[11,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"avcodeccontext"}}],[11,"as_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"avcodeccontext"}}],[11,"as_ptr","","",14,null],[11,"as_mut_ptr","","",14,null],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Panics",16,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"avpixelformat"},{"name":"usize"}],"output":{"name":"result"}}],[11,"pixel_format","","",16,{"inputs":[{"name":"self"}],"output":{"name":"avpixelformat"}}],[11,"width","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"height","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"linesize","","",16,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"linesizes","","",16,null],[11,"pts","","",16,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"set_pts","","",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"channel","","",16,null],[11,"is_compatible_with_encoder","","",16,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":{"name":"bool"}}],[11,"channel_mut","","",16,null],[11,"data","","",16,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"data_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"fill_channel","","",16,null],[11,"as_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"avframe"}}],[11,"as_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"avframe"}}],[11,"from_ptr","","",16,null],[11,"as_mut_ptr","","",16,null],[11,"into_raw","","",16,null],[11,"drop","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new scaling context.",17,{"inputs":[],"output":{"name":"self"}}],[11,"scale","","Scale `src_data` to `src_data` by using the given dimensions and formats.",17,null],[11,"scale_frame","","Copy the `src` pixel data to the `dst` pixel data, scaling dimensions and converting pixel formats as required.",17,{"inputs":[{"name":"self"},{"name":"frame"},{"name":"frame"}],"output":{"name":"result"}}],[17,"MAX_PLANES","","",null,null],[0,"audio","av","",null,null],[3,"Encoder","av::audio","",null,null],[3,"EncoderBuilder","","",null,null],[3,"Packets","","",null,null],[3,"Decoder","","",null,null],[3,"Frames","","",null,null],[3,"Frame","","",null,null],[0,"constants","","",null,null],[3,"ChannelLayout","av::audio::constants","",null,null],[17,"CHANNEL_LAYOUT_NATIVE","","",null,null],[17,"CHANNEL_LAYOUT_MONO","","",null,null],[17,"CHANNEL_LAYOUT_STEREO","","",null,null],[17,"CHANNEL_LAYOUT_2POINT1","","",null,null],[17,"CHANNEL_LAYOUT_2_1","","",null,null],[17,"CHANNEL_LAYOUT_SURROUND","","",null,null],[17,"CHANNEL_LAYOUT_3POINT1","","",null,null],[17,"CHANNEL_LAYOUT_4POINT0","","",null,null],[17,"CHANNEL_LAYOUT_4POINT1","","",null,null],[17,"CHANNEL_LAYOUT_2_2","","",null,null],[17,"CHANNEL_LAYOUT_QUAD","","",null,null],[17,"CHANNEL_LAYOUT_5POINT0","","",null,null],[17,"CHANNEL_LAYOUT_5POINT1","","",null,null],[17,"CHANNEL_LAYOUT_5POINT0_BACK","","",null,null],[17,"CHANNEL_LAYOUT_5POINT1_BACK","","",null,null],[17,"CHANNEL_LAYOUT_6POINT0","","",null,null],[17,"CHANNEL_LAYOUT_6POINT0_FRONT","","",null,null],[17,"CHANNEL_LAYOUT_HEXAGONAL","","",null,null],[17,"CHANNEL_LAYOUT_6POINT1","","",null,null],[17,"CHANNEL_LAYOUT_6POINT1_BACK","","",null,null],[17,"CHANNEL_LAYOUT_6POINT1_FRONT","","",null,null],[17,"CHANNEL_LAYOUT_7POINT0","","",null,null],[17,"CHANNEL_LAYOUT_7POINT0_FRONT","","",null,null],[17,"CHANNEL_LAYOUT_7POINT1","","",null,null],[17,"CHANNEL_LAYOUT_7POINT1_WIDE","","",null,null],[17,"CHANNEL_LAYOUT_7POINT1_WIDE_BACK","","",null,null],[17,"CHANNEL_LAYOUT_OCTAGONAL","","",null,null],[17,"CHANNEL_LAYOUT_HEXADECAGONAL","","",null,null],[17,"CHANNEL_LAYOUT_STEREO_DOWNMIX","","",null,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"channellayout"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"ordering"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[],"output":{"name":"channellayout"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[],"output":{"name":"channellayout"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",18,{"inputs":[{"name":"u64"}],"output":{"name":"channellayout"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"channellayout"}}],[11,"bitor_assign","","Adds the set of flags.",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"channellayout"}}],[11,"bitxor_assign","","Toggles the set of flags.",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"channellayout"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"channellayout"}}],[11,"sub_assign","","Disables all flags enabled in the set.",18,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",18,{"inputs":[{"name":"self"}],"output":{"name":"channellayout"}}],[11,"extend","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",18,{"inputs":[{"name":"t"}],"output":{"name":"channellayout"}}],[11,"from_codec","av::audio","",19,{"inputs":[{"name":"codec"}],"output":{"name":"result"}}],[11,"sample_format","","",19,{"inputs":[{"name":"self"}],"output":{"name":"avsampleformat"}}],[11,"sample_rate","","TODO: Check for underflow",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"time_base","","",19,{"inputs":[{"name":"self"}],"output":{"name":"timebase"}}],[11,"frame_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"codec","","",19,{"inputs":[{"name":"self"}],"output":{"name":"codec"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"flush","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"avcodeccontext"}}],[11,"as_ptr","","",19,null],[11,"as_mut_ptr","","",19,null],[11,"as_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"avcodeccontext"}}],[11,"drop","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"from_codec","","",20,{"inputs":[{"name":"codec"}],"output":{"name":"result"}}],[11,"sample_format","","",20,{"inputs":[{"name":"self"},{"name":"avsampleformat"}],"output":{"name":"self"}}],[11,"sample_rate","","TODO: Check for overflow",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"channel_layout","","",20,{"inputs":[{"name":"self"},{"name":"channellayout"}],"output":{"name":"self"}}],[11,"open","","",20,{"inputs":[{"name":"self"},{"name":"outputformat"}],"output":{"name":"result"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"from_codec_parameters","","",22,{"inputs":[{"name":"codecparameters"}],"output":{"name":"result"}}],[11,"from_stream","","",22,{"inputs":[{"name":"stream"}],"output":{"name":"result"}}],[11,"codec","","",22,{"inputs":[{"name":"self"}],"output":{"name":"codec"}}],[11,"time_base","","",22,{"inputs":[{"name":"self"}],"output":{"name":"timebase"}}],[11,"sample_format","","",22,{"inputs":[{"name":"self"}],"output":{"name":"avsampleformat"}}],[11,"decode","","",22,{"inputs":[{"name":"self"},{"name":"packet"}],"output":{"name":"result"}}],[11,"flush","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"avcodeccontext"}}],[11,"as_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"avcodeccontext"}}],[11,"as_ptr","","",22,null],[11,"as_mut_ptr","","",22,null],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","TODO: Check for overflows",24,{"inputs":[{"name":"usize"},{"name":"u32"},{"name":"avsampleformat"},{"name":"channellayout"}],"output":{"name":"result"}}],[11,"num_channels","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_planar","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"data_mut","","",24,null],[11,"num_samples","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_pts","","",24,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"from_ptr","","",24,null],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"avframe"}}],[11,"as_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"avframe"}}],[11,"as_mut_ptr","","",24,null],[0,"generic","av","",null,null],[4,"Encoder","av::generic","",null,null],[13,"Video","","",25,null],[13,"Audio","","",25,null],[4,"Packets","","",null,null],[13,"Video","","",26,null],[13,"Audio","","",26,null],[4,"Decoder","","",null,null],[13,"Video","","",27,null],[13,"Audio","","",27,null],[4,"Frames","","",null,null],[13,"Video","","",28,null],[13,"Audio","","",28,null],[4,"RefMutFrame","","",null,null],[13,"Video","","",29,null],[13,"Audio","","",29,null],[4,"Frame","","",null,null],[13,"Video","","",30,null],[13,"Audio","","",30,null],[11,"into_video_encoder","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_video_encoder","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_video_encoder","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_audio_encoder","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_audio_encoder","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_audio_encoder","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"codec","","",25,{"inputs":[{"name":"self"}],"output":{"name":"codec"}}],[11,"time_base","","",25,{"inputs":[{"name":"self"}],"output":{"name":"timebase"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"flush","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ptr","","",25,null],[11,"as_mut_ptr","","",25,null],[11,"as_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"avcodeccontext"}}],[11,"as_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"avcodeccontext"}}],[11,"from","","",25,{"inputs":[{"name":"encoder"}],"output":{"name":"self"}}],[11,"from","","",25,{"inputs":[{"name":"encoder"}],"output":{"name":"self"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",26,{"inputs":[{"name":"packets"}],"output":{"name":"self"}}],[11,"from","","",26,{"inputs":[{"name":"packets"}],"output":{"name":"self"}}],[11,"from_stream","","",27,{"inputs":[{"name":"stream"}],"output":{"name":"result"}}],[11,"into_video_encoder","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_video_encoder","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_video_encoder","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_audio_encoder","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_audio_encoder","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_audio_encoder","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"codec","","",27,{"inputs":[{"name":"self"}],"output":{"name":"codec"}}],[11,"time_base","","",27,{"inputs":[{"name":"self"}],"output":{"name":"timebase"}}],[11,"as_mut_ptr","","",27,null],[11,"as_ref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"avcodeccontext"}}],[11,"as_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"avcodeccontext"}}],[11,"decode","","",27,{"inputs":[{"name":"self"},{"name":"packet"}],"output":{"name":"result"}}],[11,"flush","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",27,{"inputs":[{"name":"decoder"}],"output":{"name":"self"}}],[11,"from","","",27,{"inputs":[{"name":"decoder"}],"output":{"name":"self"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",28,{"inputs":[{"name":"frames"}],"output":{"name":"self"}}],[11,"from","","",28,{"inputs":[{"name":"frames"}],"output":{"name":"self"}}],[11,"into_video_frame","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_audio_frame","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",29,{"inputs":[{"name":"frame"}],"output":{"name":"self"}}],[11,"from","","",29,{"inputs":[{"name":"frame"}],"output":{"name":"self"}}],[11,"into_video_frame","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_audio_frame","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_video_frame","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut_audio_frame","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",30,{"inputs":[{"name":"frame"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"frame"}],"output":{"name":"self"}}],[0,"io","av","",null,null],[8,"AVSeek","av::io","",null,null],[10,"seek","","Seek to `pos`. Returns `Some(new_pos)` on success and `None` on error.",31,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"name":"option"}}],[11,"size","","The size of the data. It is optional to support this.",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"AVRead","","Implementors of AVRead can be used as custom input source.",null,null],[10,"read_packet","","Fill the buffer. Returns the number of bytes read. `None` or `Some(0)` indicates EOF.",32,null],[11,"buffer_size","","The buffer size is very important for performance. For protocols with fixed blocksize it should be set to this blocksize. For others a typical size is a cache page, e.g. 4kb.",32,{"inputs":[],"output":{"name":"c_int"}}],[8,"AVWrite","","Implementors of AVWrite can be used as custom output source.",null,null],[10,"write_packet","","Write the buffer to the output. Returns the number of bytes written. `None` or `Some(0)` indicates failure.",33,null],[11,"buffer_size","","The buffer size is very important for performance. For protocols with fixed blocksize it should be set to this blocksize. For others a typical size is a cache page, e.g. 4kb.",33,{"inputs":[],"output":{"name":"c_int"}}],[0,"codec","av","",null,null],[3,"Codec","av::codec","",null,null],[3,"Descriptor","","",null,null],[3,"DescriptorIter","","",null,null],[3,"Profile","","",null,null],[3,"ProfileIter","","",null,null],[3,"MimeTypeIter","","",null,null],[4,"MediaType","","",null,null],[13,"Unknown","","Usually treated as `Data`",34,null],[13,"Video","","",34,null],[13,"Audio","","",34,null],[13,"Data","","Opaque data information usually continuous",34,null],[13,"Subtitle","","",34,null],[13,"Attachment","","Opaque data information usually sparse",34,null],[13,"NB","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"codec"}}],[11,"find_encoder_by_name","","",35,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"find_encoder_by_id","","",35,{"inputs":[{"name":"avcodecid"}],"output":{"name":"result"}}],[11,"find_decoder_by_id","","",35,{"inputs":[{"name":"avcodecid"}],"output":{"name":"result"}}],[11,"is_encoder","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_decoder","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"id","","",35,{"inputs":[{"name":"self"}],"output":{"name":"avcodecid"}}],[11,"name","","",35,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"long_name","","",35,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"media_type","","",35,{"inputs":[{"name":"self"}],"output":{"name":"mediatype"}}],[11,"pixel_formats","","",35,null],[11,"descriptors","","",35,{"inputs":[],"output":{"name":"descriptoriter"}}],[11,"from_ptr","","",35,null],[11,"as_ref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"avcodec"}}],[11,"as_ptr","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"descriptor"}],"output":{"name":"bool"}}],[11,"from_codec_id","","",36,{"inputs":[{"name":"avcodecid"}],"output":{"name":"option"}}],[11,"as_ref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"avcodecdescriptor"}}],[11,"id","","",36,{"inputs":[{"name":"self"}],"output":{"name":"avcodecid"}}],[11,"media_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mediatype"}}],[11,"name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"long_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"mime_types","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mimetypeiter"}}],[11,"profiles","","",36,{"inputs":[{"name":"self"}],"output":{"name":"profileiter"}}],[11,"from_ptr","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"name","","",38,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ptr","","",39,null],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_ptr","","",40,null],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"mediatype"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"from_raw","","",34,{"inputs":[{"name":"avmediatype"}],"output":{"name":"self"}}],[11,"as_raw","","",34,{"inputs":[{"name":"self"}],"output":{"name":"avmediatype"}}],[11,"is_unknown","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_video","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_audio","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subtitle","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_attachment","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_nb","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"AVCodecIDExt","","",null,null],[10,"descriptor","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"errors","av","",null,null],[3,"Error","av::errors","The Error type.",null,null],[12,"0","","The kind of the error.",42,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",43,null],[13,"EncoderNotFound","","",43,null],[13,"DecoderNotFound","","",43,null],[13,"OpenEncoder","","",43,null],[13,"OpenDecoder","","",43,null],[13,"CopyCodecParameters","","",43,null],[13,"AllocFailed","","",43,null],[13,"EncodingUnsupported","","",43,null],[13,"MediaTypeMismatch","","",43,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",42,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",42,null],[11,"kind","","",42,null],[11,"iter","","",42,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",42,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",42,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",42,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",42,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",42,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",42,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",42,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",42,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",42,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",43,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",43,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",43,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",43,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"deref","av","",45,{"inputs":[{"name":"self"}],"output":{"name":"libav"}}],[11,"initialize","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"init","","",46,{"inputs":[],"output":{"name":"libav"}}],[11,"set_log_level","","",46,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":null}],[11,"version","","",46,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"build_flags","","",46,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}]],"paths":[[4,"LogLevel"],[3,"Stream"],[3,"Streams"],[3,"CodecParameters"],[3,"Packet"],[3,"Ts"],[3,"Timebase"],[3,"Muxer"],[3,"MuxerBuilder"],[3,"Demuxer"],[3,"OutputFormat"],[3,"Encoder"],[3,"EncoderBuilder"],[3,"Packets"],[3,"Decoder"],[3,"Frames"],[3,"Frame"],[3,"Scaler"],[3,"ChannelLayout"],[3,"Encoder"],[3,"EncoderBuilder"],[3,"Packets"],[3,"Decoder"],[3,"Frames"],[3,"Frame"],[4,"Encoder"],[4,"Packets"],[4,"Decoder"],[4,"Frames"],[4,"RefMutFrame"],[4,"Frame"],[8,"AVSeek"],[8,"AVRead"],[8,"AVWrite"],[4,"MediaType"],[3,"Codec"],[3,"Descriptor"],[3,"DescriptorIter"],[3,"Profile"],[3,"ProfileIter"],[3,"MimeTypeIter"],[8,"AVCodecIDExt"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[3,"AV"],[3,"LibAV"]]};
searchIndex["av_sys"] = {"doc":"","items":[[3,"__BindgenUnionField","av_sys","",null,null],[3,"imaxdiv_t","","",null,null],[12,"quot","","",0,null],[12,"rem","","",0,null],[3,"__fsid_t","","",null,null],[12,"__val","","",1,null],[3,"_IO_FILE","","",null,null],[12,"_flags","","",2,null],[12,"_IO_read_ptr","","",2,null],[12,"_IO_read_end","","",2,null],[12,"_IO_read_base","","",2,null],[12,"_IO_write_base","","",2,null],[12,"_IO_write_ptr","","",2,null],[12,"_IO_write_end","","",2,null],[12,"_IO_buf_base","","",2,null],[12,"_IO_buf_end","","",2,null],[12,"_IO_save_base","","",2,null],[12,"_IO_backup_base","","",2,null],[12,"_IO_save_end","","",2,null],[12,"_markers","","",2,null],[12,"_chain","","",2,null],[12,"_fileno","","",2,null],[12,"_flags2","","",2,null],[12,"_old_offset","","",2,null],[12,"_cur_column","","",2,null],[12,"_vtable_offset","","",2,null],[12,"_shortbuf","","",2,null],[12,"_lock","","",2,null],[12,"_offset","","",2,null],[12,"__pad1","","",2,null],[12,"__pad2","","",2,null],[12,"__pad3","","",2,null],[12,"__pad4","","",2,null],[12,"__pad5","","",2,null],[12,"_mode","","",2,null],[12,"_unused2","","",2,null],[3,"__mbstate_t","","",null,null],[12,"__count","","",3,null],[12,"__value","","",3,null],[3,"__mbstate_t__bindgen_ty_1","","",null,null],[12,"__wch","","",4,null],[12,"__wchb","","",4,null],[12,"bindgen_union_field","","",4,null],[3,"_G_fpos_t","","",null,null],[12,"__pos","","",5,null],[12,"__state","","",5,null],[3,"_G_fpos64_t","","",null,null],[12,"__pos","","",6,null],[12,"__state","","",6,null],[3,"_IO_jump_t","","",null,null],[3,"_IO_marker","","",null,null],[12,"_next","","",7,null],[12,"_sbuf","","",7,null],[12,"_pos","","",7,null],[3,"div_t","","",null,null],[12,"quot","","",8,null],[12,"rem","","",8,null],[3,"ldiv_t","","",null,null],[12,"quot","","",9,null],[12,"rem","","",9,null],[3,"lldiv_t","","",null,null],[12,"quot","","",10,null],[12,"rem","","",10,null],[3,"__sigset_t","","",null,null],[12,"__val","","",11,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",12,null],[12,"__align","","",12,null],[12,"bindgen_union_field","","",12,null],[3,"__pthread_internal_list","","",null,null],[12,"__prev","","",13,null],[12,"__next","","",13,null],[3,"pthread_mutex_t","","",null,null],[12,"__data","","",14,null],[12,"__size","","",14,null],[12,"__align","","",14,null],[12,"bindgen_union_field","","",14,null],[3,"pthread_mutex_t___pthread_mutex_s","","",null,null],[12,"__lock","","",15,null],[12,"__count","","",15,null],[12,"__owner","","",15,null],[12,"__nusers","","",15,null],[12,"__kind","","",15,null],[12,"__spins","","",15,null],[12,"__elision","","",15,null],[12,"__list","","",15,null],[3,"pthread_mutexattr_t","","",null,null],[12,"__size","","",16,null],[12,"__align","","",16,null],[12,"bindgen_union_field","","",16,null],[3,"pthread_cond_t","","",null,null],[12,"__data","","",17,null],[12,"__size","","",17,null],[12,"__align","","",17,null],[12,"bindgen_union_field","","",17,null],[3,"pthread_cond_t__bindgen_ty_1","","",null,null],[12,"__lock","","",18,null],[12,"__futex","","",18,null],[12,"__total_seq","","",18,null],[12,"__wakeup_seq","","",18,null],[12,"__woken_seq","","",18,null],[12,"__mutex","","",18,null],[12,"__nwaiters","","",18,null],[12,"__broadcast_seq","","",18,null],[3,"pthread_condattr_t","","",null,null],[12,"__size","","",19,null],[12,"__align","","",19,null],[12,"bindgen_union_field","","",19,null],[3,"pthread_rwlock_t","","",null,null],[12,"__data","","",20,null],[12,"__size","","",20,null],[12,"__align","","",20,null],[12,"bindgen_union_field","","",20,null],[3,"pthread_rwlock_t__bindgen_ty_1","","",null,null],[12,"__lock","","",21,null],[12,"__nr_readers","","",21,null],[12,"__readers_wakeup","","",21,null],[12,"__writer_wakeup","","",21,null],[12,"__nr_readers_queued","","",21,null],[12,"__nr_writers_queued","","",21,null],[12,"__writer","","",21,null],[12,"__shared","","",21,null],[12,"__pad1","","",21,null],[12,"__pad2","","",21,null],[12,"__flags","","",21,null],[3,"pthread_rwlockattr_t","","",null,null],[12,"__size","","",22,null],[12,"__align","","",22,null],[12,"bindgen_union_field","","",22,null],[3,"pthread_barrier_t","","",null,null],[12,"__size","","",23,null],[12,"__align","","",23,null],[12,"bindgen_union_field","","",23,null],[3,"pthread_barrierattr_t","","",null,null],[12,"__size","","",24,null],[12,"__align","","",24,null],[12,"bindgen_union_field","","",24,null],[3,"__locale_struct","","",null,null],[12,"__locales","","",25,null],[12,"__ctype_b","","",25,null],[12,"__ctype_tolower","","",25,null],[12,"__ctype_toupper","","",25,null],[12,"__names","","",25,null],[3,"AVRational","","Rational number (pair of numerator and denominator).",null,null],[12,"num","","< Numerator",26,null],[12,"den","","< Denominator",26,null],[3,"AVOptionRanges","","",null,null],[3,"AVClass","","Describe the class of an AVClass context structure. That is an arbitrary struct of which the first field is a pointer to an AVClass struct (e.g. AVCodecContext, AVFormatContext etc.).",null,null],[12,"class_name","","The name of the class; usually it is the same name as the context structure type to which the AVClass is associated.",27,null],[12,"item_name","","A pointer to a function which returns the name of a context instance ctx associated with the class.",27,null],[12,"option","","a pointer to the first option specified in the class if any or NULL",27,null],[12,"version","","LIBAVUTIL_VERSION with which this structure was created. This is used to allow fields to be added without requiring major version bumps everywhere.",27,null],[12,"log_level_offset_offset","","Offset in the structure where log_level_offset is stored. 0 means there is no such variable",27,null],[12,"parent_log_context_offset","","Offset in the structure where a pointer to the parent context for logging is stored. For example a decoder could pass its AVCodecContext to eval as such a parent context, which an av_log() implementation could then leverage to display the parent context. The offset can be NULL.",27,null],[12,"child_next","","Return next AVOptions-enabled child or NULL",27,null],[12,"child_class_next","","Return an AVClass corresponding to the next potential AVOptions-enabled child.",27,null],[12,"category","","Category used for visualization (like color) This is only set if the category is equal for all objects using this class. available since version (51 << 16 | 56 << 8 | 100)",27,null],[12,"get_category","","Callback to return the category. available since version (51 << 16 | 59 << 8 | 100)",27,null],[12,"query_ranges","","Callback to return the supported/allowed ranges. available since version (52.12)",27,null],[3,"AVComponentDescriptor","","",null,null],[12,"plane","","Which of the 4 planes contains the component.",28,null],[12,"step","","Number of elements between 2 horizontally consecutive pixels. Elements are bits for bitstream formats, bytes otherwise.",28,null],[12,"offset","","Number of elements before the component of the first pixel. Elements are bits for bitstream formats, bytes otherwise.",28,null],[12,"shift","","Number of least significant bits that must be shifted away to get the value.",28,null],[12,"depth","","Number of bits in the component.",28,null],[12,"step_minus1","","deprecated, use step instead ",28,null],[12,"depth_minus1","","deprecated, use depth instead ",28,null],[12,"offset_plus1","","deprecated, use offset instead ",28,null],[3,"AVPixFmtDescriptor","","Descriptor that unambiguously describes how the bits of a pixel are stored in the up to 4 data planes of an image. It also stores the subsampling factors and number of components.",null,null],[12,"name","","",29,null],[12,"nb_components","","< The number of components each pixel has, (1-4)",29,null],[12,"log2_chroma_w","","Amount to shift the luma width right to find the chroma width. For YV12 this is 1 for example. chroma_width = AV_CEIL_RSHIFT(luma_width, log2_chroma_w) The note above is needed to ensure rounding up. This value only refers to the chroma components.",29,null],[12,"log2_chroma_h","","Amount to shift the luma height right to find the chroma height. For YV12 this is 1 for example. chroma_height= AV_CEIL_RSHIFT(luma_height, log2_chroma_h) The note above is needed to ensure rounding up. This value only refers to the chroma components.",29,null],[12,"flags","","Combination of AV_PIX_FMT_FLAG_... flags.",29,null],[12,"comp","","Parameters that describe how pixels are packed. If the format has 1 or 2 components, then luma is 0. If the format has 3 or 4 components:   if the RGB flag is set then 0 is red, 1 is green and 2 is blue;   otherwise 0 is luma, 1 is chroma-U and 2 is chroma-V.",29,null],[12,"alias","","Alternative comma-separated names.",29,null],[3,"AVBuffer","","",null,null],[3,"AVBufferRef","","A reference to a data buffer.",null,null],[12,"buffer","","",30,null],[12,"data","","The data buffer. It is considered writable if and only if this is the only reference to the buffer, in which case av_buffer_is_writable() returns 1.",30,null],[12,"size","","Size of data in bytes.",30,null],[3,"AVBufferPool","","",null,null],[3,"AVBPrint","","",null,null],[3,"AVDictionaryEntry","","",null,null],[12,"key","","",31,null],[12,"value","","",31,null],[3,"AVDictionary","","",null,null],[3,"AVFrameSideData","","Structure to hold side data for an AVFrame.",null,null],[12,"type_","","",32,null],[12,"data","","",32,null],[12,"size","","",32,null],[12,"metadata","","",32,null],[12,"buf","","",32,null],[3,"AVFrame","","This structure describes decoded (raw) audio or video data.",null,null],[12,"data","","pointer to the picture/channel planes. This might be different from the first allocated byte",33,null],[12,"linesize","","For video, size in bytes of each picture line. For audio, size in bytes of each plane.",33,null],[12,"extended_data","","pointers to the data planes/channels.",33,null],[12,"width","","width and height of the video frame",33,null],[12,"height","","width and height of the video frame",33,null],[12,"nb_samples","","number of audio samples (per channel) described by this frame",33,null],[12,"format","","format of the frame, -1 if unknown or unset Values correspond to enum AVPixelFormat for video frames, enum AVSampleFormat for audio)",33,null],[12,"key_frame","","1 -> keyframe, 0-> not",33,null],[12,"pict_type","","Picture type of the frame.",33,null],[12,"sample_aspect_ratio","","Sample aspect ratio for the video frame, 0/1 if unknown/unspecified.",33,null],[12,"pts","","Presentation timestamp in time_base units (time when frame should be shown to user).",33,null],[12,"pkt_pts","","PTS copied from the AVPacket that was decoded to produce this frame. @deprecated use the pts field instead",33,null],[12,"pkt_dts","","DTS copied from the AVPacket that triggered returning this frame. (if frame threading isn't used) This is also the Presentation time of this AVFrame calculated from only AVPacket.dts values without pts values.",33,null],[12,"coded_picture_number","","picture number in bitstream order",33,null],[12,"display_picture_number","","picture number in display order",33,null],[12,"quality","","quality (between 1 (good) and FF_LAMBDA_MAX (bad))",33,null],[12,"opaque","","for some private data of the user",33,null],[12,"error","","@deprecated unused",33,null],[12,"repeat_pict","","When decoding, this signals how much the picture must be delayed. extra_delay = repeat_pict / (2*fps)",33,null],[12,"interlaced_frame","","The content of the picture is interlaced.",33,null],[12,"top_field_first","","If the content is interlaced, is top field displayed first.",33,null],[12,"palette_has_changed","","Tell user application that palette has changed from previous frame.",33,null],[12,"reordered_opaque","","reordered opaque 64 bits (generally an integer or a double precision float PTS but can be anything). The user sets AVCodecContext.reordered_opaque to represent the input at that time, the decoder reorders values as needed and sets AVFrame.reordered_opaque to exactly one of the values provided by the user through AVCodecContext.reordered_opaque @deprecated in favor of pkt_pts",33,null],[12,"sample_rate","","Sample rate of the audio data.",33,null],[12,"channel_layout","","Channel layout of the audio data.",33,null],[12,"buf","","AVBuffer references backing the data for this frame. If all elements of this array are NULL, then this frame is not reference counted. This array must be filled contiguously -- if buf[i] is non-NULL then buf[j] must also be non-NULL for all j < i.",33,null],[12,"extended_buf","","For planar audio which requires more than AV_NUM_DATA_POINTERS AVBufferRef pointers, this array will hold all the references which cannot fit into AVFrame.buf.",33,null],[12,"nb_extended_buf","","Number of elements in extended_buf.",33,null],[12,"side_data","","",33,null],[12,"nb_side_data","","",33,null],[12,"flags","","Frame flags, a combination of @ref lavu_frame_flags",33,null],[12,"color_range","","MPEG vs JPEG YUV range. - encoding: Set by user - decoding: Set by libavcodec",33,null],[12,"color_primaries","","",33,null],[12,"color_trc","","",33,null],[12,"colorspace","","YUV colorspace type. - encoding: Set by user - decoding: Set by libavcodec",33,null],[12,"chroma_location","","",33,null],[12,"best_effort_timestamp","","frame timestamp estimated using various heuristics, in stream time base - encoding: unused - decoding: set by libavcodec, read by user.",33,null],[12,"pkt_pos","","reordered pos from the last AVPacket that has been input into the decoder - encoding: unused - decoding: Read by user.",33,null],[12,"pkt_duration","","duration of the corresponding packet, expressed in AVStream->time_base units, 0 if unknown. - encoding: unused - decoding: Read by user.",33,null],[12,"metadata","","metadata. - encoding: Set by user. - decoding: Set by libavcodec.",33,null],[12,"decode_error_flags","","decode error flags of the frame, set to a combination of FF_DECODE_ERROR_xxx flags if the decoder produced a frame, but there were errors during the decoding. - encoding: unused - decoding: set by libavcodec, read by user.",33,null],[12,"channels","","number of audio channels, only used for audio. - encoding: unused - decoding: Read by user.",33,null],[12,"pkt_size","","size of the corresponding packet containing the compressed frame. It is set to a negative value if unknown. - encoding: unused - decoding: set by libavcodec, read by user.",33,null],[12,"qscale_table","","QP table",33,null],[12,"qstride","","QP store stride",33,null],[12,"qscale_type","","",33,null],[12,"qp_table_buf","","",33,null],[12,"hw_frames_ctx","","For hwaccel-format frames, this should be a reference to the AVHWFramesContext describing the frame.",33,null],[12,"opaque_ref","","AVBufferRef for free use by the API user. FFmpeg will never check the contents of the buffer ref. FFmpeg calls av_buffer_unref() on it when the frame is unreferenced. av_frame_copy_props() calls create a new reference with av_buffer_ref() for the target frame's opaque_ref field.",33,null],[3,"AVCodecDescriptor","","This struct describes the properties of a single codec described by an AVCodecID. @see avcodec_descriptor_get()",null,null],[12,"id","","",34,null],[12,"type_","","",34,null],[12,"name","","Name of the codec described by this descriptor. It is non-empty and unique for each codec descriptor. It should contain alphanumeric characters and '_' only.",34,null],[12,"long_name","","A more descriptive name for this codec. May be NULL.",34,null],[12,"props","","Codec properties, a combination of AV_CODEC_PROP_* flags.",34,null],[12,"mime_types","","MIME type(s) associated with the codec. May be NULL; if not, a NULL-terminated array of MIME types. The first item is always non-NULL and is the preferred MIME type.",34,null],[12,"profiles","","If non-NULL, an array of profiles recognized for this codec. Terminated with FF_PROFILE_UNKNOWN.",34,null],[3,"RcOverride","","@ingroup lavc_encoding",null,null],[12,"start_frame","","",35,null],[12,"end_frame","","",35,null],[12,"qscale","","",35,null],[12,"quality_factor","","",35,null],[3,"AVPanScan","","Pan Scan area. This specifies the area which should be displayed. Note there may be multiple such areas for one frame.",null,null],[12,"id","","id - encoding: Set by user. - decoding: Set by libavcodec.",36,null],[12,"width","","width and height in 1/16 pel - encoding: Set by user. - decoding: Set by libavcodec.",36,null],[12,"height","","",36,null],[12,"position","","position of the top left corner in 1/16 pel for up to 3 fields/frames - encoding: Set by user. - decoding: Set by libavcodec.",36,null],[3,"AVCPBProperties","","This structure describes the bitrate properties of an encoded bitstream. It roughly corresponds to a subset the VBV parameters for MPEG-2 or HRD parameters for H.264/HEVC.",null,null],[12,"max_bitrate","","Maximum bitrate of the stream, in bits per second. Zero if unknown or unspecified.",37,null],[12,"min_bitrate","","Minimum bitrate of the stream, in bits per second. Zero if unknown or unspecified.",37,null],[12,"avg_bitrate","","Average bitrate of the stream, in bits per second. Zero if unknown or unspecified.",37,null],[12,"buffer_size","","The size of the buffer to which the ratecontrol is applied, in bits. Zero if unknown or unspecified.",37,null],[12,"vbv_delay","","The delay between the time the packet this structure is associated with is received and the time when it should be decoded, in periods of a 27MHz clock.",37,null],[3,"AVPacketSideData","","",null,null],[12,"data","","",38,null],[12,"size","","",38,null],[12,"type_","","",38,null],[3,"AVPacket","","This structure stores compressed data. It is typically exported by demuxers and then passed as input to decoders, or received as output from encoders and then passed to muxers.",null,null],[12,"buf","","A reference to the reference-counted buffer where the packet data is stored. May be NULL, then the packet data is not reference-counted.",39,null],[12,"pts","","Presentation timestamp in AVStream->time_base units; the time at which the decompressed packet will be presented to the user. Can be AV_NOPTS_VALUE if it is not stored in the file. pts MUST be larger or equal to dts as presentation cannot happen before decompression, unless one wants to view hex dumps. Some formats misuse the terms dts and pts/cts to mean something different. Such timestamps must be converted to true pts/dts before they are stored in AVPacket.",39,null],[12,"dts","","Decompression timestamp in AVStream->time_base units; the time at which the packet is decompressed. Can be AV_NOPTS_VALUE if it is not stored in the file.",39,null],[12,"data","","",39,null],[12,"size","","",39,null],[12,"stream_index","","",39,null],[12,"flags","","A combination of AV_PKT_FLAG values",39,null],[12,"side_data","","Additional packet data that can be provided by the container. Packet can contain several types of side information.",39,null],[12,"side_data_elems","","",39,null],[12,"duration","","Duration of this packet in AVStream->time_base units, 0 if unknown. Equals next_pts - this_pts in presentation order.",39,null],[12,"pos","","< byte position in stream, -1 if unknown",39,null],[12,"convergence_duration","","@deprecated Same as the duration field, but as int64_t. This was required for Matroska subtitles, whose duration values could overflow when the duration field was still an int.",39,null],[3,"AVCodecInternal","","",null,null],[3,"AVCodecContext","","main external API structure. New fields can be added to the end with minor version bumps. Removal, reordering and changes to existing fields require a major version bump. You can use AVOptions (av_opt* / av_set/get*()) to access these fields from user applications. The name string for AVOptions options matches the associated command line parameter name and can be found in libavcodec/options_table.h The AVOption/command line parameter names differ in some cases from the C structure field names for historic reasons or brevity. sizeof(AVCodecContext) must not be used outside libav*.",null,null],[12,"av_class","","information on struct for av_log - set by avcodec_alloc_context3",40,null],[12,"log_level_offset","","",40,null],[12,"codec_type","","",40,null],[12,"codec","","",40,null],[12,"codec_name","","@deprecated this field is not used for anything in libavcodec",40,null],[12,"codec_id","","",40,null],[12,"codec_tag","","fourcc (LSB first, so \"ABCD\" -> ('D'<<24) + ('C'<<16) + ('B'<<8) + 'A'). This is used to work around some encoder bugs. A demuxer should set this to what is stored in the field used to identify the codec. If there are multiple such fields in a container then the demuxer should choose the one which maximizes the information about the used codec. If the codec tag field in a container is larger than 32 bits then the demuxer should remap the longer ID to 32 bits with a table or other structure. Alternatively a new extra_codec_tag + size could be added but for this a clear advantage must be demonstrated first. - encoding: Set by user, if not then the default based on codec_id will be used. - decoding: Set by user, will be converted to uppercase by libavcodec during init.",40,null],[12,"stream_codec_tag","","@deprecated this field is unused",40,null],[12,"priv_data","","",40,null],[12,"internal","","Private context used for internal data.",40,null],[12,"opaque","","Private data of the user, can be used to carry app specific stuff. - encoding: Set by user. - decoding: Set by user.",40,null],[12,"bit_rate","","the average bitrate - encoding: Set by user; unused for constant quantizer encoding. - decoding: Set by user, may be overwritten by libavcodec             if this info is available in the stream",40,null],[12,"bit_rate_tolerance","","number of bits the bitstream is allowed to diverge from the reference.           the reference can be CBR (for CBR pass1) or VBR (for pass2) - encoding: Set by user; unused for constant quantizer encoding. - decoding: unused",40,null],[12,"global_quality","","Global quality for codecs which cannot change it per frame. This should be proportional to MPEG-1/2/4 qscale. - encoding: Set by user. - decoding: unused",40,null],[12,"compression_level","","",40,null],[12,"flags","","AV_CODEC_FLAG_*. - encoding: Set by user. - decoding: Set by user.",40,null],[12,"flags2","","AV_CODEC_FLAG2_* - encoding: Set by user. - decoding: Set by user.",40,null],[12,"extradata","","some codecs need / can use extradata like Huffman tables. MJPEG: Huffman tables rv10: additional flags MPEG-4: global headers (they can be in the bitstream or here) The allocated memory should be AV_INPUT_BUFFER_PADDING_SIZE bytes larger than extradata_size to avoid problems if it is read with the bitstream reader. The bytewise contents of extradata must not depend on the architecture or CPU endianness. - encoding: Set/allocated/freed by libavcodec. - decoding: Set/allocated/freed by user.",40,null],[12,"extradata_size","","",40,null],[12,"time_base","","This is the fundamental unit of time (in seconds) in terms of which frame timestamps are represented. For fixed-fps content, timebase should be 1/framerate and timestamp increments should be identically 1. This often, but not always is the inverse of the frame rate or field rate for video. 1/time_base is not the average frame rate if the frame rate is not constant.",40,null],[12,"ticks_per_frame","","For some codecs, the time base is closer to the field rate than the frame rate. Most notably, H.264 and MPEG-2 specify time_base as half of frame duration if no telecine is used ...",40,null],[12,"delay","","Codec delay.",40,null],[12,"width","","picture width / height.",40,null],[12,"height","","picture width / height.",40,null],[12,"coded_width","","Bitstream width / height, may be different from width/height e.g. when the decoded frame is cropped before being output or lowres is enabled.",40,null],[12,"coded_height","","Bitstream width / height, may be different from width/height e.g. when the decoded frame is cropped before being output or lowres is enabled.",40,null],[12,"gop_size","","the number of pictures in a group of pictures, or 0 for intra_only - encoding: Set by user. - decoding: unused",40,null],[12,"pix_fmt","","Pixel format, see AV_PIX_FMT_xxx. May be set by the demuxer if known from headers. May be overridden by the decoder if it knows better.",40,null],[12,"me_method","","This option does nothing @deprecated use codec private options instead",40,null],[12,"draw_horiz_band","","If non NULL, 'draw_horiz_band' is called by the libavcodec decoder to draw a horizontal band. It improves cache usage. Not all codecs can do that. You must check the codec capabilities beforehand. When multithreading is used, it may be called from multiple threads at the same time; threads might draw different parts of the same AVFrame, or multiple AVFrames, and there is no guarantee that slices will be drawn in order. The function is also used by hardware acceleration APIs. It is called at least once during frame decoding to pass the data needed for hardware render. In that mode instead of pixel data, AVFrame points to a structure specific to the acceleration API. The application reads the structure and can change some fields to indicate progress or mark state. - encoding: unused - decoding: Set by user. @param height the height of the slice @param y the y position of the slice @param type 1->top field, 2->bottom field, 3->frame @param offset offset into the AVFrame.data from which the slice should be read",40,null],[12,"get_format","","callback to negotiate the pixelFormat @param fmt is the list of formats which are supported by the codec, it is terminated by -1 as 0 is a valid format, the formats are ordered by quality. The first is always the native one. @note The callback may be called again immediately if initialization for the selected (hardware-accelerated) pixel format failed. @warning Behavior is undefined if the callback returns a value not in the fmt list of formats. @return the chosen format - encoding: unused - decoding: Set by user, if not set the native format will be chosen.",40,null],[12,"max_b_frames","","maximum number of B-frames between non-B-frames Note: The output will be delayed by max_b_frames+1 relative to the input. - encoding: Set by user. - decoding: unused",40,null],[12,"b_quant_factor","","qscale factor between IP and B-frames If > 0 then the last P-frame quantizer will be used (q= lastp_qfactor+offset). If < 0 then normal ratecontrol will be done (q= -normal_qfactor+offset). - encoding: Set by user. - decoding: unused",40,null],[12,"rc_strategy","","@deprecated use codec private option instead ",40,null],[12,"b_frame_strategy","","@deprecated use encoder private options instead ",40,null],[12,"b_quant_offset","","qscale offset between IP and B-frames - encoding: Set by user. - decoding: unused",40,null],[12,"has_b_frames","","Size of the frame reordering buffer in the decoder. For MPEG-2 it is 1 IPB or 0 low delay IP. - encoding: Set by libavcodec. - decoding: Set by libavcodec.",40,null],[12,"mpeg_quant","","@deprecated use encoder private options instead ",40,null],[12,"i_quant_factor","","qscale factor between P- and I-frames If > 0 then the last P-frame quantizer will be used (q = lastp_q * factor + offset). If < 0 then normal ratecontrol will be done (q= -normal_q*factor+offset). - encoding: Set by user. - decoding: unused",40,null],[12,"i_quant_offset","","qscale offset between P and I-frames - encoding: Set by user. - decoding: unused",40,null],[12,"lumi_masking","","luminance masking (0-> disabled) - encoding: Set by user. - decoding: unused",40,null],[12,"temporal_cplx_masking","","temporary complexity masking (0-> disabled) - encoding: Set by user. - decoding: unused",40,null],[12,"spatial_cplx_masking","","spatial complexity masking (0-> disabled) - encoding: Set by user. - decoding: unused",40,null],[12,"p_masking","","p block masking (0-> disabled) - encoding: Set by user. - decoding: unused",40,null],[12,"dark_masking","","darkness masking (0-> disabled) - encoding: Set by user. - decoding: unused",40,null],[12,"slice_count","","slice count - encoding: Set by libavcodec. - decoding: Set by user (or 0).",40,null],[12,"prediction_method","","@deprecated use encoder private options instead ",40,null],[12,"slice_offset","","slice offsets in the frame in bytes - encoding: Set/allocated by libavcodec. - decoding: Set/allocated by user (or NULL).",40,null],[12,"sample_aspect_ratio","","sample aspect ratio (0 if unknown) That is the width of a pixel divided by the height of the pixel. Numerator and denominator must be relatively prime and smaller than 256 for some video standards. - encoding: Set by user. - decoding: Set by libavcodec.",40,null],[12,"me_cmp","","motion estimation comparison function - encoding: Set by user. - decoding: unused",40,null],[12,"me_sub_cmp","","subpixel motion estimation comparison function - encoding: Set by user. - decoding: unused",40,null],[12,"mb_cmp","","macroblock comparison function (not supported yet) - encoding: Set by user. - decoding: unused",40,null],[12,"ildct_cmp","","interlaced DCT comparison function - encoding: Set by user. - decoding: unused",40,null],[12,"dia_size","","ME diamond size & shape - encoding: Set by user. - decoding: unused",40,null],[12,"last_predictor_count","","amount of previous MV predictors (2a+1 x 2a+1 square) - encoding: Set by user. - decoding: unused",40,null],[12,"pre_me","","@deprecated use encoder private options instead ",40,null],[12,"me_pre_cmp","","motion estimation prepass comparison function - encoding: Set by user. - decoding: unused",40,null],[12,"pre_dia_size","","ME prepass diamond size & shape - encoding: Set by user. - decoding: unused",40,null],[12,"me_subpel_quality","","subpel ME quality - encoding: Set by user. - decoding: unused",40,null],[12,"dtg_active_format","","DTG active format information (additional aspect ratio information only used in DVB MPEG-2 transport streams) 0 if not set.",40,null],[12,"me_range","","maximum motion estimation search range in subpel units If 0 then no limit.",40,null],[12,"intra_quant_bias","","@deprecated use encoder private option instead",40,null],[12,"inter_quant_bias","","@deprecated use encoder private option instead",40,null],[12,"slice_flags","","slice flags - encoding: unused - decoding: Set by user.",40,null],[12,"xvmc_acceleration","","XVideo Motion Acceleration - encoding: forbidden - decoding: set by decoder @deprecated XvMC doesn't need it anymore.",40,null],[12,"mb_decision","","macroblock decision mode - encoding: Set by user. - decoding: unused",40,null],[12,"intra_matrix","","custom intra quantization matrix - encoding: Set by user, can be NULL. - decoding: Set by libavcodec.",40,null],[12,"inter_matrix","","custom inter quantization matrix - encoding: Set by user, can be NULL. - decoding: Set by libavcodec.",40,null],[12,"scenechange_threshold","","@deprecated use encoder private options instead ",40,null],[12,"noise_reduction","","@deprecated use encoder private options instead ",40,null],[12,"me_threshold","","@deprecated this field is unused",40,null],[12,"mb_threshold","","@deprecated this field is unused",40,null],[12,"intra_dc_precision","","precision of the intra DC coefficient - 8 - encoding: Set by user. - decoding: Set by libavcodec",40,null],[12,"skip_top","","Number of macroblock rows at the top which are skipped. - encoding: unused - decoding: Set by user.",40,null],[12,"skip_bottom","","Number of macroblock rows at the bottom which are skipped. - encoding: unused - decoding: Set by user.",40,null],[12,"border_masking","","@deprecated use encoder private options instead",40,null],[12,"mb_lmin","","minimum MB Lagrange multiplier - encoding: Set by user. - decoding: unused",40,null],[12,"mb_lmax","","maximum MB Lagrange multiplier - encoding: Set by user. - decoding: unused",40,null],[12,"me_penalty_compensation","","@deprecated use encoder private options instead",40,null],[12,"bidir_refine","","",40,null],[12,"brd_scale","","@deprecated use encoder private options instead ",40,null],[12,"keyint_min","","minimum GOP size - encoding: Set by user. - decoding: unused",40,null],[12,"refs","","number of reference frames - encoding: Set by user. - decoding: Set by lavc.",40,null],[12,"chromaoffset","","@deprecated use encoder private options instead ",40,null],[12,"scenechange_factor","","Multiplied by qscale for each frame and added to scene_change_score. - encoding: Set by user. - decoding: unused",40,null],[12,"mv0_threshold","","Note: Value depends upon the compare function used for fullpel ME. - encoding: Set by user. - decoding: unused",40,null],[12,"b_sensitivity","","@deprecated use encoder private options instead ",40,null],[12,"color_primaries","","Chromaticity coordinates of the source primaries. - encoding: Set by user - decoding: Set by libavcodec",40,null],[12,"color_trc","","Color Transfer Characteristic. - encoding: Set by user - decoding: Set by libavcodec",40,null],[12,"colorspace","","YUV colorspace type. - encoding: Set by user - decoding: Set by libavcodec",40,null],[12,"color_range","","MPEG vs JPEG YUV range. - encoding: Set by user - decoding: Set by libavcodec",40,null],[12,"chroma_sample_location","","This defines the location of chroma samples. - encoding: Set by user - decoding: Set by libavcodec",40,null],[12,"slices","","Number of slices. Indicates number of picture subdivisions. Used for parallelized decoding. - encoding: Set by user - decoding: unused",40,null],[12,"field_order","","Field order * - encoding: set by libavcodec * - decoding: Set by user.",40,null],[12,"sample_rate","","< samples per second",40,null],[12,"channels","","< number of audio channels",40,null],[12,"sample_fmt","","< sample format",40,null],[12,"frame_size","","Number of samples per channel in an audio frame.",40,null],[12,"frame_number","","Frame counter, set by libavcodec.",40,null],[12,"block_align","","number of bytes per packet if constant and known or 0 Used by some WAV based audio codecs.",40,null],[12,"cutoff","","Audio cutoff bandwidth (0 means \"automatic\") - encoding: Set by user. - decoding: unused",40,null],[12,"channel_layout","","Audio channel layout. - encoding: set by user. - decoding: set by user, may be overwritten by libavcodec.",40,null],[12,"request_channel_layout","","Request decoder to use this channel layout if it can (0 for default) - encoding: unused - decoding: Set by user.",40,null],[12,"audio_service_type","","Type of service that the audio stream conveys. - encoding: Set by user. - decoding: Set by libavcodec.",40,null],[12,"request_sample_fmt","","desired sample format - encoding: Not used. - decoding: Set by user. Decoder will decode to this format if it can.",40,null],[12,"get_buffer2","","This callback is called at the beginning of each frame to get data buffer(s) for it. There may be one contiguous buffer for all the data or there may be a buffer per each data plane or anything in between. What this means is, you may set however many entries in buf[] you feel necessary. Each buffer must be reference-counted using the AVBuffer API (see description of buf[] below).",40,null],[12,"refcounted_frames","","If non-zero, the decoded audio and video frames returned from avcodec_decode_video2() and avcodec_decode_audio4() are reference-counted and are valid indefinitely. The caller must free them with av_frame_unref() when they are not needed anymore. Otherwise, the decoded frames must not be freed by the caller and are only valid until the next decode call.",40,null],[12,"qcompress","","< amount of qscale change between easy & hard scenes (0.0-1.0)",40,null],[12,"qblur","","< amount of qscale smoothing over time (0.0-1.0)",40,null],[12,"qmin","","minimum quantizer - encoding: Set by user. - decoding: unused",40,null],[12,"qmax","","maximum quantizer - encoding: Set by user. - decoding: unused",40,null],[12,"max_qdiff","","maximum quantizer difference between frames - encoding: Set by user. - decoding: unused",40,null],[12,"rc_qsquish","","@deprecated use encoder private options instead",40,null],[12,"rc_qmod_amp","","",40,null],[12,"rc_qmod_freq","","",40,null],[12,"rc_buffer_size","","decoder bitstream buffer size - encoding: Set by user. - decoding: unused",40,null],[12,"rc_override_count","","ratecontrol override, see RcOverride - encoding: Allocated/set/freed by user. - decoding: unused",40,null],[12,"rc_override","","",40,null],[12,"rc_eq","","@deprecated use encoder private options instead",40,null],[12,"rc_max_rate","","maximum bitrate - encoding: Set by user. - decoding: Set by user, may be overwritten by libavcodec.",40,null],[12,"rc_min_rate","","minimum bitrate - encoding: Set by user. - decoding: unused",40,null],[12,"rc_buffer_aggressivity","","@deprecated use encoder private options instead",40,null],[12,"rc_initial_cplx","","",40,null],[12,"rc_max_available_vbv_use","","Ratecontrol attempt to use, at maximum,  of what can be used without an underflow. - encoding: Set by user. - decoding: unused.",40,null],[12,"rc_min_vbv_overflow_use","","Ratecontrol attempt to use, at least,  times the amount needed to prevent a vbv overflow. - encoding: Set by user. - decoding: unused.",40,null],[12,"rc_initial_buffer_occupancy","","Number of bits which should be loaded into the rc buffer before decoding starts. - encoding: Set by user. - decoding: unused",40,null],[12,"coder_type","","@deprecated use encoder private options instead",40,null],[12,"context_model","","@deprecated use encoder private options instead ",40,null],[12,"lmin","","@deprecated use encoder private options instead",40,null],[12,"lmax","","@deprecated use encoder private options instead",40,null],[12,"frame_skip_threshold","","@deprecated use encoder private options instead ",40,null],[12,"frame_skip_factor","","@deprecated use encoder private options instead ",40,null],[12,"frame_skip_exp","","@deprecated use encoder private options instead ",40,null],[12,"frame_skip_cmp","","@deprecated use encoder private options instead ",40,null],[12,"trellis","","trellis RD quantization - encoding: Set by user. - decoding: unused",40,null],[12,"min_prediction_order","","@deprecated use encoder private options instead ",40,null],[12,"max_prediction_order","","@deprecated use encoder private options instead ",40,null],[12,"timecode_frame_start","","@deprecated use encoder private options instead ",40,null],[12,"rtp_callback","","@deprecated unused",40,null],[12,"rtp_payload_size","","@deprecated use encoder private options instead ",40,null],[12,"mv_bits","","",40,null],[12,"header_bits","","",40,null],[12,"i_tex_bits","","",40,null],[12,"p_tex_bits","","",40,null],[12,"i_count","","",40,null],[12,"p_count","","",40,null],[12,"skip_count","","",40,null],[12,"misc_bits","","",40,null],[12,"frame_bits","","@deprecated this field is unused ",40,null],[12,"stats_out","","pass1 encoding statistics output buffer - encoding: Set by libavcodec. - decoding: unused",40,null],[12,"stats_in","","pass2 encoding statistics input buffer Concatenated stuff from stats_out of pass1 should be placed here. - encoding: Allocated/set/freed by user. - decoding: unused",40,null],[12,"workaround_bugs","","Work around bugs in encoders which sometimes cannot be detected automatically. - encoding: Set by user - decoding: Set by user",40,null],[12,"strict_std_compliance","","strictly follow the standard (MPEG-4, ...). - encoding: Set by user. - decoding: Set by user. Setting this to STRICT or higher means the encoder and decoder will generally do stupid things, whereas setting it to unofficial or lower will mean the encoder might produce output that is not supported by all spec-compliant decoders. Decoders don't differentiate between normal, unofficial and experimental (that is, they always try to decode things when they can) unless they are explicitly asked to behave stupidly (=strictly conform to the specs)",40,null],[12,"error_concealment","","error concealment flags - encoding: unused - decoding: Set by user.",40,null],[12,"debug","","debug - encoding: Set by user. - decoding: Set by user.",40,null],[12,"debug_mv","","debug - encoding: Set by user. - decoding: Set by user.",40,null],[12,"err_recognition","","Error recognition; may misdetect some more or less valid parts as errors. - encoding: unused - decoding: Set by user.",40,null],[12,"reordered_opaque","","opaque 64-bit number (generally a PTS) that will be reordered and output in AVFrame.reordered_opaque - encoding: unused - decoding: Set by user.",40,null],[12,"hwaccel","","Hardware accelerator in use - encoding: unused. - decoding: Set by libavcodec",40,null],[12,"hwaccel_context","","Hardware accelerator context. For some hardware accelerators, a global context needs to be provided by the user. In that case, this holds display-dependent data FFmpeg cannot instantiate itself. Please refer to the FFmpeg HW accelerator documentation to know how to fill this is. e.g. for VA API, this is a struct vaapi_context. - encoding: unused - decoding: Set by user",40,null],[12,"error","","error - encoding: Set by libavcodec if flags & AV_CODEC_FLAG_PSNR. - decoding: unused",40,null],[12,"dct_algo","","DCT algorithm, see FF_DCT_* below - encoding: Set by user. - decoding: unused",40,null],[12,"idct_algo","","IDCT algorithm, see FF_IDCT_* below. - encoding: Set by user. - decoding: Set by user.",40,null],[12,"bits_per_coded_sample","","bits per sample/pixel from the demuxer (needed for huffyuv). - encoding: Set by libavcodec. - decoding: Set by user.",40,null],[12,"bits_per_raw_sample","","Bits per sample/pixel of internal libavcodec pixel/sample format. - encoding: set by user. - decoding: set by libavcodec.",40,null],[12,"lowres","","low resolution decoding, 1-> 1/2 size, 2->1/4 size - encoding: unused - decoding: Set by user.",40,null],[12,"coded_frame","","the picture in the bitstream - encoding: Set by libavcodec. - decoding: unused",40,null],[12,"thread_count","","thread count is used to decide how many independent tasks should be passed to execute() - encoding: Set by user. - decoding: Set by user.",40,null],[12,"thread_type","","Which multithreading methods to use. Use of FF_THREAD_FRAME will increase decoding delay by one frame per thread, so clients which cannot provide future frames should not use it.",40,null],[12,"active_thread_type","","Which multithreading methods are in use by the codec. - encoding: Set by libavcodec. - decoding: Set by libavcodec.",40,null],[12,"thread_safe_callbacks","","Set by the client if its custom get_buffer() callback can be called synchronously from another thread, which allows faster multithreaded decoding. draw_horiz_band() will be called from other threads regardless of this setting. Ignored if the default get_buffer() is used. - encoding: Set by user. - decoding: Set by user.",40,null],[12,"execute","","The codec may call this to execute several independent things. It will return only after finishing all tasks. The user may replace this with some multithreaded implementation, the default implementation will execute the parts serially. @param count the number of things to execute - encoding: Set by libavcodec, user can override. - decoding: Set by libavcodec, user can override.",40,null],[12,"execute2","","The codec may call this to execute several independent things. It will return only after finishing all tasks. The user may replace this with some multithreaded implementation, the default implementation will execute the parts serially. Also see avcodec_thread_init and e.g. the --enable-pthread configure option. @param c context passed also to func @param count the number of things to execute @param arg2 argument passed unchanged to func @param ret return values of executed functions, must have space for \"count\" values. May be NULL. @param func function that will be called count times, with jobnr from 0 to count-1.             threadnr will be in the range 0 to c->thread_count-1 < MAX_THREADS and so that no             two instances of func executing at the same time will have the same threadnr. @return always 0 currently, but code should handle a future improvement where when any call to func         returns < 0 no further calls to func may be done and < 0 is returned. - encoding: Set by libavcodec, user can override. - decoding: Set by libavcodec, user can override.",40,null],[12,"nsse_weight","","noise vs. sse weight for the nsse comparison function - encoding: Set by user. - decoding: unused",40,null],[12,"profile","","profile - encoding: Set by user. - decoding: Set by libavcodec.",40,null],[12,"level","","level - encoding: Set by user. - decoding: Set by libavcodec.",40,null],[12,"skip_loop_filter","","Skip loop filtering for selected frames. - encoding: unused - decoding: Set by user.",40,null],[12,"skip_idct","","Skip IDCT/dequantization for selected frames. - encoding: unused - decoding: Set by user.",40,null],[12,"skip_frame","","Skip decoding for selected frames. - encoding: unused - decoding: Set by user.",40,null],[12,"subtitle_header","","Header containing style information for text subtitles. For SUBTITLE_ASS subtitle type, it should contain the whole ASS [Script Info] and [V4+ Styles] section, plus the [Events] line and the Format line following. It shouldn't include any Dialogue line. - encoding: Set/allocated/freed by user (before avcodec_open2()) - decoding: Set/allocated/freed by libavcodec (by avcodec_open2())",40,null],[12,"subtitle_header_size","","",40,null],[12,"error_rate","","@deprecated use the 'error_rate' private AVOption of the mpegvideo encoders",40,null],[12,"vbv_delay","","VBV delay coded in the last frame (in periods of a 27 MHz clock). Used for compliant TS muxing. - encoding: Set by libavcodec. - decoding: unused. @deprecated this value is now exported as a part of AV_PKT_DATA_CPB_PROPERTIES packet side data",40,null],[12,"side_data_only_packets","","Encoding only and set by default. Allow encoders to output packets that do not contain any encoded data, only side data.",40,null],[12,"initial_padding","","Audio only. The number of \"priming\" samples (padding) inserted by the encoder at the beginning of the audio. I.e. this number of leading decoded samples must be discarded by the caller to get the original audio without leading padding.",40,null],[12,"framerate","","",40,null],[12,"sw_pix_fmt","","Nominal unaccelerated pixel format, see AV_PIX_FMT_xxx. - encoding: unused. - decoding: Set by libavcodec before calling get_format()",40,null],[12,"pkt_timebase","","Timebase in which pkt_dts/pts and AVPacket.dts/pts are. - encoding unused. - decoding set by user.",40,null],[12,"codec_descriptor","","AVCodecDescriptor - encoding: unused. - decoding: set by libavcodec.",40,null],[12,"pts_correction_num_faulty_pts","","Current statistics for PTS correction. - decoding: maintained and used by libavcodec, not intended to be used by user apps - encoding: unused",40,null],[12,"pts_correction_num_faulty_dts","","Number of incorrect PTS values so far",40,null],[12,"pts_correction_last_pts","","Number of incorrect DTS values so far",40,null],[12,"pts_correction_last_dts","","PTS of the last frame",40,null],[12,"sub_charenc","","Character encoding of the input subtitles file. - decoding: set by user - encoding: unused",40,null],[12,"sub_charenc_mode","","Subtitles character encoding mode. Formats or codecs might be adjusting this setting (if they are doing the conversion themselves for instance). - decoding: set by libavcodec - encoding: unused",40,null],[12,"skip_alpha","","Skip processing alpha if supported by codec. Note that if the format uses pre-multiplied alpha (common with VP6, and recommended due to better video quality/compression) the image will look as if alpha-blended onto a black background. However for formats that do not use pre-multiplied alpha there might be serious artefacts (though e.g. libswscale currently assumes pre-multiplied alpha anyway).",40,null],[12,"seek_preroll","","Number of samples to skip after a discontinuity - decoding: unused - encoding: set by libavcodec",40,null],[12,"chroma_intra_matrix","","custom intra quantization matrix - encoding: Set by user, can be NULL. - decoding: unused.",40,null],[12,"dump_separator","","dump format separator. can be \", \" or \"\\n      \" or anything else - encoding: Set by user. - decoding: Set by user.",40,null],[12,"codec_whitelist","","',' separated list of allowed decoders. If NULL then all are allowed - encoding: unused - decoding: set by user",40,null],[12,"properties","","",40,null],[12,"coded_side_data","","Additional data associated with the entire coded stream.",40,null],[12,"nb_coded_side_data","","",40,null],[12,"hw_frames_ctx","","A reference to the AVHWFramesContext describing the input (for encoding) or output (decoding) frames. The reference is set by the caller and afterwards owned (and freed) by libavcodec - it should never be read by the caller after being set.",40,null],[12,"sub_text_format","","Control the form of AVSubtitle.rects[N]->ass - decoding: set by user - encoding: unused",40,null],[12,"trailing_padding","","Audio only. The amount of padding (in samples) appended by the encoder to the end of the audio. I.e. this number of decoded samples must be discarded by the caller from the end of the stream to get the original audio without any trailing padding.",40,null],[12,"max_pixels","","The number of pixels per image to maximally accept.",40,null],[12,"hw_device_ctx","","A reference to the AVHWDeviceContext describing the device which will be used by a hardware encoder/decoder.  The reference is set by the caller and afterwards owned (and freed) by libavcodec.",40,null],[12,"hwaccel_flags","","Bit set of AV_HWACCEL_FLAG_* flags, which affect hardware accelerated decoding (if active). - encoding: unused - decoding: Set by user (either before avcodec_open2(), or in the             AVCodecContext.get_format callback)",40,null],[3,"AVProfile","","AVProfile.",null,null],[12,"profile","","",41,null],[12,"name","","< short name for the profile",41,null],[3,"AVCodecDefault","","",null,null],[3,"AVSubtitle","","",null,null],[12,"format","","",42,null],[12,"start_display_time","","",42,null],[12,"end_display_time","","",42,null],[12,"num_rects","","",42,null],[12,"rects","","",42,null],[12,"pts","","< Same as packet pts, in AV_TIME_BASE",42,null],[3,"AVCodec","","AVCodec.",null,null],[12,"name","","Name of the codec implementation. The name is globally unique among encoders and among decoders (but an encoder and a decoder can share the same name). This is the primary way to find a codec from the user perspective.",43,null],[12,"long_name","","Descriptive name for the codec, meant to be more human readable than name. You should use the NULL_IF_CONFIG_SMALL() macro to define it.",43,null],[12,"type_","","",43,null],[12,"id","","",43,null],[12,"capabilities","","Codec capabilities. see AV_CODEC_CAP_*",43,null],[12,"supported_framerates","","< array of supported framerates, or NULL if any, array is terminated by {0,0}",43,null],[12,"pix_fmts","","< array of supported pixel formats, or NULL if unknown, array is terminated by -1",43,null],[12,"supported_samplerates","","< array of supported audio samplerates, or NULL if unknown, array is terminated by 0",43,null],[12,"sample_fmts","","< array of supported sample formats, or NULL if unknown, array is terminated by -1",43,null],[12,"channel_layouts","","< array of support channel layouts, or NULL if unknown. array is terminated by 0",43,null],[12,"max_lowres","","< maximum value for lowres supported by the decoder",43,null],[12,"priv_class","","< AVClass for the private context",43,null],[12,"profiles","","< array of recognized profiles, or NULL if unknown, array is terminated by {FF_PROFILE_UNKNOWN}",43,null],[12,"priv_data_size","","",43,null],[12,"next","","",43,null],[12,"init_thread_copy","","@name Frame-level threading support functions @{ If defined, called on thread contexts when they are created. If the codec allocates writable tables in init(), re-allocate them here. priv_data will be set to a copy of the original.",43,null],[12,"update_thread_context","","Copy necessary context variables from a previous thread context to the current one. If not defined, the next thread will start automatically; otherwise, the codec must call ff_thread_finish_setup().",43,null],[12,"defaults","","Private codec-specific defaults.",43,null],[12,"init_static_data","","Initialize codec static data, called from avcodec_register().",43,null],[12,"init","","",43,null],[12,"encode_sub","","",43,null],[12,"encode2","","Encode data to an AVPacket.",43,null],[12,"decode","","",43,null],[12,"close","","",43,null],[12,"send_frame","","Decode/encode API with decoupled packet/frame dataflow. The API is the same as the avcodec_ prefixed APIs (avcodec_send_frame() etc.), except that: - never called if the codec is closed or the wrong type, - AVPacket parameter change side data is applied right before calling   AVCodec->send_packet, - if AV_CODEC_CAP_DELAY is not set, drain packets or frames are never sent, - only one drain packet is ever passed down (until the next flush()), - a drain AVPacket is always NULL (no need to check for avpkt->size).",43,null],[12,"send_packet","","",43,null],[12,"receive_frame","","",43,null],[12,"receive_packet","","",43,null],[12,"flush","","Flush buffers. Will be called when seeking",43,null],[12,"caps_internal","","Internal codec capabilities. See FF_CODEC_CAP_* in internal.h",43,null],[3,"MpegEncContext","","",null,null],[3,"AVHWAccel","","@defgroup lavc_hwaccel AVHWAccel @{",null,null],[12,"name","","Name of the hardware accelerated codec. The name is globally unique among encoders and among decoders (but an encoder and a decoder can share the same name).",44,null],[12,"type_","","Type of codec implemented by the hardware accelerator.",44,null],[12,"id","","Codec implemented by the hardware accelerator.",44,null],[12,"pix_fmt","","Supported pixel format.",44,null],[12,"capabilities","","Hardware accelerated codec capabilities. see HWACCEL_CODEC_CAP_*",44,null],[12,"next","","",44,null],[12,"alloc_frame","","Allocate a custom buffer",44,null],[12,"start_frame","","Called at the beginning of each frame or field picture.",44,null],[12,"decode_slice","","Callback for each slice.",44,null],[12,"end_frame","","Called at the end of each frame or field picture.",44,null],[12,"frame_priv_data_size","","Size of per-frame hardware accelerator private data.",44,null],[12,"decode_mb","","Called for every Macroblock in a slice.",44,null],[12,"init","","Initialize the hwaccel private data.",44,null],[12,"uninit","","Uninitialize the hwaccel private data.",44,null],[12,"priv_data_size","","Size of the private data to allocate in AVCodecInternal.hwaccel_priv_data.",44,null],[12,"caps_internal","","Internal hwaccel capabilities.",44,null],[3,"AVPicture","","Picture data structure.",null,null],[12,"data","","< pointers to the image data planes",45,null],[12,"linesize","","< number of bytes per line",45,null],[3,"AVSubtitleRect","","",null,null],[12,"x","","< top left corner  of pict, undefined when pict is not set",46,null],[12,"y","","< top left corner  of pict, undefined when pict is not set",46,null],[12,"w","","< width            of pict, undefined when pict is not set",46,null],[12,"h","","< height           of pict, undefined when pict is not set",46,null],[12,"nb_colors","","< number of colors in pict, undefined when pict is not set",46,null],[12,"pict","","@deprecated unused",46,null],[12,"data","","data+linesize for the bitmap of this subtitle. Can be set for text/ass as well once they are rendered.",46,null],[12,"linesize","","",46,null],[12,"type_","","",46,null],[12,"text","","< 0 terminated plain UTF-8 text",46,null],[12,"ass","","0 terminated ASS/SSA compatible event line. The presentation of this is unaffected by the other values in this struct.",46,null],[12,"flags","","",46,null],[3,"AVCodecParameters","","This struct describes the properties of an encoded stream.",null,null],[12,"codec_type","","General type of the encoded data.",47,null],[12,"codec_id","","Specific type of the encoded data (the codec used).",47,null],[12,"codec_tag","","Additional information about the codec (corresponds to the AVI FOURCC).",47,null],[12,"extradata","","Extra binary data needed for initializing the decoder, codec-dependent.",47,null],[12,"extradata_size","","Size of the extradata content in bytes.",47,null],[12,"format","","",47,null],[12,"bit_rate","","The average bitrate of the encoded data (in bits per second).",47,null],[12,"bits_per_coded_sample","","The number of bits per sample in the codedwords.",47,null],[12,"bits_per_raw_sample","","This is the number of valid bits in each output sample. If the sample format has more bits, the least significant bits are additional padding bits, which are always 0. Use right shifts to reduce the sample to its actual size. For example, audio formats with 24 bit samples will have bits_per_raw_sample set to 24, and format set to AV_SAMPLE_FMT_S32. To get the original sample use \"(int32_t)sample >> 8\".\"",47,null],[12,"profile","","Codec-specific bitstream restrictions that the stream conforms to.",47,null],[12,"level","","",47,null],[12,"width","","Video only. The dimensions of the video frame in pixels.",47,null],[12,"height","","",47,null],[12,"sample_aspect_ratio","","Video only. The aspect ratio (width / height) which a single pixel should have when displayed.",47,null],[12,"field_order","","Video only. The order of the fields in interlaced video.",47,null],[12,"color_range","","Video only. Additional colorspace characteristics.",47,null],[12,"color_primaries","","",47,null],[12,"color_trc","","",47,null],[12,"color_space","","",47,null],[12,"chroma_location","","",47,null],[12,"video_delay","","Video only. Number of delayed frames.",47,null],[12,"channel_layout","","Audio only. The channel layout bitmask. May be 0 if the channel layout is unknown or unspecified, otherwise the number of bits set must be equal to the channels field.",47,null],[12,"channels","","Audio only. The number of audio channels.",47,null],[12,"sample_rate","","Audio only. The number of audio samples per second.",47,null],[12,"block_align","","Audio only. The number of bytes per coded audio frame, required by some formats.",47,null],[12,"frame_size","","Audio only. Audio frame size, if known. Required by some formats to be static.",47,null],[12,"initial_padding","","Audio only. The amount of padding (in samples) inserted by the encoder at the beginning of the audio. I.e. this number of leading decoded samples must be discarded by the caller to get the original audio without leading padding.",47,null],[12,"trailing_padding","","Audio only. The amount of padding (in samples) appended by the encoder to the end of the audio. I.e. this number of decoded samples must be discarded by the caller from the end of the stream to get the original audio without any trailing padding.",47,null],[12,"seek_preroll","","Audio only. Number of samples to skip after a discontinuity.",47,null],[3,"AVCodecParserContext","","",null,null],[12,"priv_data","","",48,null],[12,"parser","","",48,null],[12,"frame_offset","","",48,null],[12,"cur_offset","","",48,null],[12,"next_frame_offset","","",48,null],[12,"pict_type","","",48,null],[12,"repeat_pict","","This field is used for proper frame duration computation in lavf. It signals, how much longer the frame duration of the current frame is compared to normal frame duration.",48,null],[12,"pts","","",48,null],[12,"dts","","",48,null],[12,"last_pts","","",48,null],[12,"last_dts","","",48,null],[12,"fetch_timestamp","","",48,null],[12,"cur_frame_start_index","","",48,null],[12,"cur_frame_offset","","",48,null],[12,"cur_frame_pts","","",48,null],[12,"cur_frame_dts","","",48,null],[12,"flags","","",48,null],[12,"offset","","< byte offset from starting packet start",48,null],[12,"cur_frame_end","","",48,null],[12,"key_frame","","Set by parser to 1 for key frames and 0 for non-key frames. It is initialized to -1, so if the parser doesn't set this flag, old-style fallback using AV_PICTURE_TYPE_I picture type as key frames will be used.",48,null],[12,"convergence_duration","","@deprecated unused",48,null],[12,"dts_sync_point","","Synchronization point for start of timestamp generation.",48,null],[12,"dts_ref_dts_delta","","Offset of the current timestamp against last timestamp sync point in units of AVCodecContext.time_base.",48,null],[12,"pts_dts_delta","","Presentation delay of current frame in units of AVCodecContext.time_base.",48,null],[12,"cur_frame_pos","","Position of the packet in file.",48,null],[12,"pos","","Byte position of currently parsed frame in stream.",48,null],[12,"last_pos","","Previous frame byte position.",48,null],[12,"duration","","Duration of the current frame. For audio, this is in units of 1 / AVCodecContext.sample_rate. For all other types, this is in units of AVCodecContext.time_base.",48,null],[12,"field_order","","",48,null],[12,"picture_structure","","Indicate whether a picture is coded as a frame, top field or bottom field.",48,null],[12,"output_picture_number","","Picture number incremented in presentation or output order. This field may be reinitialized at the first picture of a new sequence.",48,null],[12,"width","","Dimensions of the decoded video intended for presentation.",48,null],[12,"height","","",48,null],[12,"coded_width","","Dimensions of the coded video.",48,null],[12,"coded_height","","",48,null],[12,"format","","The format of the coded data, corresponds to enum AVPixelFormat for video and for enum AVSampleFormat for audio.",48,null],[3,"AVCodecParser","","",null,null],[12,"codec_ids","","",49,null],[12,"priv_data_size","","",49,null],[12,"parser_init","","",49,null],[12,"parser_parse","","",49,null],[12,"parser_close","","",49,null],[12,"split","","",49,null],[12,"next","","",49,null],[3,"ReSampleContext","","",null,null],[3,"AVResampleContext","","",null,null],[3,"AVBitStreamFilterContext","","",null,null],[12,"priv_data","","",50,null],[12,"filter","","",50,null],[12,"parser","","",50,null],[12,"next","","",50,null],[12,"args","","Internal default arguments, used if NULL is passed to av_bitstream_filter_filter(). Not for access by library users.",50,null],[3,"AVBSFInternal","","",null,null],[3,"AVBSFContext","","The bitstream filter state.",null,null],[12,"av_class","","A class for logging and AVOptions",51,null],[12,"filter","","The bitstream filter this context is an instance of.",51,null],[12,"internal","","Opaque libavcodec internal data. Must not be touched by the caller in any way.",51,null],[12,"priv_data","","Opaque filter-specific private data. If filter->priv_class is non-NULL, this is an AVOptions-enabled struct.",51,null],[12,"par_in","","Parameters of the input stream. This field is allocated in av_bsf_alloc(), it needs to be filled by the caller before av_bsf_init().",51,null],[12,"par_out","","Parameters of the output stream. This field is allocated in av_bsf_alloc(), it is set by the filter in av_bsf_init().",51,null],[12,"time_base_in","","The timebase used for the timestamps of the input packets. Set by the caller before av_bsf_init().",51,null],[12,"time_base_out","","The timebase used for the timestamps of the output packets. Set by the filter in av_bsf_init().",51,null],[3,"AVBitStreamFilter","","",null,null],[12,"name","","",52,null],[12,"codec_ids","","A list of codec ids supported by the filter, terminated by AV_CODEC_ID_NONE. May be NULL, in that case the bitstream filter works with any codec id.",52,null],[12,"priv_class","","A class for the private data, used to declare bitstream filter private AVOptions. This field is NULL for bitstream filters that do not declare any options.",52,null],[12,"priv_data_size","","",52,null],[12,"init","","",52,null],[12,"filter","","",52,null],[12,"close","","",52,null],[3,"AVBSFList","","",null,null],[3,"AVIOInterruptCB","","Callback for checking whether to abort blocking functions. AVERROR_EXIT is returned in this case by the interrupted function. During blocking operations, callback is called with opaque as parameter. If the callback returns 1, the blocking operation will be aborted.",null,null],[12,"callback","","",53,null],[12,"opaque","","",53,null],[3,"AVIODirEntry","","Describes single entry of the directory.",null,null],[12,"name","","< Filename ",54,null],[12,"type_","","< Type of the entry ",54,null],[12,"utf8","","< Set to 1 when name is encoded with UTF-8, 0 otherwise. Name can be encoded with UTF-8 even though 0 is set. ",54,null],[12,"size","","< File size in bytes, -1 if unknown. ",54,null],[12,"modification_timestamp","","< Time of last modification in microseconds since unix epoch, -1 if unknown. ",54,null],[12,"access_timestamp","","< Time of last access in microseconds since unix epoch, -1 if unknown. ",54,null],[12,"status_change_timestamp","","< Time of last status change in microseconds since unix epoch, -1 if unknown. ",54,null],[12,"user_id","","< User ID of owner, -1 if unknown. ",54,null],[12,"group_id","","< Group ID of owner, -1 if unknown. ",54,null],[12,"filemode","","< Unix file mode, -1 if unknown. ",54,null],[3,"AVIODirContext","","",null,null],[12,"url_context","","",55,null],[3,"AVIOContext","","Bytestream IO Context. New fields can be added to the end with minor version bumps. Removal, reordering and changes to existing fields require a major version bump. sizeof(AVIOContext) must not be used outside libav*.",null,null],[12,"av_class","","A class for private options.",56,null],[12,"buffer","","< Start of the buffer. ",56,null],[12,"buffer_size","","< Maximum buffer size ",56,null],[12,"buf_ptr","","< Current position in the buffer ",56,null],[12,"buf_end","","< End of the data, may be less than buffer+buffer_size if the read function returned less data than requested, e.g. for streams where no more data has been received yet. ",56,null],[12,"opaque","","< A private pointer, passed to the read/write/seek/... functions. ",56,null],[12,"read_packet","","",56,null],[12,"write_packet","","",56,null],[12,"seek","","",56,null],[12,"pos","","< position in the file of the current buffer ",56,null],[12,"must_flush","","< true if the next seek should flush ",56,null],[12,"eof_reached","","< true if eof reached ",56,null],[12,"write_flag","","< true if open for writing ",56,null],[12,"max_packet_size","","",56,null],[12,"checksum","","",56,null],[12,"checksum_ptr","","",56,null],[12,"update_checksum","","",56,null],[12,"error","","< contains the error code or 0 if no error happened ",56,null],[12,"read_pause","","Pause or resume playback for network streaming protocols - e.g. MMS.",56,null],[12,"read_seek","","Seek to a given timestamp in stream with the specified stream_index. Needed for some network streaming protocols which don't support seeking to byte position.",56,null],[12,"seekable","","A combination of AVIO_SEEKABLE_ flags or 0 when the stream is not seekable.",56,null],[12,"maxsize","","max filesize, used to limit allocations This field is internal to libavformat and access from outside is not allowed.",56,null],[12,"direct","","avio_read and avio_write should if possible be satisfied directly instead of going through a buffer, and avio_seek will always call the underlying seek function directly.",56,null],[12,"bytes_read","","Bytes read statistic This field is internal to libavformat and access from outside is not allowed.",56,null],[12,"seek_count","","seek statistic This field is internal to libavformat and access from outside is not allowed.",56,null],[12,"writeout_count","","writeout statistic This field is internal to libavformat and access from outside is not allowed.",56,null],[12,"orig_buffer_size","","Original buffer size used internally after probing and ensure seekback to reset the buffer size This field is internal to libavformat and access from outside is not allowed.",56,null],[12,"short_seek_threshold","","Threshold to favor readahead over seek. This is current internal only, do not use from outside.",56,null],[12,"protocol_whitelist","","',' separated list of allowed protocols.",56,null],[12,"protocol_blacklist","","',' separated list of disallowed protocols.",56,null],[12,"write_data_type","","A callback that is used instead of write_packet.",56,null],[12,"ignore_boundary_point","","If set, don't call write_data_type separately for AVIO_DATA_MARKER_BOUNDARY_POINT, but ignore them and treat them as AVIO_DATA_MARKER_UNKNOWN (to avoid needlessly small chunks of data returned from the callback).",56,null],[12,"current_type","","Internal, not meant to be used from outside of AVIOContext.",56,null],[12,"last_time","","",56,null],[12,"short_seek_get","","A callback that is used instead of short_seek_threshold. This is current internal only, do not use from outside.",56,null],[3,"AVFormatContext","","Format I/O context. New fields can be added to the end with minor version bumps. Removal, reordering and changes to existing fields require a major version bump. sizeof(AVFormatContext) must not be used outside libav*, use avformat_alloc_context() to create an AVFormatContext.",null,null],[12,"av_class","","A class for logging and @ref avoptions. Set by avformat_alloc_context(). Exports (de)muxer private options if they exist.",57,null],[12,"iformat","","The input container format.",57,null],[12,"oformat","","The output container format.",57,null],[12,"priv_data","","Format private data. This is an AVOptions-enabled struct if and only if iformat/oformat.priv_class is not NULL.",57,null],[12,"pb","","I/O context.",57,null],[12,"ctx_flags","","Flags signalling stream properties. A combination of AVFMTCTX_*. Set by libavformat.",57,null],[12,"nb_streams","","Number of elements in AVFormatContext.streams.",57,null],[12,"streams","","A list of all streams in the file. New streams are created with avformat_new_stream().",57,null],[12,"filename","","input or output filename",57,null],[12,"start_time","","Position of the first frame of the component, in AV_TIME_BASE fractional seconds. NEVER set this value directly: It is deduced from the AVStream values.",57,null],[12,"duration","","Duration of the stream, in AV_TIME_BASE fractional seconds. Only set this value if you know none of the individual stream durations and also do not set any of them. This is deduced from the AVStream values if not set.",57,null],[12,"bit_rate","","Total stream bitrate in bit/s, 0 if not available. Never set it directly if the file_size and the duration are known as FFmpeg can compute it automatically.",57,null],[12,"packet_size","","",57,null],[12,"max_delay","","",57,null],[12,"flags","","Flags modifying the (de)muxer behaviour. A combination of AVFMT_FLAG_*. Set by the user before avformat_open_input() / avformat_write_header().",57,null],[12,"probesize","","Maximum size of the data read from input for determining the input container format. Demuxing only, set by the caller before avformat_open_input().",57,null],[12,"max_analyze_duration","","Maximum duration (in AV_TIME_BASE units) of the data read from input in avformat_find_stream_info(). Demuxing only, set by the caller before avformat_find_stream_info(). Can be set to 0 to let avformat choose using a heuristic.",57,null],[12,"key","","",57,null],[12,"keylen","","",57,null],[12,"nb_programs","","",57,null],[12,"programs","","",57,null],[12,"video_codec_id","","Forced video codec_id. Demuxing: Set by user.",57,null],[12,"audio_codec_id","","Forced audio codec_id. Demuxing: Set by user.",57,null],[12,"subtitle_codec_id","","Forced subtitle codec_id. Demuxing: Set by user.",57,null],[12,"max_index_size","","Maximum amount of memory in bytes to use for the index of each stream. If the index exceeds this size, entries will be discarded as needed to maintain a smaller size. This can lead to slower or less accurate seeking (depends on demuxer). Demuxers for which a full in-memory index is mandatory will ignore this. - muxing: unused - demuxing: set by user",57,null],[12,"max_picture_buffer","","Maximum amount of memory in bytes to use for buffering frames obtained from realtime capture devices.",57,null],[12,"nb_chapters","","Number of chapters in AVChapter array. When muxing, chapters are normally written in the file header, so nb_chapters should normally be initialized before write_header is called. Some muxers (e.g. mov and mkv) can also write chapters in the trailer.  To write chapters in the trailer, nb_chapters must be zero when write_header is called and non-zero when write_trailer is called. - muxing: set by user - demuxing: set by libavformat",57,null],[12,"chapters","","",57,null],[12,"metadata","","Metadata that applies to the whole file.",57,null],[12,"start_time_realtime","","Start time of the stream in real world time, in microseconds since the Unix epoch (00:00 1st January 1970). That is, pts=0 in the stream was captured at this real world time. - muxing: Set by the caller before avformat_write_header(). If set to           either 0 or AV_NOPTS_VALUE, then the current wall-time will           be used. - demuxing: Set by libavformat. AV_NOPTS_VALUE if unknown. Note that             the value may become known after some number of frames             have been received.",57,null],[12,"fps_probe_size","","The number of frames used for determining the framerate in avformat_find_stream_info(). Demuxing only, set by the caller before avformat_find_stream_info().",57,null],[12,"error_recognition","","Error recognition; higher values will detect more errors but may misdetect some more or less valid parts as errors. Demuxing only, set by the caller before avformat_open_input().",57,null],[12,"interrupt_callback","","Custom interrupt callbacks for the I/O layer.",57,null],[12,"debug","","Flags to enable debugging.",57,null],[12,"max_interleave_delta","","Maximum buffering duration for interleaving.",57,null],[12,"strict_std_compliance","","Allow non-standard and experimental extension @see AVCodecContext.strict_std_compliance",57,null],[12,"event_flags","","Flags for the user to detect events happening on the file. Flags must be cleared by the user once the event has been handled. A combination of AVFMT_EVENT_FLAG_*.",57,null],[12,"max_ts_probe","","Maximum number of packets to read while waiting for the first timestamp. Decoding only.",57,null],[12,"avoid_negative_ts","","Avoid negative timestamps during muxing. Any value of the AVFMT_AVOID_NEG_TS_* constants. Note, this only works when using av_interleaved_write_frame. (interleave_packet_per_dts is in use) - muxing: Set by user - demuxing: unused",57,null],[12,"ts_id","","Transport stream id. This will be moved into demuxer private options. Thus no API/ABI compatibility",57,null],[12,"audio_preload","","Audio preload in microseconds. Note, not all formats support this and unpredictable things may happen if it is used when not supported. - encoding: Set by user - decoding: unused",57,null],[12,"max_chunk_duration","","Max chunk time in microseconds. Note, not all formats support this and unpredictable things may happen if it is used when not supported. - encoding: Set by user - decoding: unused",57,null],[12,"max_chunk_size","","Max chunk size in bytes Note, not all formats support this and unpredictable things may happen if it is used when not supported. - encoding: Set by user - decoding: unused",57,null],[12,"use_wallclock_as_timestamps","","forces the use of wallclock timestamps as pts/dts of packets This has undefined results in the presence of B frames. - encoding: unused - decoding: Set by user",57,null],[12,"avio_flags","","avio flags, used to force AVIO_FLAG_DIRECT. - encoding: unused - decoding: Set by user",57,null],[12,"duration_estimation_method","","The duration field can be estimated through various ways, and this field can be used to know how the duration was estimated. - encoding: unused - decoding: Read by user",57,null],[12,"skip_initial_bytes","","Skip initial bytes when opening stream - encoding: unused - decoding: Set by user",57,null],[12,"correct_ts_overflow","","Correct single timestamp overflows - encoding: unused - decoding: Set by user",57,null],[12,"seek2any","","Force seeking to any (also non key) frames. - encoding: unused - decoding: Set by user",57,null],[12,"flush_packets","","Flush the I/O context after each packet. - encoding: Set by user - decoding: unused",57,null],[12,"probe_score","","format probing score. The maximal score is AVPROBE_SCORE_MAX, its set when the demuxer probes the format. - encoding: unused - decoding: set by avformat, read by user",57,null],[12,"format_probesize","","number of bytes to read maximally to identify format. - encoding: unused - decoding: set by user",57,null],[12,"codec_whitelist","","',' separated list of allowed decoders. If NULL then all are allowed - encoding: unused - decoding: set by user",57,null],[12,"format_whitelist","","',' separated list of allowed demuxers. If NULL then all are allowed - encoding: unused - decoding: set by user",57,null],[12,"internal","","An opaque field for libavformat internal usage. Must not be accessed in any way by callers.",57,null],[12,"io_repositioned","","IO repositioned flag. This is set by avformat when the underlaying IO context read pointer is repositioned, for example when doing byte based seeking. Demuxers can use the flag to detect such changes.",57,null],[12,"video_codec","","Forced video codec. This allows forcing a specific decoder, even when there are multiple with the same codec_id. Demuxing: Set by user",57,null],[12,"audio_codec","","Forced audio codec. This allows forcing a specific decoder, even when there are multiple with the same codec_id. Demuxing: Set by user",57,null],[12,"subtitle_codec","","Forced subtitle codec. This allows forcing a specific decoder, even when there are multiple with the same codec_id. Demuxing: Set by user",57,null],[12,"data_codec","","Forced data codec. This allows forcing a specific decoder, even when there are multiple with the same codec_id. Demuxing: Set by user",57,null],[12,"metadata_header_padding","","Number of bytes to be written as padding in a metadata header. Demuxing: Unused. Muxing: Set by user via av_format_set_metadata_header_padding.",57,null],[12,"opaque","","User data. This is a place for some private data of the user.",57,null],[12,"control_message_cb","","Callback used by devices to communicate with application.",57,null],[12,"output_ts_offset","","Output timestamp offset, in microseconds. Muxing: set by user",57,null],[12,"dump_separator","","dump format separator. can be \", \" or \"\\n      \" or anything else - muxing: Set by user. - demuxing: Set by user.",57,null],[12,"data_codec_id","","Forced Data codec_id. Demuxing: Set by user.",57,null],[12,"open_cb","","Called to open further IO contexts when needed for demuxing.",57,null],[12,"protocol_whitelist","","',' separated list of allowed protocols. - encoding: unused - decoding: set by user",57,null],[12,"io_open","","",57,null],[12,"io_close","","A callback for closing the streams opened with AVFormatContext.io_open().",57,null],[12,"protocol_blacklist","","',' separated list of disallowed protocols. - encoding: unused - decoding: set by user",57,null],[12,"max_streams","","The maximum number of streams. - encoding: unused - decoding: set by user",57,null],[3,"AVDeviceInfoList","","",null,null],[3,"AVDeviceCapabilitiesQuery","","",null,null],[3,"AVFrac","","The exact value of the fractional number is: 'val + num / den'. num is assumed to be 0 <= num < den.",null,null],[12,"val","","",58,null],[12,"num","","",58,null],[12,"den","","",58,null],[3,"AVCodecTag","","",null,null],[3,"AVProbeData","","This structure contains the data a format has to probe a file.",null,null],[12,"filename","","",59,null],[12,"buf","","< Buffer must have AVPROBE_PADDING_SIZE of extra allocated bytes filled with zero. ",59,null],[12,"buf_size","","< Size of buf except extra allocated bytes ",59,null],[12,"mime_type","","< mime_type, when known. ",59,null],[3,"AVOutputFormat","","@addtogroup lavf_encoding @{",null,null],[12,"name","","",60,null],[12,"long_name","","Descriptive name for the format, meant to be more human-readable than name. You should use the NULL_IF_CONFIG_SMALL() macro to define it.",60,null],[12,"mime_type","","",60,null],[12,"extensions","","< comma-separated filename extensions ",60,null],[12,"audio_codec","","< default audio codec ",60,null],[12,"video_codec","","< default video codec ",60,null],[12,"subtitle_codec","","< default subtitle codec ",60,null],[12,"flags","","can use flags: AVFMT_NOFILE, AVFMT_NEEDNUMBER, AVFMT_GLOBALHEADER, AVFMT_NOTIMESTAMPS, AVFMT_VARIABLE_FPS, AVFMT_NODIMENSIONS, AVFMT_NOSTREAMS, AVFMT_ALLOW_FLUSH, AVFMT_TS_NONSTRICT, AVFMT_TS_NEGATIVE",60,null],[12,"codec_tag","","List of supported codec_id-codec_tag pairs, ordered by \"better choice first\". The arrays are all terminated by AV_CODEC_ID_NONE.",60,null],[12,"priv_class","","< AVClass for the private context",60,null],[12,"next","","",60,null],[12,"priv_data_size","","size of private data so that it can be allocated in the wrapper",60,null],[12,"write_header","","",60,null],[12,"write_packet","","Write a packet. If AVFMT_ALLOW_FLUSH is set in flags, pkt can be NULL in order to flush data buffered in the muxer. When flushing, return 0 if there still is more data to flush, or 1 if everything was flushed and there is no more buffered data.",60,null],[12,"write_trailer","","",60,null],[12,"interleave_packet","","Currently only used to set pixel format if not YUV420P.",60,null],[12,"query_codec","","Test if the given codec can be stored in this container.",60,null],[12,"get_output_timestamp","","",60,null],[12,"control_message","","Allows sending messages from application to device.",60,null],[12,"write_uncoded_frame","","Write an uncoded AVFrame.",60,null],[12,"get_device_list","","Returns device list with it properties. @see avdevice_list_devices() for more details.",60,null],[12,"create_device_capabilities","","Initialize device capabilities submodule. @see avdevice_capabilities_create() for more details.",60,null],[12,"free_device_capabilities","","Free device capabilities submodule. @see avdevice_capabilities_free() for more details.",60,null],[12,"data_codec","","< default data codec ",60,null],[12,"init","","Initialize format. May allocate data here, and set any AVFormatContext or AVStream parameters that need to be set before packets are sent. This method must not write output.",60,null],[12,"deinit","","Deinitialize format. If present, this is called whenever the muxer is being destroyed, regardless of whether or not the header has been written.",60,null],[12,"check_bitstream","","Set up any necessary bitstream filtering and extract any extra data needed for the global header. Return 0 if more packets from this stream must be checked; 1 if not.",60,null],[3,"AVInputFormat","","@addtogroup lavf_decoding @{",null,null],[12,"name","","A comma separated list of short names for the format. New names may be appended with a minor bump.",61,null],[12,"long_name","","Descriptive name for the format, meant to be more human-readable than name. You should use the NULL_IF_CONFIG_SMALL() macro to define it.",61,null],[12,"flags","","Can use flags: AVFMT_NOFILE, AVFMT_NEEDNUMBER, AVFMT_SHOW_IDS, AVFMT_GENERIC_INDEX, AVFMT_TS_DISCONT, AVFMT_NOBINSEARCH, AVFMT_NOGENSEARCH, AVFMT_NO_BYTE_SEEK, AVFMT_SEEK_TO_PTS.",61,null],[12,"extensions","","If extensions are defined, then no probe is done. You should usually not use extension format guessing because it is not reliable enough",61,null],[12,"codec_tag","","",61,null],[12,"priv_class","","< AVClass for the private context",61,null],[12,"mime_type","","Comma-separated list of mime types. It is used check for matching mime types while probing. @see av_probe_input_format2",61,null],[12,"next","","",61,null],[12,"raw_codec_id","","Raw demuxers store their codec ID here.",61,null],[12,"priv_data_size","","Size of private data so that it can be allocated in the wrapper.",61,null],[12,"read_probe","","Tell if a given file has a chance of being parsed as this format. The buffer provided is guaranteed to be AVPROBE_PADDING_SIZE bytes big so you do not have to check for that unless you need more.",61,null],[12,"read_header","","Read the format header and initialize the AVFormatContext structure. Return 0 if OK. 'avformat_new_stream' should be called to create new streams.",61,null],[12,"read_packet","","Read one packet and put it in 'pkt'. pts and flags are also set. 'avformat_new_stream' can be called only if the flag AVFMTCTX_NOHEADER is used and only in the calling thread (not in a background thread). @return 0 on success, < 0 on error.         When returning an error, pkt must not have been allocated         or must be freed before returning",61,null],[12,"read_close","","Close the stream. The AVFormatContext and AVStreams are not freed by this function",61,null],[12,"read_seek","","Seek to a given timestamp relative to the frames in stream component stream_index. @param stream_index Must not be -1. @param flags Selects which direction should be preferred if no exact              match is available. @return >= 0 on success (but not necessarily the new offset)",61,null],[12,"read_timestamp","","Get the next timestamp in stream[stream_index].time_base units. @return the timestamp or AV_NOPTS_VALUE if an error occurred",61,null],[12,"read_play","","Start/resume playing - only meaningful if using a network-based format (RTSP).",61,null],[12,"read_pause","","Pause playing - only meaningful if using a network-based format (RTSP).",61,null],[12,"read_seek2","","Seek to timestamp ts. Seeking will be done so that the point from which all active streams can be presented successfully will be closest to ts and within min/max_ts. Active streams are all streams that have AVStream.discard < AVDISCARD_ALL.",61,null],[12,"get_device_list","","Returns device list with it properties. @see avdevice_list_devices() for more details.",61,null],[12,"create_device_capabilities","","Initialize device capabilities submodule. @see avdevice_capabilities_create() for more details.",61,null],[12,"free_device_capabilities","","Free device capabilities submodule. @see avdevice_capabilities_free() for more details.",61,null],[3,"AVIndexEntry","","",null,null],[12,"pos","","",62,null],[12,"timestamp","","< * Timestamp in AVStream.time_base units, preferably the time from which on correctly decoded frames are available * when seeking to this entry. That means preferable PTS on keyframe based formats. * But demuxers can choose to store a different timestamp, if it is more convenient for the implementation or nothing better * is known",62,null],[12,"_bitfield_1","","",62,null],[12,"min_distance","","< Minimum distance between this and the previous keyframe, used to avoid unneeded searching. ",62,null],[3,"AVStreamInternal","","",null,null],[3,"AVStream","","Stream structure. New fields can be added to the end with minor version bumps. Removal, reordering and changes to existing fields require a major version bump. sizeof(AVStream) must not be used outside libav*.",null,null],[12,"index","","< stream index in AVFormatContext ",63,null],[12,"id","","Format-specific stream ID. decoding: set by libavformat encoding: set by the user, replaced by libavformat if left unset",63,null],[12,"codec","","@deprecated use the codecpar struct instead",63,null],[12,"priv_data","","",63,null],[12,"pts","","@deprecated this field is unused",63,null],[12,"time_base","","This is the fundamental unit of time (in seconds) in terms of which frame timestamps are represented.",63,null],[12,"start_time","","Decoding: pts of the first frame of the stream in presentation order, in stream time base. Only set this if you are absolutely 100% sure that the value you set it to really is the pts of the first frame. This may be undefined (AV_NOPTS_VALUE). @note The ASF header does NOT contain a correct start_time the ASF demuxer must NOT set this.",63,null],[12,"duration","","Decoding: duration of the stream, in stream time base. If a source file does not specify a duration, but does specify a bitrate, this value will be estimated from bitrate and file size.",63,null],[12,"nb_frames","","< number of frames in this stream if known or 0",63,null],[12,"disposition","","< AV_DISPOSITION_* bit field ",63,null],[12,"discard","","< Selects which packets can be discarded at will and do not need to be demuxed.",63,null],[12,"sample_aspect_ratio","","sample aspect ratio (0 if unknown) - encoding: Set by user. - decoding: Set by libavformat.",63,null],[12,"metadata","","",63,null],[12,"avg_frame_rate","","Average framerate",63,null],[12,"attached_pic","","For streams with AV_DISPOSITION_ATTACHED_PIC disposition, this packet will contain the attached picture.",63,null],[12,"side_data","","An array of side data that applies to the whole stream (i.e. the container does not allow it to change between packets).",63,null],[12,"nb_side_data","","The number of elements in the AVStream.side_data array.",63,null],[12,"event_flags","","Flags for the user to detect events happening on the stream. Flags must be cleared by the user once the event has been handled. A combination of AVSTREAM_EVENT_FLAG_*.",63,null],[12,"info","","",63,null],[12,"pts_wrap_bits","","< number of bits in pts (used for wrapping control) ",63,null],[12,"first_dts","","Timestamp corresponding to the last dts sync point.",63,null],[12,"cur_dts","","",63,null],[12,"last_IP_pts","","",63,null],[12,"last_IP_duration","","",63,null],[12,"probe_packets","","Number of packets to buffer for codec probing",63,null],[12,"codec_info_nb_frames","","Number of frames that have been demuxed during avformat_find_stream_info()",63,null],[12,"need_parsing","","",63,null],[12,"parser","","",63,null],[12,"last_in_packet_buffer","","last packet in packet_buffer for this stream when muxing.",63,null],[12,"probe_data","","",63,null],[12,"pts_buffer","","",63,null],[12,"index_entries","","< Only used if the format does not support seeking natively. ",63,null],[12,"nb_index_entries","","",63,null],[12,"index_entries_allocated_size","","",63,null],[12,"r_frame_rate","","Real base framerate of the stream. This is the lowest framerate with which all timestamps can be represented accurately (it is the least common multiple of all framerates in the stream). Note, this value is just a guess! For example, if the time base is 1/90000 and all frames have either approximately 3600 or 1800 timer ticks, then r_frame_rate will be 50/1.",63,null],[12,"stream_identifier","","Stream Identifier This is the MPEG-TS stream identifier +1 0 means unknown",63,null],[12,"interleaver_chunk_size","","",63,null],[12,"interleaver_chunk_duration","","",63,null],[12,"request_probe","","stream probing state -1   -> probing finished  0   -> no probing requested rest -> perform probing with request_probe being the minimum score to accept. NOT PART OF PUBLIC API",63,null],[12,"skip_to_keyframe","","Indicates that everything up to the next keyframe should be discarded.",63,null],[12,"skip_samples","","Number of samples to skip at the start of the frame decoded from the next packet.",63,null],[12,"start_skip_samples","","If not 0, the number of samples that should be skipped from the start of the stream (the samples are removed from packets with pts==0, which also assumes negative timestamps do not happen). Intended for use with formats such as mp3 with ad-hoc gapless audio support.",63,null],[12,"first_discard_sample","","If not 0, the first audio sample that should be discarded from the stream. This is broken by design (needs global sample count), but can't be avoided for broken by design formats such as mp3 with ad-hoc gapless audio support.",63,null],[12,"last_discard_sample","","The sample after last sample that is intended to be discarded after first_discard_sample. Works on frame boundaries only. Used to prevent early EOF if the gapless info is broken (considered concatenated mp3s).",63,null],[12,"nb_decoded_frames","","Number of internally decoded frames, used internally in libavformat, do not access its lifetime differs from info which is why it is not in that structure.",63,null],[12,"mux_ts_offset","","Timestamp offset added to timestamps before muxing NOT PART OF PUBLIC API",63,null],[12,"pts_wrap_reference","","Internal data to check for wrapping of the time stamp",63,null],[12,"pts_wrap_behavior","","Options for behavior, when a wrap is detected.",63,null],[12,"update_initial_durations_done","","Internal data to prevent doing update_initial_durations() twice",63,null],[12,"pts_reorder_error","","Internal data to generate dts from pts",63,null],[12,"pts_reorder_error_count","","",63,null],[12,"last_dts_for_order_check","","Internal data to analyze DTS and detect faulty mpeg streams",63,null],[12,"dts_ordered","","",63,null],[12,"dts_misordered","","",63,null],[12,"inject_global_side_data","","Internal data to inject global side data",63,null],[12,"recommended_encoder_configuration","","String containing paris of key and values describing recommended encoder configuration. Paris are separated by ','. Keys are separated from values by '='.",63,null],[12,"display_aspect_ratio","","display aspect ratio (0 if unknown) - encoding: unused - decoding: Set by libavformat to calculate sample_aspect_ratio internally",63,null],[12,"priv_pts","","",63,null],[12,"internal","","An opaque field for libavformat internal usage. Must not be accessed in any way by callers.",63,null],[12,"codecpar","","",63,null],[3,"AVStream__bindgen_ty_1","","",null,null],[12,"last_dts","","",64,null],[12,"duration_gcd","","",64,null],[12,"duration_count","","",64,null],[12,"rfps_duration_sum","","",64,null],[12,"duration_error","","",64,null],[12,"codec_info_duration","","",64,null],[12,"codec_info_duration_fields","","",64,null],[12,"found_decoder","","0  -> decoder has not been searched for yet. >0 -> decoder found <0 -> decoder with codec_id == -found_decoder has not been found",64,null],[12,"last_duration","","",64,null],[12,"fps_first_dts","","Those are used for average framerate estimation.",64,null],[12,"fps_first_dts_idx","","",64,null],[12,"fps_last_dts","","",64,null],[12,"fps_last_dts_idx","","",64,null],[3,"AVProgram","","New fields can be added to the end with minor version bumps. Removal, reordering and changes to existing fields require a major version bump. sizeof(AVProgram) must not be used outside libav*.",null,null],[12,"id","","",65,null],[12,"flags","","",65,null],[12,"discard","","< selects which program to discard and which to feed to the caller",65,null],[12,"stream_index","","",65,null],[12,"nb_stream_indexes","","",65,null],[12,"metadata","","",65,null],[12,"program_num","","",65,null],[12,"pmt_pid","","",65,null],[12,"pcr_pid","","",65,null],[12,"start_time","","",65,null],[12,"end_time","","",65,null],[12,"pts_wrap_reference","","< reference dts for wrap detection",65,null],[12,"pts_wrap_behavior","","< behavior on wrap detection",65,null],[3,"AVChapter","","",null,null],[12,"id","","< unique ID to identify the chapter",66,null],[12,"time_base","","< time base in which the start/end timestamps are specified",66,null],[12,"start","","< chapter start/end time in time_base units",66,null],[12,"end","","< chapter start/end time in time_base units",66,null],[12,"metadata","","",66,null],[3,"AVFormatInternal","","",null,null],[3,"AVPacketList","","",null,null],[12,"pkt","","",67,null],[12,"next","","",67,null],[3,"SwsVector","","",null,null],[12,"coeff","","< pointer to the list of coefficients",68,null],[12,"length","","< number of coefficients in the vector",68,null],[3,"SwsFilter","","",null,null],[12,"lumH","","",69,null],[12,"lumV","","",69,null],[12,"chrH","","",69,null],[12,"chrV","","",69,null],[3,"SwsContext","","",null,null],[3,"__va_list_tag","","",null,null],[12,"gp_offset","","",70,null],[12,"fp_offset","","",70,null],[12,"overflow_arg_area","","",70,null],[12,"reg_save_area","","",70,null],[3,"__locale_data","","",null,null],[12,"_address","","",71,null],[3,"AVOption","","a pointer to the first option specified in the class if any or NULL",null,null],[12,"_address","","",72,null],[3,"URLContext","","",null,null],[12,"_address","","",73,null],[3,"FFFrac","","",null,null],[12,"_address","","",74,null],[4,"AVMediaType","","@addtogroup lavu_media Media Type @brief Media Type",null,null],[13,"AVMEDIA_TYPE_UNKNOWN","","",75,null],[13,"AVMEDIA_TYPE_VIDEO","","",75,null],[13,"AVMEDIA_TYPE_AUDIO","","",75,null],[13,"AVMEDIA_TYPE_DATA","","",75,null],[13,"AVMEDIA_TYPE_SUBTITLE","","",75,null],[13,"AVMEDIA_TYPE_ATTACHMENT","","",75,null],[13,"AVMEDIA_TYPE_NB","","",75,null],[4,"AVPictureType","","@} @} @defgroup lavu_picture Image related",null,null],[13,"AV_PICTURE_TYPE_NONE","","",76,null],[13,"AV_PICTURE_TYPE_I","","",76,null],[13,"AV_PICTURE_TYPE_P","","",76,null],[13,"AV_PICTURE_TYPE_B","","",76,null],[13,"AV_PICTURE_TYPE_S","","",76,null],[13,"AV_PICTURE_TYPE_SI","","",76,null],[13,"AV_PICTURE_TYPE_SP","","",76,null],[13,"AV_PICTURE_TYPE_BI","","",76,null],[4,"idtype_t","","",null,null],[13,"P_ALL","","",77,null],[13,"P_PID","","",77,null],[13,"P_PGID","","",77,null],[4,"AVRounding","","Rounding methods.",null,null],[13,"AV_ROUND_ZERO","","",78,null],[13,"AV_ROUND_INF","","",78,null],[13,"AV_ROUND_DOWN","","",78,null],[13,"AV_ROUND_UP","","",78,null],[13,"AV_ROUND_NEAR_INF","","",78,null],[13,"AV_ROUND_PASS_MINMAX","","",78,null],[4,"AVClassCategory","","",null,null],[13,"AV_CLASS_CATEGORY_NA","","",79,null],[13,"AV_CLASS_CATEGORY_INPUT","","",79,null],[13,"AV_CLASS_CATEGORY_OUTPUT","","",79,null],[13,"AV_CLASS_CATEGORY_MUXER","","",79,null],[13,"AV_CLASS_CATEGORY_DEMUXER","","",79,null],[13,"AV_CLASS_CATEGORY_ENCODER","","",79,null],[13,"AV_CLASS_CATEGORY_DECODER","","",79,null],[13,"AV_CLASS_CATEGORY_FILTER","","",79,null],[13,"AV_CLASS_CATEGORY_BITSTREAM_FILTER","","",79,null],[13,"AV_CLASS_CATEGORY_SWSCALER","","",79,null],[13,"AV_CLASS_CATEGORY_SWRESAMPLER","","",79,null],[13,"AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT","","",79,null],[13,"AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT","","",79,null],[13,"AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT","","",79,null],[13,"AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT","","",79,null],[13,"AV_CLASS_CATEGORY_DEVICE_OUTPUT","","",79,null],[13,"AV_CLASS_CATEGORY_DEVICE_INPUT","","",79,null],[13,"AV_CLASS_CATEGORY_NB","","",79,null],[4,"AVPixelFormat","","Pixel format.",null,null],[13,"AV_PIX_FMT_NONE","","",80,null],[13,"AV_PIX_FMT_YUV420P","","",80,null],[13,"AV_PIX_FMT_YUYV422","","",80,null],[13,"AV_PIX_FMT_RGB24","","",80,null],[13,"AV_PIX_FMT_BGR24","","",80,null],[13,"AV_PIX_FMT_YUV422P","","",80,null],[13,"AV_PIX_FMT_YUV444P","","",80,null],[13,"AV_PIX_FMT_YUV410P","","",80,null],[13,"AV_PIX_FMT_YUV411P","","",80,null],[13,"AV_PIX_FMT_GRAY8","","",80,null],[13,"AV_PIX_FMT_MONOWHITE","","",80,null],[13,"AV_PIX_FMT_MONOBLACK","","",80,null],[13,"AV_PIX_FMT_PAL8","","",80,null],[13,"AV_PIX_FMT_YUVJ420P","","",80,null],[13,"AV_PIX_FMT_YUVJ422P","","",80,null],[13,"AV_PIX_FMT_YUVJ444P","","",80,null],[13,"AV_PIX_FMT_XVMC_MPEG2_MC","","",80,null],[13,"AV_PIX_FMT_XVMC_MPEG2_IDCT","","",80,null],[13,"AV_PIX_FMT_UYVY422","","",80,null],[13,"AV_PIX_FMT_UYYVYY411","","",80,null],[13,"AV_PIX_FMT_BGR8","","",80,null],[13,"AV_PIX_FMT_BGR4","","",80,null],[13,"AV_PIX_FMT_BGR4_BYTE","","",80,null],[13,"AV_PIX_FMT_RGB8","","",80,null],[13,"AV_PIX_FMT_RGB4","","",80,null],[13,"AV_PIX_FMT_RGB4_BYTE","","",80,null],[13,"AV_PIX_FMT_NV12","","",80,null],[13,"AV_PIX_FMT_NV21","","",80,null],[13,"AV_PIX_FMT_ARGB","","",80,null],[13,"AV_PIX_FMT_RGBA","","",80,null],[13,"AV_PIX_FMT_ABGR","","",80,null],[13,"AV_PIX_FMT_BGRA","","",80,null],[13,"AV_PIX_FMT_GRAY16BE","","",80,null],[13,"AV_PIX_FMT_GRAY16LE","","",80,null],[13,"AV_PIX_FMT_YUV440P","","",80,null],[13,"AV_PIX_FMT_YUVJ440P","","",80,null],[13,"AV_PIX_FMT_YUVA420P","","",80,null],[13,"AV_PIX_FMT_VDPAU_H264","","",80,null],[13,"AV_PIX_FMT_VDPAU_MPEG1","","",80,null],[13,"AV_PIX_FMT_VDPAU_MPEG2","","",80,null],[13,"AV_PIX_FMT_VDPAU_WMV3","","",80,null],[13,"AV_PIX_FMT_VDPAU_VC1","","",80,null],[13,"AV_PIX_FMT_RGB48BE","","",80,null],[13,"AV_PIX_FMT_RGB48LE","","",80,null],[13,"AV_PIX_FMT_RGB565BE","","",80,null],[13,"AV_PIX_FMT_RGB565LE","","",80,null],[13,"AV_PIX_FMT_RGB555BE","","",80,null],[13,"AV_PIX_FMT_RGB555LE","","",80,null],[13,"AV_PIX_FMT_BGR565BE","","",80,null],[13,"AV_PIX_FMT_BGR565LE","","",80,null],[13,"AV_PIX_FMT_BGR555BE","","",80,null],[13,"AV_PIX_FMT_BGR555LE","","",80,null],[13,"AV_PIX_FMT_VAAPI_MOCO","","",80,null],[13,"AV_PIX_FMT_VAAPI_IDCT","","",80,null],[13,"AV_PIX_FMT_VAAPI_VLD","","",80,null],[13,"AV_PIX_FMT_YUV420P16LE","","",80,null],[13,"AV_PIX_FMT_YUV420P16BE","","",80,null],[13,"AV_PIX_FMT_YUV422P16LE","","",80,null],[13,"AV_PIX_FMT_YUV422P16BE","","",80,null],[13,"AV_PIX_FMT_YUV444P16LE","","",80,null],[13,"AV_PIX_FMT_YUV444P16BE","","",80,null],[13,"AV_PIX_FMT_VDPAU_MPEG4","","",80,null],[13,"AV_PIX_FMT_DXVA2_VLD","","",80,null],[13,"AV_PIX_FMT_RGB444LE","","",80,null],[13,"AV_PIX_FMT_RGB444BE","","",80,null],[13,"AV_PIX_FMT_BGR444LE","","",80,null],[13,"AV_PIX_FMT_BGR444BE","","",80,null],[13,"AV_PIX_FMT_YA8","","",80,null],[13,"AV_PIX_FMT_BGR48BE","","",80,null],[13,"AV_PIX_FMT_BGR48LE","","",80,null],[13,"AV_PIX_FMT_YUV420P9BE","","",80,null],[13,"AV_PIX_FMT_YUV420P9LE","","",80,null],[13,"AV_PIX_FMT_YUV420P10BE","","",80,null],[13,"AV_PIX_FMT_YUV420P10LE","","",80,null],[13,"AV_PIX_FMT_YUV422P10BE","","",80,null],[13,"AV_PIX_FMT_YUV422P10LE","","",80,null],[13,"AV_PIX_FMT_YUV444P9BE","","",80,null],[13,"AV_PIX_FMT_YUV444P9LE","","",80,null],[13,"AV_PIX_FMT_YUV444P10BE","","",80,null],[13,"AV_PIX_FMT_YUV444P10LE","","",80,null],[13,"AV_PIX_FMT_YUV422P9BE","","",80,null],[13,"AV_PIX_FMT_YUV422P9LE","","",80,null],[13,"AV_PIX_FMT_VDA_VLD","","",80,null],[13,"AV_PIX_FMT_GBRP","","",80,null],[13,"AV_PIX_FMT_GBRP9BE","","",80,null],[13,"AV_PIX_FMT_GBRP9LE","","",80,null],[13,"AV_PIX_FMT_GBRP10BE","","",80,null],[13,"AV_PIX_FMT_GBRP10LE","","",80,null],[13,"AV_PIX_FMT_GBRP16BE","","",80,null],[13,"AV_PIX_FMT_GBRP16LE","","",80,null],[13,"AV_PIX_FMT_YUVA422P","","",80,null],[13,"AV_PIX_FMT_YUVA444P","","",80,null],[13,"AV_PIX_FMT_YUVA420P9BE","","",80,null],[13,"AV_PIX_FMT_YUVA420P9LE","","",80,null],[13,"AV_PIX_FMT_YUVA422P9BE","","",80,null],[13,"AV_PIX_FMT_YUVA422P9LE","","",80,null],[13,"AV_PIX_FMT_YUVA444P9BE","","",80,null],[13,"AV_PIX_FMT_YUVA444P9LE","","",80,null],[13,"AV_PIX_FMT_YUVA420P10BE","","",80,null],[13,"AV_PIX_FMT_YUVA420P10LE","","",80,null],[13,"AV_PIX_FMT_YUVA422P10BE","","",80,null],[13,"AV_PIX_FMT_YUVA422P10LE","","",80,null],[13,"AV_PIX_FMT_YUVA444P10BE","","",80,null],[13,"AV_PIX_FMT_YUVA444P10LE","","",80,null],[13,"AV_PIX_FMT_YUVA420P16BE","","",80,null],[13,"AV_PIX_FMT_YUVA420P16LE","","",80,null],[13,"AV_PIX_FMT_YUVA422P16BE","","",80,null],[13,"AV_PIX_FMT_YUVA422P16LE","","",80,null],[13,"AV_PIX_FMT_YUVA444P16BE","","",80,null],[13,"AV_PIX_FMT_YUVA444P16LE","","",80,null],[13,"AV_PIX_FMT_VDPAU","","",80,null],[13,"AV_PIX_FMT_XYZ12LE","","",80,null],[13,"AV_PIX_FMT_XYZ12BE","","",80,null],[13,"AV_PIX_FMT_NV16","","",80,null],[13,"AV_PIX_FMT_NV20LE","","",80,null],[13,"AV_PIX_FMT_NV20BE","","",80,null],[13,"AV_PIX_FMT_RGBA64BE","","",80,null],[13,"AV_PIX_FMT_RGBA64LE","","",80,null],[13,"AV_PIX_FMT_BGRA64BE","","",80,null],[13,"AV_PIX_FMT_BGRA64LE","","",80,null],[13,"AV_PIX_FMT_YVYU422","","",80,null],[13,"AV_PIX_FMT_VDA","","",80,null],[13,"AV_PIX_FMT_YA16BE","","",80,null],[13,"AV_PIX_FMT_YA16LE","","",80,null],[13,"AV_PIX_FMT_GBRAP","","",80,null],[13,"AV_PIX_FMT_GBRAP16BE","","",80,null],[13,"AV_PIX_FMT_GBRAP16LE","","",80,null],[13,"AV_PIX_FMT_QSV","","",80,null],[13,"AV_PIX_FMT_MMAL","","",80,null],[13,"AV_PIX_FMT_D3D11VA_VLD","","",80,null],[13,"AV_PIX_FMT_CUDA","","",80,null],[13,"AV_PIX_FMT_0RGB","","",80,null],[13,"AV_PIX_FMT_RGB0","","",80,null],[13,"AV_PIX_FMT_0BGR","","",80,null],[13,"AV_PIX_FMT_BGR0","","",80,null],[13,"AV_PIX_FMT_YUV420P12BE","","",80,null],[13,"AV_PIX_FMT_YUV420P12LE","","",80,null],[13,"AV_PIX_FMT_YUV420P14BE","","",80,null],[13,"AV_PIX_FMT_YUV420P14LE","","",80,null],[13,"AV_PIX_FMT_YUV422P12BE","","",80,null],[13,"AV_PIX_FMT_YUV422P12LE","","",80,null],[13,"AV_PIX_FMT_YUV422P14BE","","",80,null],[13,"AV_PIX_FMT_YUV422P14LE","","",80,null],[13,"AV_PIX_FMT_YUV444P12BE","","",80,null],[13,"AV_PIX_FMT_YUV444P12LE","","",80,null],[13,"AV_PIX_FMT_YUV444P14BE","","",80,null],[13,"AV_PIX_FMT_YUV444P14LE","","",80,null],[13,"AV_PIX_FMT_GBRP12BE","","",80,null],[13,"AV_PIX_FMT_GBRP12LE","","",80,null],[13,"AV_PIX_FMT_GBRP14BE","","",80,null],[13,"AV_PIX_FMT_GBRP14LE","","",80,null],[13,"AV_PIX_FMT_YUVJ411P","","",80,null],[13,"AV_PIX_FMT_BAYER_BGGR8","","",80,null],[13,"AV_PIX_FMT_BAYER_RGGB8","","",80,null],[13,"AV_PIX_FMT_BAYER_GBRG8","","",80,null],[13,"AV_PIX_FMT_BAYER_GRBG8","","",80,null],[13,"AV_PIX_FMT_BAYER_BGGR16LE","","",80,null],[13,"AV_PIX_FMT_BAYER_BGGR16BE","","",80,null],[13,"AV_PIX_FMT_BAYER_RGGB16LE","","",80,null],[13,"AV_PIX_FMT_BAYER_RGGB16BE","","",80,null],[13,"AV_PIX_FMT_BAYER_GBRG16LE","","",80,null],[13,"AV_PIX_FMT_BAYER_GBRG16BE","","",80,null],[13,"AV_PIX_FMT_BAYER_GRBG16LE","","",80,null],[13,"AV_PIX_FMT_BAYER_GRBG16BE","","",80,null],[13,"AV_PIX_FMT_YUV440P10LE","","",80,null],[13,"AV_PIX_FMT_YUV440P10BE","","",80,null],[13,"AV_PIX_FMT_YUV440P12LE","","",80,null],[13,"AV_PIX_FMT_YUV440P12BE","","",80,null],[13,"AV_PIX_FMT_AYUV64LE","","",80,null],[13,"AV_PIX_FMT_AYUV64BE","","",80,null],[13,"AV_PIX_FMT_VIDEOTOOLBOX","","",80,null],[13,"AV_PIX_FMT_P010LE","","",80,null],[13,"AV_PIX_FMT_P010BE","","",80,null],[13,"AV_PIX_FMT_GBRAP12BE","","",80,null],[13,"AV_PIX_FMT_GBRAP12LE","","",80,null],[13,"AV_PIX_FMT_GBRAP10BE","","",80,null],[13,"AV_PIX_FMT_GBRAP10LE","","",80,null],[13,"AV_PIX_FMT_MEDIACODEC","","",80,null],[13,"AV_PIX_FMT_GRAY12BE","","",80,null],[13,"AV_PIX_FMT_GRAY12LE","","",80,null],[13,"AV_PIX_FMT_GRAY10BE","","",80,null],[13,"AV_PIX_FMT_GRAY10LE","","",80,null],[13,"AV_PIX_FMT_P016LE","","",80,null],[13,"AV_PIX_FMT_P016BE","","",80,null],[13,"AV_PIX_FMT_NB","","",80,null],[4,"AVColorPrimaries","","Chromaticity coordinates of the source primaries.",null,null],[13,"AVCOL_PRI_RESERVED0","","",81,null],[13,"AVCOL_PRI_BT709","","",81,null],[13,"AVCOL_PRI_UNSPECIFIED","","",81,null],[13,"AVCOL_PRI_RESERVED","","",81,null],[13,"AVCOL_PRI_BT470M","","",81,null],[13,"AVCOL_PRI_BT470BG","","",81,null],[13,"AVCOL_PRI_SMPTE170M","","",81,null],[13,"AVCOL_PRI_SMPTE240M","","",81,null],[13,"AVCOL_PRI_FILM","","",81,null],[13,"AVCOL_PRI_BT2020","","",81,null],[13,"AVCOL_PRI_SMPTE428","","",81,null],[13,"AVCOL_PRI_SMPTE431","","",81,null],[13,"AVCOL_PRI_SMPTE432","","",81,null],[13,"AVCOL_PRI_JEDEC_P22","","",81,null],[13,"AVCOL_PRI_NB","","",81,null],[4,"AVColorTransferCharacteristic","","Color Transfer Characteristic.",null,null],[13,"AVCOL_TRC_RESERVED0","","",82,null],[13,"AVCOL_TRC_BT709","","",82,null],[13,"AVCOL_TRC_UNSPECIFIED","","",82,null],[13,"AVCOL_TRC_RESERVED","","",82,null],[13,"AVCOL_TRC_GAMMA22","","",82,null],[13,"AVCOL_TRC_GAMMA28","","",82,null],[13,"AVCOL_TRC_SMPTE170M","","",82,null],[13,"AVCOL_TRC_SMPTE240M","","",82,null],[13,"AVCOL_TRC_LINEAR","","",82,null],[13,"AVCOL_TRC_LOG","","",82,null],[13,"AVCOL_TRC_LOG_SQRT","","",82,null],[13,"AVCOL_TRC_IEC61966_2_4","","",82,null],[13,"AVCOL_TRC_BT1361_ECG","","",82,null],[13,"AVCOL_TRC_IEC61966_2_1","","",82,null],[13,"AVCOL_TRC_BT2020_10","","",82,null],[13,"AVCOL_TRC_BT2020_12","","",82,null],[13,"AVCOL_TRC_SMPTE2084","","",82,null],[13,"AVCOL_TRC_SMPTE428","","",82,null],[13,"AVCOL_TRC_ARIB_STD_B67","","",82,null],[13,"AVCOL_TRC_NB","","",82,null],[4,"AVColorSpace","","YUV colorspace type.",null,null],[13,"AVCOL_SPC_RGB","","",83,null],[13,"AVCOL_SPC_BT709","","",83,null],[13,"AVCOL_SPC_UNSPECIFIED","","",83,null],[13,"AVCOL_SPC_RESERVED","","",83,null],[13,"AVCOL_SPC_FCC","","",83,null],[13,"AVCOL_SPC_BT470BG","","",83,null],[13,"AVCOL_SPC_SMPTE170M","","",83,null],[13,"AVCOL_SPC_SMPTE240M","","",83,null],[13,"AVCOL_SPC_YCGCO","","",83,null],[13,"AVCOL_SPC_BT2020_NCL","","",83,null],[13,"AVCOL_SPC_BT2020_CL","","",83,null],[13,"AVCOL_SPC_SMPTE2085","","",83,null],[13,"AVCOL_SPC_NB","","",83,null],[4,"AVColorRange","","MPEG vs JPEG YUV range.",null,null],[13,"AVCOL_RANGE_UNSPECIFIED","","",84,null],[13,"AVCOL_RANGE_MPEG","","",84,null],[13,"AVCOL_RANGE_JPEG","","",84,null],[13,"AVCOL_RANGE_NB","","",84,null],[4,"AVChromaLocation","","Location of chroma samples.",null,null],[13,"AVCHROMA_LOC_UNSPECIFIED","","",85,null],[13,"AVCHROMA_LOC_LEFT","","",85,null],[13,"AVCHROMA_LOC_CENTER","","",85,null],[13,"AVCHROMA_LOC_TOPLEFT","","",85,null],[13,"AVCHROMA_LOC_TOP","","",85,null],[13,"AVCHROMA_LOC_BOTTOMLEFT","","",85,null],[13,"AVCHROMA_LOC_BOTTOM","","",85,null],[13,"AVCHROMA_LOC_NB","","",85,null],[4,"AVSampleFormat","","Audio sample formats",null,null],[13,"AV_SAMPLE_FMT_NONE","","",86,null],[13,"AV_SAMPLE_FMT_U8","","",86,null],[13,"AV_SAMPLE_FMT_S16","","",86,null],[13,"AV_SAMPLE_FMT_S32","","",86,null],[13,"AV_SAMPLE_FMT_FLT","","",86,null],[13,"AV_SAMPLE_FMT_DBL","","",86,null],[13,"AV_SAMPLE_FMT_U8P","","",86,null],[13,"AV_SAMPLE_FMT_S16P","","",86,null],[13,"AV_SAMPLE_FMT_S32P","","",86,null],[13,"AV_SAMPLE_FMT_FLTP","","",86,null],[13,"AV_SAMPLE_FMT_DBLP","","",86,null],[13,"AV_SAMPLE_FMT_S64","","",86,null],[13,"AV_SAMPLE_FMT_S64P","","",86,null],[13,"AV_SAMPLE_FMT_NB","","",86,null],[4,"AVMatrixEncoding","","",null,null],[13,"AV_MATRIX_ENCODING_NONE","","",87,null],[13,"AV_MATRIX_ENCODING_DOLBY","","",87,null],[13,"AV_MATRIX_ENCODING_DPLII","","",87,null],[13,"AV_MATRIX_ENCODING_DPLIIX","","",87,null],[13,"AV_MATRIX_ENCODING_DPLIIZ","","",87,null],[13,"AV_MATRIX_ENCODING_DOLBYEX","","",87,null],[13,"AV_MATRIX_ENCODING_DOLBYHEADPHONE","","",87,null],[13,"AV_MATRIX_ENCODING_NB","","",87,null],[4,"AVFrameSideDataType","","@defgroup lavu_frame AVFrame @ingroup lavu_data",null,null],[13,"AV_FRAME_DATA_PANSCAN","","",88,null],[13,"AV_FRAME_DATA_A53_CC","","",88,null],[13,"AV_FRAME_DATA_STEREO3D","","",88,null],[13,"AV_FRAME_DATA_MATRIXENCODING","","",88,null],[13,"AV_FRAME_DATA_DOWNMIX_INFO","","",88,null],[13,"AV_FRAME_DATA_REPLAYGAIN","","",88,null],[13,"AV_FRAME_DATA_DISPLAYMATRIX","","",88,null],[13,"AV_FRAME_DATA_AFD","","",88,null],[13,"AV_FRAME_DATA_MOTION_VECTORS","","",88,null],[13,"AV_FRAME_DATA_SKIP_SAMPLES","","",88,null],[13,"AV_FRAME_DATA_AUDIO_SERVICE_TYPE","","",88,null],[13,"AV_FRAME_DATA_MASTERING_DISPLAY_METADATA","","",88,null],[13,"AV_FRAME_DATA_GOP_TIMECODE","","",88,null],[13,"AV_FRAME_DATA_SPHERICAL","","",88,null],[4,"AVActiveFormatDescription","","",null,null],[13,"AV_AFD_SAME","","",89,null],[13,"AV_AFD_4_3","","",89,null],[13,"AV_AFD_16_9","","",89,null],[13,"AV_AFD_14_9","","",89,null],[13,"AV_AFD_4_3_SP_14_9","","",89,null],[13,"AV_AFD_16_9_SP_14_9","","",89,null],[13,"AV_AFD_SP_4_3","","",89,null],[4,"AVCodecID","","Identify the syntax and semantics of the bitstream. The principle is roughly: Two decoders with the same ID can decode the same streams. Two encoders with the same ID can encode compatible streams. There may be slight deviations from the principle due to implementation details.",null,null],[13,"AV_CODEC_ID_NONE","","",90,null],[13,"AV_CODEC_ID_MPEG1VIDEO","","",90,null],[13,"AV_CODEC_ID_MPEG2VIDEO","","",90,null],[13,"AV_CODEC_ID_MPEG2VIDEO_XVMC","","",90,null],[13,"AV_CODEC_ID_H261","","",90,null],[13,"AV_CODEC_ID_H263","","",90,null],[13,"AV_CODEC_ID_RV10","","",90,null],[13,"AV_CODEC_ID_RV20","","",90,null],[13,"AV_CODEC_ID_MJPEG","","",90,null],[13,"AV_CODEC_ID_MJPEGB","","",90,null],[13,"AV_CODEC_ID_LJPEG","","",90,null],[13,"AV_CODEC_ID_SP5X","","",90,null],[13,"AV_CODEC_ID_JPEGLS","","",90,null],[13,"AV_CODEC_ID_MPEG4","","",90,null],[13,"AV_CODEC_ID_RAWVIDEO","","",90,null],[13,"AV_CODEC_ID_MSMPEG4V1","","",90,null],[13,"AV_CODEC_ID_MSMPEG4V2","","",90,null],[13,"AV_CODEC_ID_MSMPEG4V3","","",90,null],[13,"AV_CODEC_ID_WMV1","","",90,null],[13,"AV_CODEC_ID_WMV2","","",90,null],[13,"AV_CODEC_ID_H263P","","",90,null],[13,"AV_CODEC_ID_H263I","","",90,null],[13,"AV_CODEC_ID_FLV1","","",90,null],[13,"AV_CODEC_ID_SVQ1","","",90,null],[13,"AV_CODEC_ID_SVQ3","","",90,null],[13,"AV_CODEC_ID_DVVIDEO","","",90,null],[13,"AV_CODEC_ID_HUFFYUV","","",90,null],[13,"AV_CODEC_ID_CYUV","","",90,null],[13,"AV_CODEC_ID_H264","","",90,null],[13,"AV_CODEC_ID_INDEO3","","",90,null],[13,"AV_CODEC_ID_VP3","","",90,null],[13,"AV_CODEC_ID_THEORA","","",90,null],[13,"AV_CODEC_ID_ASV1","","",90,null],[13,"AV_CODEC_ID_ASV2","","",90,null],[13,"AV_CODEC_ID_FFV1","","",90,null],[13,"AV_CODEC_ID_4XM","","",90,null],[13,"AV_CODEC_ID_VCR1","","",90,null],[13,"AV_CODEC_ID_CLJR","","",90,null],[13,"AV_CODEC_ID_MDEC","","",90,null],[13,"AV_CODEC_ID_ROQ","","",90,null],[13,"AV_CODEC_ID_INTERPLAY_VIDEO","","",90,null],[13,"AV_CODEC_ID_XAN_WC3","","",90,null],[13,"AV_CODEC_ID_XAN_WC4","","",90,null],[13,"AV_CODEC_ID_RPZA","","",90,null],[13,"AV_CODEC_ID_CINEPAK","","",90,null],[13,"AV_CODEC_ID_WS_VQA","","",90,null],[13,"AV_CODEC_ID_MSRLE","","",90,null],[13,"AV_CODEC_ID_MSVIDEO1","","",90,null],[13,"AV_CODEC_ID_IDCIN","","",90,null],[13,"AV_CODEC_ID_8BPS","","",90,null],[13,"AV_CODEC_ID_SMC","","",90,null],[13,"AV_CODEC_ID_FLIC","","",90,null],[13,"AV_CODEC_ID_TRUEMOTION1","","",90,null],[13,"AV_CODEC_ID_VMDVIDEO","","",90,null],[13,"AV_CODEC_ID_MSZH","","",90,null],[13,"AV_CODEC_ID_ZLIB","","",90,null],[13,"AV_CODEC_ID_QTRLE","","",90,null],[13,"AV_CODEC_ID_TSCC","","",90,null],[13,"AV_CODEC_ID_ULTI","","",90,null],[13,"AV_CODEC_ID_QDRAW","","",90,null],[13,"AV_CODEC_ID_VIXL","","",90,null],[13,"AV_CODEC_ID_QPEG","","",90,null],[13,"AV_CODEC_ID_PNG","","",90,null],[13,"AV_CODEC_ID_PPM","","",90,null],[13,"AV_CODEC_ID_PBM","","",90,null],[13,"AV_CODEC_ID_PGM","","",90,null],[13,"AV_CODEC_ID_PGMYUV","","",90,null],[13,"AV_CODEC_ID_PAM","","",90,null],[13,"AV_CODEC_ID_FFVHUFF","","",90,null],[13,"AV_CODEC_ID_RV30","","",90,null],[13,"AV_CODEC_ID_RV40","","",90,null],[13,"AV_CODEC_ID_VC1","","",90,null],[13,"AV_CODEC_ID_WMV3","","",90,null],[13,"AV_CODEC_ID_LOCO","","",90,null],[13,"AV_CODEC_ID_WNV1","","",90,null],[13,"AV_CODEC_ID_AASC","","",90,null],[13,"AV_CODEC_ID_INDEO2","","",90,null],[13,"AV_CODEC_ID_FRAPS","","",90,null],[13,"AV_CODEC_ID_TRUEMOTION2","","",90,null],[13,"AV_CODEC_ID_BMP","","",90,null],[13,"AV_CODEC_ID_CSCD","","",90,null],[13,"AV_CODEC_ID_MMVIDEO","","",90,null],[13,"AV_CODEC_ID_ZMBV","","",90,null],[13,"AV_CODEC_ID_AVS","","",90,null],[13,"AV_CODEC_ID_SMACKVIDEO","","",90,null],[13,"AV_CODEC_ID_NUV","","",90,null],[13,"AV_CODEC_ID_KMVC","","",90,null],[13,"AV_CODEC_ID_FLASHSV","","",90,null],[13,"AV_CODEC_ID_CAVS","","",90,null],[13,"AV_CODEC_ID_JPEG2000","","",90,null],[13,"AV_CODEC_ID_VMNC","","",90,null],[13,"AV_CODEC_ID_VP5","","",90,null],[13,"AV_CODEC_ID_VP6","","",90,null],[13,"AV_CODEC_ID_VP6F","","",90,null],[13,"AV_CODEC_ID_TARGA","","",90,null],[13,"AV_CODEC_ID_DSICINVIDEO","","",90,null],[13,"AV_CODEC_ID_TIERTEXSEQVIDEO","","",90,null],[13,"AV_CODEC_ID_TIFF","","",90,null],[13,"AV_CODEC_ID_GIF","","",90,null],[13,"AV_CODEC_ID_DXA","","",90,null],[13,"AV_CODEC_ID_DNXHD","","",90,null],[13,"AV_CODEC_ID_THP","","",90,null],[13,"AV_CODEC_ID_SGI","","",90,null],[13,"AV_CODEC_ID_C93","","",90,null],[13,"AV_CODEC_ID_BETHSOFTVID","","",90,null],[13,"AV_CODEC_ID_PTX","","",90,null],[13,"AV_CODEC_ID_TXD","","",90,null],[13,"AV_CODEC_ID_VP6A","","",90,null],[13,"AV_CODEC_ID_AMV","","",90,null],[13,"AV_CODEC_ID_VB","","",90,null],[13,"AV_CODEC_ID_PCX","","",90,null],[13,"AV_CODEC_ID_SUNRAST","","",90,null],[13,"AV_CODEC_ID_INDEO4","","",90,null],[13,"AV_CODEC_ID_INDEO5","","",90,null],[13,"AV_CODEC_ID_MIMIC","","",90,null],[13,"AV_CODEC_ID_RL2","","",90,null],[13,"AV_CODEC_ID_ESCAPE124","","",90,null],[13,"AV_CODEC_ID_DIRAC","","",90,null],[13,"AV_CODEC_ID_BFI","","",90,null],[13,"AV_CODEC_ID_CMV","","",90,null],[13,"AV_CODEC_ID_MOTIONPIXELS","","",90,null],[13,"AV_CODEC_ID_TGV","","",90,null],[13,"AV_CODEC_ID_TGQ","","",90,null],[13,"AV_CODEC_ID_TQI","","",90,null],[13,"AV_CODEC_ID_AURA","","",90,null],[13,"AV_CODEC_ID_AURA2","","",90,null],[13,"AV_CODEC_ID_V210X","","",90,null],[13,"AV_CODEC_ID_TMV","","",90,null],[13,"AV_CODEC_ID_V210","","",90,null],[13,"AV_CODEC_ID_DPX","","",90,null],[13,"AV_CODEC_ID_MAD","","",90,null],[13,"AV_CODEC_ID_FRWU","","",90,null],[13,"AV_CODEC_ID_FLASHSV2","","",90,null],[13,"AV_CODEC_ID_CDGRAPHICS","","",90,null],[13,"AV_CODEC_ID_R210","","",90,null],[13,"AV_CODEC_ID_ANM","","",90,null],[13,"AV_CODEC_ID_BINKVIDEO","","",90,null],[13,"AV_CODEC_ID_IFF_ILBM","","",90,null],[13,"AV_CODEC_ID_KGV1","","",90,null],[13,"AV_CODEC_ID_YOP","","",90,null],[13,"AV_CODEC_ID_VP8","","",90,null],[13,"AV_CODEC_ID_PICTOR","","",90,null],[13,"AV_CODEC_ID_ANSI","","",90,null],[13,"AV_CODEC_ID_A64_MULTI","","",90,null],[13,"AV_CODEC_ID_A64_MULTI5","","",90,null],[13,"AV_CODEC_ID_R10K","","",90,null],[13,"AV_CODEC_ID_MXPEG","","",90,null],[13,"AV_CODEC_ID_LAGARITH","","",90,null],[13,"AV_CODEC_ID_PRORES","","",90,null],[13,"AV_CODEC_ID_JV","","",90,null],[13,"AV_CODEC_ID_DFA","","",90,null],[13,"AV_CODEC_ID_WMV3IMAGE","","",90,null],[13,"AV_CODEC_ID_VC1IMAGE","","",90,null],[13,"AV_CODEC_ID_UTVIDEO","","",90,null],[13,"AV_CODEC_ID_BMV_VIDEO","","",90,null],[13,"AV_CODEC_ID_VBLE","","",90,null],[13,"AV_CODEC_ID_DXTORY","","",90,null],[13,"AV_CODEC_ID_V410","","",90,null],[13,"AV_CODEC_ID_XWD","","",90,null],[13,"AV_CODEC_ID_CDXL","","",90,null],[13,"AV_CODEC_ID_XBM","","",90,null],[13,"AV_CODEC_ID_ZEROCODEC","","",90,null],[13,"AV_CODEC_ID_MSS1","","",90,null],[13,"AV_CODEC_ID_MSA1","","",90,null],[13,"AV_CODEC_ID_TSCC2","","",90,null],[13,"AV_CODEC_ID_MTS2","","",90,null],[13,"AV_CODEC_ID_CLLC","","",90,null],[13,"AV_CODEC_ID_MSS2","","",90,null],[13,"AV_CODEC_ID_VP9","","",90,null],[13,"AV_CODEC_ID_AIC","","",90,null],[13,"AV_CODEC_ID_ESCAPE130","","",90,null],[13,"AV_CODEC_ID_G2M","","",90,null],[13,"AV_CODEC_ID_WEBP","","",90,null],[13,"AV_CODEC_ID_HNM4_VIDEO","","",90,null],[13,"AV_CODEC_ID_HEVC","","",90,null],[13,"AV_CODEC_ID_FIC","","",90,null],[13,"AV_CODEC_ID_ALIAS_PIX","","",90,null],[13,"AV_CODEC_ID_BRENDER_PIX","","",90,null],[13,"AV_CODEC_ID_PAF_VIDEO","","",90,null],[13,"AV_CODEC_ID_EXR","","",90,null],[13,"AV_CODEC_ID_VP7","","",90,null],[13,"AV_CODEC_ID_SANM","","",90,null],[13,"AV_CODEC_ID_SGIRLE","","",90,null],[13,"AV_CODEC_ID_MVC1","","",90,null],[13,"AV_CODEC_ID_MVC2","","",90,null],[13,"AV_CODEC_ID_HQX","","",90,null],[13,"AV_CODEC_ID_TDSC","","",90,null],[13,"AV_CODEC_ID_HQ_HQA","","",90,null],[13,"AV_CODEC_ID_HAP","","",90,null],[13,"AV_CODEC_ID_DDS","","",90,null],[13,"AV_CODEC_ID_DXV","","",90,null],[13,"AV_CODEC_ID_SCREENPRESSO","","",90,null],[13,"AV_CODEC_ID_RSCC","","",90,null],[13,"AV_CODEC_ID_Y41P","","",90,null],[13,"AV_CODEC_ID_AVRP","","",90,null],[13,"AV_CODEC_ID_012V","","",90,null],[13,"AV_CODEC_ID_AVUI","","",90,null],[13,"AV_CODEC_ID_AYUV","","",90,null],[13,"AV_CODEC_ID_TARGA_Y216","","",90,null],[13,"AV_CODEC_ID_V308","","",90,null],[13,"AV_CODEC_ID_V408","","",90,null],[13,"AV_CODEC_ID_YUV4","","",90,null],[13,"AV_CODEC_ID_AVRN","","",90,null],[13,"AV_CODEC_ID_CPIA","","",90,null],[13,"AV_CODEC_ID_XFACE","","",90,null],[13,"AV_CODEC_ID_SNOW","","",90,null],[13,"AV_CODEC_ID_SMVJPEG","","",90,null],[13,"AV_CODEC_ID_APNG","","",90,null],[13,"AV_CODEC_ID_DAALA","","",90,null],[13,"AV_CODEC_ID_CFHD","","",90,null],[13,"AV_CODEC_ID_TRUEMOTION2RT","","",90,null],[13,"AV_CODEC_ID_M101","","",90,null],[13,"AV_CODEC_ID_MAGICYUV","","",90,null],[13,"AV_CODEC_ID_SHEERVIDEO","","",90,null],[13,"AV_CODEC_ID_YLC","","",90,null],[13,"AV_CODEC_ID_PSD","","",90,null],[13,"AV_CODEC_ID_PIXLET","","",90,null],[13,"AV_CODEC_ID_SPEEDHQ","","",90,null],[13,"AV_CODEC_ID_FMVC","","",90,null],[13,"AV_CODEC_ID_SCPR","","",90,null],[13,"AV_CODEC_ID_CLEARVIDEO","","",90,null],[13,"AV_CODEC_ID_XPM","","",90,null],[13,"AV_CODEC_ID_AV1","","",90,null],[13,"AV_CODEC_ID_FIRST_AUDIO","","",90,null],[13,"AV_CODEC_ID_PCM_S16BE","","",90,null],[13,"AV_CODEC_ID_PCM_U16LE","","",90,null],[13,"AV_CODEC_ID_PCM_U16BE","","",90,null],[13,"AV_CODEC_ID_PCM_S8","","",90,null],[13,"AV_CODEC_ID_PCM_U8","","",90,null],[13,"AV_CODEC_ID_PCM_MULAW","","",90,null],[13,"AV_CODEC_ID_PCM_ALAW","","",90,null],[13,"AV_CODEC_ID_PCM_S32LE","","",90,null],[13,"AV_CODEC_ID_PCM_S32BE","","",90,null],[13,"AV_CODEC_ID_PCM_U32LE","","",90,null],[13,"AV_CODEC_ID_PCM_U32BE","","",90,null],[13,"AV_CODEC_ID_PCM_S24LE","","",90,null],[13,"AV_CODEC_ID_PCM_S24BE","","",90,null],[13,"AV_CODEC_ID_PCM_U24LE","","",90,null],[13,"AV_CODEC_ID_PCM_U24BE","","",90,null],[13,"AV_CODEC_ID_PCM_S24DAUD","","",90,null],[13,"AV_CODEC_ID_PCM_ZORK","","",90,null],[13,"AV_CODEC_ID_PCM_S16LE_PLANAR","","",90,null],[13,"AV_CODEC_ID_PCM_DVD","","",90,null],[13,"AV_CODEC_ID_PCM_F32BE","","",90,null],[13,"AV_CODEC_ID_PCM_F32LE","","",90,null],[13,"AV_CODEC_ID_PCM_F64BE","","",90,null],[13,"AV_CODEC_ID_PCM_F64LE","","",90,null],[13,"AV_CODEC_ID_PCM_BLURAY","","",90,null],[13,"AV_CODEC_ID_PCM_LXF","","",90,null],[13,"AV_CODEC_ID_S302M","","",90,null],[13,"AV_CODEC_ID_PCM_S8_PLANAR","","",90,null],[13,"AV_CODEC_ID_PCM_S24LE_PLANAR","","",90,null],[13,"AV_CODEC_ID_PCM_S32LE_PLANAR","","",90,null],[13,"AV_CODEC_ID_PCM_S16BE_PLANAR","","",90,null],[13,"AV_CODEC_ID_PCM_S64LE","","",90,null],[13,"AV_CODEC_ID_PCM_S64BE","","",90,null],[13,"AV_CODEC_ID_PCM_F16LE","","",90,null],[13,"AV_CODEC_ID_PCM_F24LE","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_QT","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_WAV","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_DK3","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_DK4","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_WS","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_SMJPEG","","",90,null],[13,"AV_CODEC_ID_ADPCM_MS","","",90,null],[13,"AV_CODEC_ID_ADPCM_4XM","","",90,null],[13,"AV_CODEC_ID_ADPCM_XA","","",90,null],[13,"AV_CODEC_ID_ADPCM_ADX","","",90,null],[13,"AV_CODEC_ID_ADPCM_EA","","",90,null],[13,"AV_CODEC_ID_ADPCM_G726","","",90,null],[13,"AV_CODEC_ID_ADPCM_CT","","",90,null],[13,"AV_CODEC_ID_ADPCM_SWF","","",90,null],[13,"AV_CODEC_ID_ADPCM_YAMAHA","","",90,null],[13,"AV_CODEC_ID_ADPCM_SBPRO_4","","",90,null],[13,"AV_CODEC_ID_ADPCM_SBPRO_3","","",90,null],[13,"AV_CODEC_ID_ADPCM_SBPRO_2","","",90,null],[13,"AV_CODEC_ID_ADPCM_THP","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_AMV","","",90,null],[13,"AV_CODEC_ID_ADPCM_EA_R1","","",90,null],[13,"AV_CODEC_ID_ADPCM_EA_R3","","",90,null],[13,"AV_CODEC_ID_ADPCM_EA_R2","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_EA_SEAD","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_EA_EACS","","",90,null],[13,"AV_CODEC_ID_ADPCM_EA_XAS","","",90,null],[13,"AV_CODEC_ID_ADPCM_EA_MAXIS_XA","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_ISS","","",90,null],[13,"AV_CODEC_ID_ADPCM_G722","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_APC","","",90,null],[13,"AV_CODEC_ID_ADPCM_VIMA","","",90,null],[13,"AV_CODEC_ID_ADPCM_AFC","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_OKI","","",90,null],[13,"AV_CODEC_ID_ADPCM_DTK","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_RAD","","",90,null],[13,"AV_CODEC_ID_ADPCM_G726LE","","",90,null],[13,"AV_CODEC_ID_ADPCM_THP_LE","","",90,null],[13,"AV_CODEC_ID_ADPCM_PSX","","",90,null],[13,"AV_CODEC_ID_ADPCM_AICA","","",90,null],[13,"AV_CODEC_ID_ADPCM_IMA_DAT4","","",90,null],[13,"AV_CODEC_ID_ADPCM_MTAF","","",90,null],[13,"AV_CODEC_ID_AMR_NB","","",90,null],[13,"AV_CODEC_ID_AMR_WB","","",90,null],[13,"AV_CODEC_ID_RA_144","","",90,null],[13,"AV_CODEC_ID_RA_288","","",90,null],[13,"AV_CODEC_ID_ROQ_DPCM","","",90,null],[13,"AV_CODEC_ID_INTERPLAY_DPCM","","",90,null],[13,"AV_CODEC_ID_XAN_DPCM","","",90,null],[13,"AV_CODEC_ID_SOL_DPCM","","",90,null],[13,"AV_CODEC_ID_SDX2_DPCM","","",90,null],[13,"AV_CODEC_ID_MP2","","",90,null],[13,"AV_CODEC_ID_MP3","","",90,null],[13,"AV_CODEC_ID_AAC","","",90,null],[13,"AV_CODEC_ID_AC3","","",90,null],[13,"AV_CODEC_ID_DTS","","",90,null],[13,"AV_CODEC_ID_VORBIS","","",90,null],[13,"AV_CODEC_ID_DVAUDIO","","",90,null],[13,"AV_CODEC_ID_WMAV1","","",90,null],[13,"AV_CODEC_ID_WMAV2","","",90,null],[13,"AV_CODEC_ID_MACE3","","",90,null],[13,"AV_CODEC_ID_MACE6","","",90,null],[13,"AV_CODEC_ID_VMDAUDIO","","",90,null],[13,"AV_CODEC_ID_FLAC","","",90,null],[13,"AV_CODEC_ID_MP3ADU","","",90,null],[13,"AV_CODEC_ID_MP3ON4","","",90,null],[13,"AV_CODEC_ID_SHORTEN","","",90,null],[13,"AV_CODEC_ID_ALAC","","",90,null],[13,"AV_CODEC_ID_WESTWOOD_SND1","","",90,null],[13,"AV_CODEC_ID_GSM","","",90,null],[13,"AV_CODEC_ID_QDM2","","",90,null],[13,"AV_CODEC_ID_COOK","","",90,null],[13,"AV_CODEC_ID_TRUESPEECH","","",90,null],[13,"AV_CODEC_ID_TTA","","",90,null],[13,"AV_CODEC_ID_SMACKAUDIO","","",90,null],[13,"AV_CODEC_ID_QCELP","","",90,null],[13,"AV_CODEC_ID_WAVPACK","","",90,null],[13,"AV_CODEC_ID_DSICINAUDIO","","",90,null],[13,"AV_CODEC_ID_IMC","","",90,null],[13,"AV_CODEC_ID_MUSEPACK7","","",90,null],[13,"AV_CODEC_ID_MLP","","",90,null],[13,"AV_CODEC_ID_GSM_MS","","",90,null],[13,"AV_CODEC_ID_ATRAC3","","",90,null],[13,"AV_CODEC_ID_VOXWARE","","",90,null],[13,"AV_CODEC_ID_APE","","",90,null],[13,"AV_CODEC_ID_NELLYMOSER","","",90,null],[13,"AV_CODEC_ID_MUSEPACK8","","",90,null],[13,"AV_CODEC_ID_SPEEX","","",90,null],[13,"AV_CODEC_ID_WMAVOICE","","",90,null],[13,"AV_CODEC_ID_WMAPRO","","",90,null],[13,"AV_CODEC_ID_WMALOSSLESS","","",90,null],[13,"AV_CODEC_ID_ATRAC3P","","",90,null],[13,"AV_CODEC_ID_EAC3","","",90,null],[13,"AV_CODEC_ID_SIPR","","",90,null],[13,"AV_CODEC_ID_MP1","","",90,null],[13,"AV_CODEC_ID_TWINVQ","","",90,null],[13,"AV_CODEC_ID_TRUEHD","","",90,null],[13,"AV_CODEC_ID_MP4ALS","","",90,null],[13,"AV_CODEC_ID_ATRAC1","","",90,null],[13,"AV_CODEC_ID_BINKAUDIO_RDFT","","",90,null],[13,"AV_CODEC_ID_BINKAUDIO_DCT","","",90,null],[13,"AV_CODEC_ID_AAC_LATM","","",90,null],[13,"AV_CODEC_ID_QDMC","","",90,null],[13,"AV_CODEC_ID_CELT","","",90,null],[13,"AV_CODEC_ID_G723_1","","",90,null],[13,"AV_CODEC_ID_G729","","",90,null],[13,"AV_CODEC_ID_8SVX_EXP","","",90,null],[13,"AV_CODEC_ID_8SVX_FIB","","",90,null],[13,"AV_CODEC_ID_BMV_AUDIO","","",90,null],[13,"AV_CODEC_ID_RALF","","",90,null],[13,"AV_CODEC_ID_IAC","","",90,null],[13,"AV_CODEC_ID_ILBC","","",90,null],[13,"AV_CODEC_ID_OPUS","","",90,null],[13,"AV_CODEC_ID_COMFORT_NOISE","","",90,null],[13,"AV_CODEC_ID_TAK","","",90,null],[13,"AV_CODEC_ID_METASOUND","","",90,null],[13,"AV_CODEC_ID_PAF_AUDIO","","",90,null],[13,"AV_CODEC_ID_ON2AVC","","",90,null],[13,"AV_CODEC_ID_DSS_SP","","",90,null],[13,"AV_CODEC_ID_FFWAVESYNTH","","",90,null],[13,"AV_CODEC_ID_SONIC","","",90,null],[13,"AV_CODEC_ID_SONIC_LS","","",90,null],[13,"AV_CODEC_ID_EVRC","","",90,null],[13,"AV_CODEC_ID_SMV","","",90,null],[13,"AV_CODEC_ID_DSD_LSBF","","",90,null],[13,"AV_CODEC_ID_DSD_MSBF","","",90,null],[13,"AV_CODEC_ID_DSD_LSBF_PLANAR","","",90,null],[13,"AV_CODEC_ID_DSD_MSBF_PLANAR","","",90,null],[13,"AV_CODEC_ID_4GV","","",90,null],[13,"AV_CODEC_ID_INTERPLAY_ACM","","",90,null],[13,"AV_CODEC_ID_XMA1","","",90,null],[13,"AV_CODEC_ID_XMA2","","",90,null],[13,"AV_CODEC_ID_DST","","",90,null],[13,"AV_CODEC_ID_ATRAC3AL","","",90,null],[13,"AV_CODEC_ID_ATRAC3PAL","","",90,null],[13,"AV_CODEC_ID_FIRST_SUBTITLE","","",90,null],[13,"AV_CODEC_ID_DVB_SUBTITLE","","",90,null],[13,"AV_CODEC_ID_TEXT","","",90,null],[13,"AV_CODEC_ID_XSUB","","",90,null],[13,"AV_CODEC_ID_SSA","","",90,null],[13,"AV_CODEC_ID_MOV_TEXT","","",90,null],[13,"AV_CODEC_ID_HDMV_PGS_SUBTITLE","","",90,null],[13,"AV_CODEC_ID_DVB_TELETEXT","","",90,null],[13,"AV_CODEC_ID_SRT","","",90,null],[13,"AV_CODEC_ID_MICRODVD","","",90,null],[13,"AV_CODEC_ID_EIA_608","","",90,null],[13,"AV_CODEC_ID_JACOSUB","","",90,null],[13,"AV_CODEC_ID_SAMI","","",90,null],[13,"AV_CODEC_ID_REALTEXT","","",90,null],[13,"AV_CODEC_ID_STL","","",90,null],[13,"AV_CODEC_ID_SUBVIEWER1","","",90,null],[13,"AV_CODEC_ID_SUBVIEWER","","",90,null],[13,"AV_CODEC_ID_SUBRIP","","",90,null],[13,"AV_CODEC_ID_WEBVTT","","",90,null],[13,"AV_CODEC_ID_MPL2","","",90,null],[13,"AV_CODEC_ID_VPLAYER","","",90,null],[13,"AV_CODEC_ID_PJS","","",90,null],[13,"AV_CODEC_ID_ASS","","",90,null],[13,"AV_CODEC_ID_HDMV_TEXT_SUBTITLE","","",90,null],[13,"AV_CODEC_ID_FIRST_UNKNOWN","","",90,null],[13,"AV_CODEC_ID_SCTE_35","","",90,null],[13,"AV_CODEC_ID_BINTEXT","","",90,null],[13,"AV_CODEC_ID_XBIN","","",90,null],[13,"AV_CODEC_ID_IDF","","",90,null],[13,"AV_CODEC_ID_OTF","","",90,null],[13,"AV_CODEC_ID_SMPTE_KLV","","",90,null],[13,"AV_CODEC_ID_DVD_NAV","","",90,null],[13,"AV_CODEC_ID_TIMED_ID3","","",90,null],[13,"AV_CODEC_ID_BIN_DATA","","",90,null],[13,"AV_CODEC_ID_PROBE","","",90,null],[13,"AV_CODEC_ID_MPEG2TS","","",90,null],[13,"AV_CODEC_ID_MPEG4SYSTEMS","","",90,null],[13,"AV_CODEC_ID_FFMETADATA","","",90,null],[13,"AV_CODEC_ID_WRAPPED_AVFRAME","","",90,null],[4,"AVDiscard","","@ingroup lavc_decoding",null,null],[13,"AVDISCARD_NONE","","",91,null],[13,"AVDISCARD_DEFAULT","","",91,null],[13,"AVDISCARD_NONREF","","",91,null],[13,"AVDISCARD_BIDIR","","",91,null],[13,"AVDISCARD_NONINTRA","","",91,null],[13,"AVDISCARD_NONKEY","","",91,null],[13,"AVDISCARD_ALL","","",91,null],[4,"AVAudioServiceType","","",null,null],[13,"AV_AUDIO_SERVICE_TYPE_MAIN","","",92,null],[13,"AV_AUDIO_SERVICE_TYPE_EFFECTS","","",92,null],[13,"AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED","","",92,null],[13,"AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED","","",92,null],[13,"AV_AUDIO_SERVICE_TYPE_DIALOGUE","","",92,null],[13,"AV_AUDIO_SERVICE_TYPE_COMMENTARY","","",92,null],[13,"AV_AUDIO_SERVICE_TYPE_EMERGENCY","","",92,null],[13,"AV_AUDIO_SERVICE_TYPE_VOICE_OVER","","",92,null],[13,"AV_AUDIO_SERVICE_TYPE_KARAOKE","","",92,null],[13,"AV_AUDIO_SERVICE_TYPE_NB","","",92,null],[4,"AVPacketSideDataType","","@defgroup lavc_packet AVPacket",null,null],[13,"AV_PKT_DATA_PALETTE","","",93,null],[13,"AV_PKT_DATA_NEW_EXTRADATA","","",93,null],[13,"AV_PKT_DATA_PARAM_CHANGE","","",93,null],[13,"AV_PKT_DATA_H263_MB_INFO","","",93,null],[13,"AV_PKT_DATA_REPLAYGAIN","","",93,null],[13,"AV_PKT_DATA_DISPLAYMATRIX","","",93,null],[13,"AV_PKT_DATA_STEREO3D","","",93,null],[13,"AV_PKT_DATA_AUDIO_SERVICE_TYPE","","",93,null],[13,"AV_PKT_DATA_QUALITY_STATS","","",93,null],[13,"AV_PKT_DATA_FALLBACK_TRACK","","",93,null],[13,"AV_PKT_DATA_CPB_PROPERTIES","","",93,null],[13,"AV_PKT_DATA_SKIP_SAMPLES","","",93,null],[13,"AV_PKT_DATA_JP_DUALMONO","","",93,null],[13,"AV_PKT_DATA_STRINGS_METADATA","","",93,null],[13,"AV_PKT_DATA_SUBTITLE_POSITION","","",93,null],[13,"AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL","","",93,null],[13,"AV_PKT_DATA_WEBVTT_IDENTIFIER","","",93,null],[13,"AV_PKT_DATA_WEBVTT_SETTINGS","","",93,null],[13,"AV_PKT_DATA_METADATA_UPDATE","","",93,null],[13,"AV_PKT_DATA_MPEGTS_STREAM_ID","","",93,null],[13,"AV_PKT_DATA_MASTERING_DISPLAY_METADATA","","",93,null],[13,"AV_PKT_DATA_SPHERICAL","","",93,null],[4,"AVSideDataParamChangeFlags","","",null,null],[13,"AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT","","",94,null],[13,"AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT","","",94,null],[13,"AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE","","",94,null],[13,"AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS","","",94,null],[4,"AVFieldOrder","","",null,null],[13,"AV_FIELD_UNKNOWN","","",95,null],[13,"AV_FIELD_PROGRESSIVE","","",95,null],[13,"AV_FIELD_TT","","",95,null],[13,"AV_FIELD_BB","","",95,null],[13,"AV_FIELD_TB","","",95,null],[13,"AV_FIELD_BT","","",95,null],[4,"AVSubtitleType","","",null,null],[13,"SUBTITLE_NONE","","",96,null],[13,"SUBTITLE_BITMAP","","",96,null],[13,"SUBTITLE_TEXT","","",96,null],[13,"SUBTITLE_ASS","","",96,null],[4,"AVPictureStructure","","@defgroup lavc_parsing Frame parsing @{",null,null],[13,"AV_PICTURE_STRUCTURE_UNKNOWN","","",97,null],[13,"AV_PICTURE_STRUCTURE_TOP_FIELD","","",97,null],[13,"AV_PICTURE_STRUCTURE_BOTTOM_FIELD","","",97,null],[13,"AV_PICTURE_STRUCTURE_FRAME","","",97,null],[4,"AVLockOp","","Lock operation used by lockmgr",null,null],[13,"AV_LOCK_CREATE","","",98,null],[13,"AV_LOCK_OBTAIN","","",98,null],[13,"AV_LOCK_RELEASE","","",98,null],[13,"AV_LOCK_DESTROY","","",98,null],[4,"AVIODirEntryType","","Directory entry types.",null,null],[13,"AVIO_ENTRY_UNKNOWN","","",99,null],[13,"AVIO_ENTRY_BLOCK_DEVICE","","",99,null],[13,"AVIO_ENTRY_CHARACTER_DEVICE","","",99,null],[13,"AVIO_ENTRY_DIRECTORY","","",99,null],[13,"AVIO_ENTRY_NAMED_PIPE","","",99,null],[13,"AVIO_ENTRY_SYMBOLIC_LINK","","",99,null],[13,"AVIO_ENTRY_SOCKET","","",99,null],[13,"AVIO_ENTRY_FILE","","",99,null],[13,"AVIO_ENTRY_SERVER","","",99,null],[13,"AVIO_ENTRY_SHARE","","",99,null],[13,"AVIO_ENTRY_WORKGROUP","","",99,null],[4,"AVIODataMarkerType","","Different data types that can be returned via the AVIO write_data_type callback.",null,null],[13,"AVIO_DATA_MARKER_HEADER","","",100,null],[13,"AVIO_DATA_MARKER_SYNC_POINT","","",100,null],[13,"AVIO_DATA_MARKER_BOUNDARY_POINT","","",100,null],[13,"AVIO_DATA_MARKER_UNKNOWN","","",100,null],[13,"AVIO_DATA_MARKER_TRAILER","","",100,null],[4,"AVStreamParseType","","@}",null,null],[13,"AVSTREAM_PARSE_NONE","","",101,null],[13,"AVSTREAM_PARSE_FULL","","",101,null],[13,"AVSTREAM_PARSE_HEADERS","","",101,null],[13,"AVSTREAM_PARSE_TIMESTAMPS","","",101,null],[13,"AVSTREAM_PARSE_FULL_ONCE","","",101,null],[13,"AVSTREAM_PARSE_FULL_RAW","","",101,null],[4,"AVDurationEstimationMethod","","The duration of a video can be estimated through various ways, and this enum can be used to know how the duration was estimated.",null,null],[13,"AVFMT_DURATION_FROM_PTS","","",102,null],[13,"AVFMT_DURATION_FROM_STREAM","","",102,null],[13,"AVFMT_DURATION_FROM_BITRATE","","",102,null],[4,"AVTimebaseSource","","",null,null],[13,"AVFMT_TBCF_AUTO","","",103,null],[13,"AVFMT_TBCF_DECODER","","",103,null],[13,"AVFMT_TBCF_DEMUXER","","",103,null],[13,"AVFMT_TBCF_R_FRAMERATE","","",103,null],[5,"avutil_version","","Return the LIBAVUTIL_VERSION_INT constant.",null,null],[5,"av_version_info","","Return an informative version string. This usually is the actual release version number or a git commit description. This string has no fixed format and can change any time. It should never be parsed by code.",null,null],[5,"avutil_configuration","","Return the libavutil build-time configuration.",null,null],[5,"avutil_license","","Return the libavutil license.",null,null],[5,"av_get_media_type_string","","Return a string describing the media_type enum, NULL if media_type is unknown.",null,null],[5,"av_get_picture_type_char","","Return a single letter to describe the given picture type pict_type.",null,null],[5,"av_log2","","",null,null],[5,"av_log2_16bit","","",null,null],[5,"av_strerror","","Put a description of the AVERROR code errnum in errbuf. In case of failure the global variable errno is set to indicate the error. Even in case of failure av_strerror() will print a generic error message indicating the errnum provided to errbuf.",null,null],[5,"av_malloc","","Allocate a memory block with alignment suitable for all memory accesses (including vectors if available on the CPU).",null,null],[5,"av_mallocz","","Allocate a memory block with alignment suitable for all memory accesses (including vectors if available on the CPU) and zero all the bytes of the block.",null,null],[5,"av_calloc","","Non-inlined equivalent of av_mallocz_array().",null,null],[5,"av_realloc","","Allocate, reallocate, or free a block of memory.",null,null],[5,"av_reallocp","","Allocate, reallocate, or free a block of memory through a pointer to a pointer.",null,null],[5,"av_realloc_f","","Allocate, reallocate, or free a block of memory.",null,null],[5,"av_realloc_array","","Allocate, reallocate, or free an array.",null,null],[5,"av_reallocp_array","","Allocate, reallocate, or free an array through a pointer to a pointer.",null,null],[5,"av_fast_realloc","","Reallocate the given buffer if it is not large enough, otherwise do nothing.",null,null],[5,"av_fast_malloc","","Allocate a buffer, reusing the given one if large enough.",null,null],[5,"av_fast_mallocz","","Allocate and clear a buffer, reusing the given one if large enough.",null,null],[5,"av_free","","Free a memory block which has been allocated with a function of av_malloc() or av_realloc() family.",null,null],[5,"av_freep","","Free a memory block which has been allocated with a function of av_malloc() or av_realloc() family, and set the pointer pointing to it to `NULL`.",null,null],[5,"av_strdup","","Duplicate a string.",null,null],[5,"av_strndup","","Duplicate a substring of a string.",null,null],[5,"av_memdup","","Duplicate a buffer with av_malloc().",null,null],[5,"av_memcpy_backptr","","Overlapping memcpy() implementation.",null,null],[5,"av_dynarray_add","","Add the pointer to an element to a dynamic array.",null,null],[5,"av_dynarray_add_nofree","","Add an element to a dynamic array.",null,null],[5,"av_dynarray2_add","","Add an element of size `elem_size` to a dynamic array.",null,null],[5,"av_max_alloc","","Set the maximum size that may be allocated in one block.",null,null],[5,"av_reduce","","Reduce a fraction.",null,null],[5,"av_mul_q","","Multiply two rationals. @param b First rational @param c Second rational @return b*c",null,null],[5,"av_div_q","","Divide one rational by another. @param b First rational @param c Second rational @return b/c",null,null],[5,"av_add_q","","Add two rationals. @param b First rational @param c Second rational @return b+c",null,null],[5,"av_sub_q","","Subtract one rational from another. @param b First rational @param c Second rational @return b-c",null,null],[5,"av_d2q","","Convert a double precision floating point number to a rational.",null,null],[5,"av_nearer_q","","Find which of the two rationals is closer to another rational.",null,null],[5,"av_find_nearest_q_idx","","Find the value in a list of rationals nearest a given reference rational.",null,null],[5,"av_q2intfloat","","Convert an AVRational to a IEEE 32-bit `float` expressed in fixed-point format.",null,null],[5,"av_gcd","","Compute the greatest common divisor of two integer operands.",null,null],[5,"av_rescale","","Rescale a 64-bit integer with rounding to nearest.",null,null],[5,"av_rescale_rnd","","Rescale a 64-bit integer with specified rounding.",null,null],[5,"av_rescale_q","","Rescale a 64-bit integer by 2 rational numbers.",null,null],[5,"av_rescale_q_rnd","","Rescale a 64-bit integer by 2 rational numbers with specified rounding.",null,null],[5,"av_compare_ts","","Compare two timestamps each in its own time base.",null,null],[5,"av_compare_mod","","Compare the remainders of two integer operands divided by a common divisor.",null,null],[5,"av_rescale_delta","","Rescale a timestamp while preserving known durations.",null,null],[5,"av_add_stable","","Add a value to a timestamp.",null,null],[5,"av_log","","Send the specified message to the log if the level is less than or equal to the current av_log_level. By default, all logging messages are sent to stderr. This behavior can be altered by setting a different logging callback function. @see av_log_set_callback",null,null],[5,"av_vlog","","Send the specified message to the log if the level is less than or equal to the current av_log_level. By default, all logging messages are sent to stderr. This behavior can be altered by setting a different logging callback function. @see av_log_set_callback",null,null],[5,"av_log_get_level","","Get the current log level",null,null],[5,"av_log_set_level","","Set the log level",null,null],[5,"av_log_set_callback","","Set the logging callback",null,null],[5,"av_log_default_callback","","Default logging callback",null,null],[5,"av_default_item_name","","Return the context name",null,null],[5,"av_default_get_category","","",null,null],[5,"av_log_format_line","","Format a line of log the same way as the default callback. @param line          buffer to receive the formatted line @param line_size     size of the buffer @param print_prefix  used to store whether the prefix must be printed;                      must point to a persistent integer initially set to 1",null,null],[5,"av_log_format_line2","","Format a line of log the same way as the default callback. @param line          buffer to receive the formatted line;                      may be NULL if line_size is 0 @param line_size     size of the buffer; at most line_size-1 characters will                      be written to the buffer, plus one null terminator @param print_prefix  used to store whether the prefix must be printed;                      must point to a persistent integer initially set to 1 @return Returns a negative value if an error occurred, otherwise returns         the number of characters that would have been written for a         sufficiently large buffer, not including the terminating null         character. If the return value is not less than line_size, it means         that the log message was truncated to fit the buffer.",null,null],[5,"av_log_set_flags","","",null,null],[5,"av_log_get_flags","","",null,null],[5,"av_int_list_length_for_size","","Compute the length of an integer list.",null,null],[5,"av_fopen_utf8","","Open a file using a UTF-8 filename. The API of this function matches POSIX fopen(), errors are returned through errno.",null,null],[5,"av_get_time_base_q","","Return the fractional representation of the internal time base.",null,null],[5,"av_fourcc_make_string","","Fill the provided buffer with a string containing a FourCC (four-character code) representation.",null,null],[5,"av_get_bits_per_pixel","","Return the number of bits per pixel used by the pixel format described by pixdesc. Note that this is not the same as the number of bits per sample.",null,null],[5,"av_get_padded_bits_per_pixel","","Return the number of bits per pixel for the pixel format described by pixdesc, including any padding or unused bits.",null,null],[5,"av_pix_fmt_desc_get","","@return a pixel format descriptor for provided pixel format or NULL if this pixel format is unknown.",null,null],[5,"av_pix_fmt_desc_next","","Iterate over all pixel format descriptors known to libavutil.",null,null],[5,"av_pix_fmt_desc_get_id","","@return an AVPixelFormat id described by desc, or AV_PIX_FMT_NONE if desc is not a valid pointer to a pixel format descriptor.",null,null],[5,"av_pix_fmt_get_chroma_sub_sample","","Utility function to access log2_chroma_w log2_chroma_h from the pixel format AVPixFmtDescriptor.",null,null],[5,"av_pix_fmt_count_planes","","@return number of planes in pix_fmt, a negative AVERROR if pix_fmt is not a valid pixel format.",null,null],[5,"av_color_range_name","","@return the name for provided color range or NULL if unknown.",null,null],[5,"av_color_primaries_name","","@return the name for provided color primaries or NULL if unknown.",null,null],[5,"av_color_transfer_name","","@return the name for provided color transfer or NULL if unknown.",null,null],[5,"av_color_space_name","","@return the name for provided color space or NULL if unknown.",null,null],[5,"av_chroma_location_name","","@return the name for provided chroma location or NULL if unknown.",null,null],[5,"av_get_pix_fmt","","Return the pixel format corresponding to name.",null,null],[5,"av_get_pix_fmt_name","","Return the short name for a pixel format, NULL in case pix_fmt is unknown.",null,null],[5,"av_get_pix_fmt_string","","Print in buf the string corresponding to the pixel format with number pix_fmt, or a header if pix_fmt is negative.",null,null],[5,"av_read_image_line","","Read a line from an image, and write the values of the pixel format component c to dst.",null,null],[5,"av_write_image_line","","Write the values from src to the pixel format component c of an image line.",null,null],[5,"av_pix_fmt_swap_endianness","","Utility function to swap the endianness of a pixel format.",null,null],[5,"av_get_pix_fmt_loss","","Compute what kind of losses will occur when converting from one specific pixel format to another. When converting from one pixel format to another, information loss may occur. For example, when converting from RGB24 to GRAY, the color information will be lost. Similarly, other losses occur when converting from some formats to other formats. These losses can involve loss of chroma, but also loss of resolution, loss of color depth, loss due to the color space conversion, loss of the alpha bits or loss due to color quantization. av_get_fix_fmt_loss() informs you about the various types of losses which will occur when converting from one pixel format to another.",null,null],[5,"av_find_best_pix_fmt_of_2","","Compute what kind of losses will occur when converting from one specific pixel format to another. When converting from one pixel format to another, information loss may occur. For example, when converting from RGB24 to GRAY, the color information will be lost. Similarly, other losses occur when converting from some formats to other formats. These losses can involve loss of chroma, but also loss of resolution, loss of color depth, loss due to the color space conversion, loss of the alpha bits or loss due to color quantization. av_get_fix_fmt_loss() informs you about the various types of losses which will occur when converting from one pixel format to another.",null,null],[5,"av_image_fill_max_pixsteps","","Compute the max pixel step for each plane of an image with a format described by pixdesc.",null,null],[5,"av_image_get_linesize","","Compute the size of an image line with format pix_fmt and width width for the plane plane.",null,null],[5,"av_image_fill_linesizes","","Fill plane linesizes for an image with pixel format pix_fmt and width width.",null,null],[5,"av_image_fill_pointers","","Fill plane data pointers for an image with pixel format pix_fmt and height height.",null,null],[5,"av_image_alloc","","Allocate an image with size w and h and pixel format pix_fmt, and fill pointers and linesizes accordingly. The allocated image buffer has to be freed by using av_freep(&pointers[0]).",null,null],[5,"av_image_copy_plane","","Copy image plane from src to dst. That is, copy \"height\" number of lines of \"bytewidth\" bytes each. The first byte of each successive line is separated by *_linesize bytes.",null,null],[5,"av_image_copy","","Copy image in src_data to dst_data.",null,null],[5,"av_image_copy_uc_from","","Copy image data located in uncacheable (e.g. GPU mapped) memory. Where available, this function will use special functionality for reading from such memory, which may result in greatly improved performance compared to plain av_image_copy().",null,null],[5,"av_image_fill_arrays","","Setup the data pointers and linesizes based on the specified image parameters and the provided array.",null,null],[5,"av_image_get_buffer_size","","Return the size in bytes of the amount of data required to store an image with the given parameters.",null,null],[5,"av_image_copy_to_buffer","","Copy image data from an image into a buffer.",null,null],[5,"av_image_check_size","","Check if the given dimension of an image is valid, meaning that all bytes of the image can be addressed with a signed int.",null,null],[5,"av_image_check_size2","","Check if the given dimension of an image is valid, meaning that all bytes of a plane of an image with the specified pix_fmt can be addressed with a signed int.",null,null],[5,"av_image_check_sar","","Check if the given sample aspect ratio of an image is valid.",null,null],[5,"av_get_sample_fmt_name","","Return the name of sample_fmt, or NULL if sample_fmt is not recognized.",null,null],[5,"av_get_sample_fmt","","Return a sample format corresponding to name, or AV_SAMPLE_FMT_NONE on error.",null,null],[5,"av_get_alt_sample_fmt","","Return the planar<->packed alternative form of the given sample format, or AV_SAMPLE_FMT_NONE on error. If the passed sample_fmt is already in the requested planar/packed format, the format returned is the same as the input.",null,null],[5,"av_get_packed_sample_fmt","","",null,null],[5,"av_get_planar_sample_fmt","","",null,null],[5,"av_get_sample_fmt_string","","Generate a string corresponding to the sample format with sample_fmt, or a header if sample_fmt is negative.",null,null],[5,"av_get_bytes_per_sample","","Return number of bytes per sample.",null,null],[5,"av_sample_fmt_is_planar","","Check if the sample format is planar.",null,null],[5,"av_samples_get_buffer_size","","Get the required buffer size for the given audio parameters.",null,null],[5,"av_samples_fill_arrays","","Fill plane data pointers and linesize for samples with sample format sample_fmt.",null,null],[5,"av_samples_alloc","","Allocate a samples buffer for nb_samples samples, and fill data pointers and linesize accordingly. The allocated samples buffer can be freed by using av_freep(&audio_data[0]) Allocated data will be initialized to silence.",null,null],[5,"av_samples_alloc_array_and_samples","","Allocate a data pointers array, samples buffer for nb_samples samples, and fill data pointers and linesize accordingly.",null,null],[5,"av_samples_copy","","Copy samples from src to dst.",null,null],[5,"av_samples_set_silence","","Fill an audio buffer with silence.",null,null],[5,"av_buffer_alloc","","Allocate an AVBuffer of the given size using av_malloc().",null,null],[5,"av_buffer_allocz","","Same as av_buffer_alloc(), except the returned buffer will be initialized to zero.",null,null],[5,"av_buffer_create","","Create an AVBuffer from an existing array.",null,null],[5,"av_buffer_default_free","","Default free callback, which calls av_free() on the buffer data. This function is meant to be passed to av_buffer_create(), not called directly.",null,null],[5,"av_buffer_ref","","Create a new reference to an AVBuffer.",null,null],[5,"av_buffer_unref","","Free a given reference and automatically free the buffer if there are no more references to it.",null,null],[5,"av_buffer_is_writable","","@return 1 if the caller may write to the data referred to by buf (which is true if and only if buf is the only reference to the underlying AVBuffer). Return 0 otherwise. A positive answer is valid until av_buffer_ref() is called on buf.",null,null],[5,"av_buffer_get_opaque","","@return the opaque parameter set by av_buffer_create.",null,null],[5,"av_buffer_get_ref_count","","",null,null],[5,"av_buffer_make_writable","","Create a writable reference from a given buffer reference, avoiding data copy if possible.",null,null],[5,"av_buffer_realloc","","Reallocate a given buffer.",null,null],[5,"av_buffer_pool_init","","Allocate and initialize a buffer pool.",null,null],[5,"av_buffer_pool_init2","","Allocate and initialize a buffer pool with a more complex allocator.",null,null],[5,"av_buffer_pool_uninit","","Mark the pool as being available for freeing. It will actually be freed only once all the allocated buffers associated with the pool are released. Thus it is safe to call this function while some of the allocated buffers are still in use.",null,null],[5,"av_buffer_pool_get","","Allocate a new AVBuffer, reusing an old buffer from the pool when available. This function may be called simultaneously from multiple threads.",null,null],[5,"av_get_cpu_flags","","Return the flags which specify extensions supported by the CPU. The returned value is affected by av_force_cpu_flags() if that was used before. So av_get_cpu_flags() can easily be used in an application to detect the enabled cpu flags.",null,null],[5,"av_force_cpu_flags","","Disables cpu detection and forces the specified flags. -1 is a special case that disables forcing of specific flags.",null,null],[5,"av_set_cpu_flags_mask","","Set a mask on flags returned by av_get_cpu_flags(). This function is mainly useful for testing. Please use av_force_cpu_flags() and av_get_cpu_flags() instead which are more flexible",null,null],[5,"av_parse_cpu_flags","","Parse CPU flags from a string.",null,null],[5,"av_parse_cpu_caps","","Parse CPU caps from a string and update the given AV_CPU_* flags based on that.",null,null],[5,"av_cpu_count","","@return the number of logical CPU cores present.",null,null],[5,"av_get_channel_layout","","Return a channel layout id that matches name, or 0 if no match is found.",null,null],[5,"av_get_extended_channel_layout","","Return a channel layout and the number of channels based on the specified name.",null,null],[5,"av_get_channel_layout_string","","Return a description of a channel layout. If nb_channels is <= 0, it is guessed from the channel_layout.",null,null],[5,"av_bprint_channel_layout","","Append a description of a channel layout to a bprint buffer.",null,null],[5,"av_get_channel_layout_nb_channels","","Return the number of channels in the channel layout.",null,null],[5,"av_get_default_channel_layout","","Return default channel layout for a given number of channels.",null,null],[5,"av_get_channel_layout_channel_index","","Get the index of a channel in channel_layout.",null,null],[5,"av_channel_layout_extract_channel","","Get the channel with the given index in channel_layout.",null,null],[5,"av_get_channel_name","","Get the name of a given channel.",null,null],[5,"av_get_channel_description","","Get the description of a given channel.",null,null],[5,"av_get_standard_channel_layout","","Get the value and name of a standard channel layout.",null,null],[5,"av_dict_get","","Get a dictionary entry with matching key.",null,null],[5,"av_dict_count","","Get number of entries in dictionary.",null,null],[5,"av_dict_set","","Set the given entry in *pm, overwriting an existing entry.",null,null],[5,"av_dict_set_int","","Convenience wrapper for av_dict_set that converts the value to a string and stores it.",null,null],[5,"av_dict_parse_string","","Parse the key/value pairs list and add the parsed entries to a dictionary.",null,null],[5,"av_dict_copy","","Copy entries from one AVDictionary struct into another. @param dst pointer to a pointer to a AVDictionary struct. If *dst is NULL,            this function will allocate a struct for you and put it in *dst @param src pointer to source AVDictionary struct @param flags flags to use when setting entries in *dst @note metadata is read using the AV_DICT_IGNORE_SUFFIX flag @return 0 on success, negative AVERROR code on failure. If dst was allocated           by this function, callers should free the associated memory.",null,null],[5,"av_dict_free","","Free all the memory allocated for an AVDictionary struct and all keys and values.",null,null],[5,"av_dict_get_string","","Get dictionary entries as a string.",null,null],[5,"av_frame_get_best_effort_timestamp","","Accessors for some AVFrame fields. These used to be provided for ABI compatibility, and do not need to be used anymore.",null,null],[5,"av_frame_set_best_effort_timestamp","","",null,null],[5,"av_frame_get_pkt_duration","","",null,null],[5,"av_frame_set_pkt_duration","","",null,null],[5,"av_frame_get_pkt_pos","","",null,null],[5,"av_frame_set_pkt_pos","","",null,null],[5,"av_frame_get_channel_layout","","",null,null],[5,"av_frame_set_channel_layout","","",null,null],[5,"av_frame_get_channels","","",null,null],[5,"av_frame_set_channels","","",null,null],[5,"av_frame_get_sample_rate","","",null,null],[5,"av_frame_set_sample_rate","","",null,null],[5,"av_frame_get_metadata","","",null,null],[5,"av_frame_set_metadata","","",null,null],[5,"av_frame_get_decode_error_flags","","",null,null],[5,"av_frame_set_decode_error_flags","","",null,null],[5,"av_frame_get_pkt_size","","",null,null],[5,"av_frame_set_pkt_size","","",null,null],[5,"avpriv_frame_get_metadatap","","",null,null],[5,"av_frame_get_qp_table","","",null,null],[5,"av_frame_set_qp_table","","",null,null],[5,"av_frame_get_colorspace","","",null,null],[5,"av_frame_set_colorspace","","",null,null],[5,"av_frame_get_color_range","","",null,null],[5,"av_frame_set_color_range","","",null,null],[5,"av_get_colorspace_name","","Get the name of a colorspace. @return a static string identifying the colorspace; can be NULL.",null,null],[5,"av_frame_alloc","","Allocate an AVFrame and set its fields to default values.  The resulting struct must be freed using av_frame_free().",null,null],[5,"av_frame_free","","Free the frame and any dynamically allocated objects in it, e.g. extended_data. If the frame is reference counted, it will be unreferenced first.",null,null],[5,"av_frame_ref","","Set up a new reference to the data described by the source frame.",null,null],[5,"av_frame_clone","","Create a new frame that references the same data as src.",null,null],[5,"av_frame_unref","","Unreference all the buffers referenced by frame and reset the frame fields.",null,null],[5,"av_frame_move_ref","","Move everything contained in src to dst and reset src.",null,null],[5,"av_frame_get_buffer","","Allocate new buffer(s) for audio or video data.",null,null],[5,"av_frame_is_writable","","Check if the frame data is writable.",null,null],[5,"av_frame_make_writable","","Ensure that the frame data is writable, avoiding data copy if possible.",null,null],[5,"av_frame_copy","","Copy the frame data from src to dst.",null,null],[5,"av_frame_copy_props","","Copy only \"metadata\" fields from src to dst.",null,null],[5,"av_frame_get_plane_buffer","","Get the buffer reference a given data plane is stored in.",null,null],[5,"av_frame_new_side_data","","Add a new side data to a frame.",null,null],[5,"av_frame_get_side_data","","@return a pointer to the side data of a given type on success, NULL if there is no side data with such type in this frame.",null,null],[5,"av_frame_remove_side_data","","If side data of the supplied type exists in the frame, free it and remove it from the frame.",null,null],[5,"av_frame_side_data_name","","@return a string identifying the side data type",null,null],[5,"av_codec_get_pkt_timebase","","",null,null],[5,"av_codec_set_pkt_timebase","","",null,null],[5,"av_codec_get_codec_descriptor","","",null,null],[5,"av_codec_set_codec_descriptor","","",null,null],[5,"av_codec_get_codec_properties","","",null,null],[5,"av_codec_get_lowres","","",null,null],[5,"av_codec_set_lowres","","",null,null],[5,"av_codec_get_seek_preroll","","",null,null],[5,"av_codec_set_seek_preroll","","",null,null],[5,"av_codec_get_chroma_intra_matrix","","",null,null],[5,"av_codec_set_chroma_intra_matrix","","",null,null],[5,"av_codec_get_max_lowres","","",null,null],[5,"av_codec_next","","If c is NULL, returns the first registered codec, if c is non-NULL, returns the next registered codec after c, or NULL if c is the last one.",null,null],[5,"avcodec_version","","Return the LIBAVCODEC_VERSION_INT constant.",null,null],[5,"avcodec_configuration","","Return the libavcodec build-time configuration.",null,null],[5,"avcodec_license","","Return the libavcodec license.",null,null],[5,"avcodec_register","","Register the codec codec and initialize libavcodec.",null,null],[5,"avcodec_register_all","","Register all the codecs, parsers and bitstream filters which were enabled at configuration time. If you do not call this function you can select exactly which formats you want to support, by using the individual registration functions.",null,null],[5,"avcodec_alloc_context3","","Allocate an AVCodecContext and set its fields to default values. The resulting struct should be freed with avcodec_free_context().",null,null],[5,"avcodec_free_context","","Free the codec context and everything associated with it and write NULL to the provided pointer.",null,null],[5,"avcodec_get_context_defaults3","","@deprecated This function should not be used, as closing and opening a codec context multiple time is not supported. A new codec context should be allocated for each new use.",null,null],[5,"avcodec_get_class","","Get the AVClass for AVCodecContext. It can be used in combination with AV_OPT_SEARCH_FAKE_OBJ for examining options.",null,null],[5,"avcodec_get_frame_class","","Get the AVClass for AVFrame. It can be used in combination with AV_OPT_SEARCH_FAKE_OBJ for examining options.",null,null],[5,"avcodec_get_subtitle_rect_class","","Get the AVClass for AVSubtitleRect. It can be used in combination with AV_OPT_SEARCH_FAKE_OBJ for examining options.",null,null],[5,"avcodec_copy_context","","Copy the settings of the source AVCodecContext into the destination AVCodecContext. The resulting destination codec context will be unopened, i.e. you are required to call avcodec_open2() before you can use this AVCodecContext to decode/encode video/audio data.",null,null],[5,"avcodec_parameters_alloc","","Allocate a new AVCodecParameters and set its fields to default values (unknown/invalid/0). The returned struct must be freed with avcodec_parameters_free().",null,null],[5,"avcodec_parameters_free","","Free an AVCodecParameters instance and everything associated with it and write NULL to the supplied pointer.",null,null],[5,"avcodec_parameters_copy","","Copy the contents of src to dst. Any allocated fields in dst are freed and replaced with newly allocated duplicates of the corresponding fields in src.",null,null],[5,"avcodec_parameters_from_context","","Fill the parameters struct based on the values from the supplied codec context. Any allocated fields in par are freed and replaced with duplicates of the corresponding fields in codec.",null,null],[5,"avcodec_parameters_to_context","","Fill the codec context based on the values from the supplied codec parameters. Any allocated fields in codec that have a corresponding field in par are freed and replaced with duplicates of the corresponding field in par. Fields in codec that do not have a counterpart in par are not touched.",null,null],[5,"avcodec_open2","","Initialize the AVCodecContext to use the given AVCodec. Prior to using this function the context has to be allocated with avcodec_alloc_context3().",null,null],[5,"avcodec_close","","Close a given AVCodecContext and free all the data associated with it (but not the AVCodecContext itself).",null,null],[5,"avsubtitle_free","","Free all allocated data in the given subtitle struct.",null,null],[5,"av_packet_alloc","","Allocate an AVPacket and set its fields to default values.  The resulting struct must be freed using av_packet_free().",null,null],[5,"av_packet_clone","","Create a new packet that references the same data as src.",null,null],[5,"av_packet_free","","Free the packet, if the packet is reference counted, it will be unreferenced first.",null,null],[5,"av_init_packet","","Initialize optional fields of a packet with default values.",null,null],[5,"av_new_packet","","Allocate the payload of a packet and initialize its fields with default values.",null,null],[5,"av_shrink_packet","","Reduce packet size, correctly zeroing padding",null,null],[5,"av_grow_packet","","Increase packet size, correctly zeroing padding",null,null],[5,"av_packet_from_data","","Initialize a reference-counted packet from av_malloc()ed data.",null,null],[5,"av_dup_packet","","@warning This is a hack - the packet memory allocation stuff is broken. The packet is allocated if it was not really allocated.",null,null],[5,"av_copy_packet","","Copy packet, including contents",null,null],[5,"av_copy_packet_side_data","","Copy packet side data",null,null],[5,"av_free_packet","","Free a packet.",null,null],[5,"av_packet_new_side_data","","Allocate new information of a packet.",null,null],[5,"av_packet_add_side_data","","Wrap an existing array as a packet side data.",null,null],[5,"av_packet_shrink_side_data","","Shrink the already allocated side data buffer",null,null],[5,"av_packet_get_side_data","","Get side information from packet.",null,null],[5,"av_packet_merge_side_data","","",null,null],[5,"av_packet_split_side_data","","",null,null],[5,"av_packet_side_data_name","","",null,null],[5,"av_packet_pack_dictionary","","Pack a dictionary for use in side_data.",null,null],[5,"av_packet_unpack_dictionary","","Unpack a dictionary from side_data.",null,null],[5,"av_packet_free_side_data","","Convenience function to free all the side data stored. All the other fields stay untouched.",null,null],[5,"av_packet_ref","","Setup a new reference to the data described by a given packet",null,null],[5,"av_packet_unref","","Wipe the packet.",null,null],[5,"av_packet_move_ref","","Move every field in src to dst and reset src.",null,null],[5,"av_packet_copy_props","","Copy only \"properties\" fields from src to dst.",null,null],[5,"av_packet_rescale_ts","","Convert valid timing fields (timestamps / durations) in a packet from one timebase to another. Timestamps with unknown values (AV_NOPTS_VALUE) will be ignored.",null,null],[5,"avcodec_find_decoder","","Find a registered decoder with a matching codec ID.",null,null],[5,"avcodec_find_decoder_by_name","","Find a registered decoder with the specified name.",null,null],[5,"avcodec_default_get_buffer2","","The default callback for AVCodecContext.get_buffer2(). It is made public so it can be called by custom get_buffer2() implementations for decoders without AV_CODEC_CAP_DR1 set.",null,null],[5,"avcodec_get_edge_width","","Return the amount of padding in pixels which the get_buffer callback must provide around the edge of the image for codecs which do not have the CODEC_FLAG_EMU_EDGE flag.",null,null],[5,"avcodec_align_dimensions","","Modify width and height values so that they will result in a memory buffer that is acceptable for the codec if you do not use any horizontal padding.",null,null],[5,"avcodec_align_dimensions2","","Modify width and height values so that they will result in a memory buffer that is acceptable for the codec if you also ensure that all line sizes are a multiple of the respective linesize_align[i].",null,null],[5,"avcodec_enum_to_chroma_pos","","Converts AVChromaLocation to swscale x/y chroma position.",null,null],[5,"avcodec_chroma_pos_to_enum","","Converts swscale x/y chroma position to AVChromaLocation.",null,null],[5,"avcodec_decode_audio4","","",null,null],[5,"avcodec_decode_video2","","Decode the video frame of size avpkt->size from avpkt->data into picture. Some decoders may support multiple frames in a single AVPacket, such decoders would then just decode the first frame.",null,null],[5,"avcodec_decode_subtitle2","","Decode a subtitle message. Return a negative value on error, otherwise return the number of bytes used. If no subtitle could be decompressed, got_sub_ptr is zero. Otherwise, the subtitle is stored in *sub. Note that AV_CODEC_CAP_DR1 is not available for subtitle codecs. This is for simplicity, because the performance difference is expect to be negligible and reusing a get_buffer written for video codecs would probably perform badly due to a potentially very different allocation pattern.",null,null],[5,"avcodec_send_packet","","Supply raw packet data as input to a decoder.",null,null],[5,"avcodec_receive_frame","","Return decoded output data from a decoder.",null,null],[5,"avcodec_send_frame","","Supply a raw video or audio frame to the encoder. Use avcodec_receive_packet() to retrieve buffered output packets.",null,null],[5,"avcodec_receive_packet","","Read encoded data from the encoder.",null,null],[5,"av_parser_next","","",null,null],[5,"av_register_codec_parser","","",null,null],[5,"av_parser_init","","",null,null],[5,"av_parser_parse2","","",null,null],[5,"av_parser_change","","@return 0 if the output buffer is a subset of the input, 1 if it is allocated and must be freed @deprecated use AVBitStreamFilter",null,null],[5,"av_parser_close","","",null,null],[5,"avcodec_find_encoder","","Find a registered encoder with a matching codec ID.",null,null],[5,"avcodec_find_encoder_by_name","","Find a registered encoder with the specified name.",null,null],[5,"avcodec_encode_audio2","","Encode a frame of audio.",null,null],[5,"avcodec_encode_video2","","Encode a frame of video.",null,null],[5,"avcodec_encode_subtitle","","",null,null],[5,"av_audio_resample_init","","",null,null],[5,"av_resample_init","","",null,null],[5,"av_resample","","Resample an array of samples using a previously configured context. @param src an array of unconsumed samples @param consumed the number of samples of src which have been consumed are returned here @param src_size the number of unconsumed samples available @param dst_size the amount of space in samples available in dst @param update_ctx If this is 0 then the context will not be modified, that way several channels can be resampled with the same context. @return the number of samples written in dst or -1 if an error occurred",null,null],[5,"av_resample_compensate","","Compensate samplerate/timestamp drift. The compensation is done by changing the resampler parameters, so no audible clicks or similar distortions occur @param compensation_distance distance in output samples over which the compensation should be performed @param sample_delta number of output samples which should be output less",null,null],[5,"av_resample_close","","",null,null],[5,"avpicture_alloc","","@deprecated unused",null,null],[5,"avpicture_free","","@deprecated unused",null,null],[5,"avpicture_fill","","@deprecated use av_image_fill_arrays() instead.",null,null],[5,"avpicture_layout","","@deprecated use av_image_copy_to_buffer() instead.",null,null],[5,"avpicture_get_size","","@deprecated use av_image_get_buffer_size() instead.",null,null],[5,"av_picture_copy","","@deprecated av_image_copy() instead.",null,null],[5,"av_picture_crop","","@deprecated unused",null,null],[5,"av_picture_pad","","@deprecated unused",null,null],[5,"avcodec_get_chroma_sub_sample","","Utility function to access log2_chroma_w log2_chroma_h from the pixel format AVPixFmtDescriptor.",null,null],[5,"avcodec_pix_fmt_to_codec_tag","","Return a value representing the fourCC code associated to the pixel format pix_fmt, or 0 if no associated fourCC code can be found.",null,null],[5,"avcodec_get_pix_fmt_loss","","@deprecated see av_get_pix_fmt_loss()",null,null],[5,"avcodec_find_best_pix_fmt_of_list","","Find the best pixel format to convert to given a certain source pixel format.  When converting from one pixel format to another, information loss may occur.  For example, when converting from RGB24 to GRAY, the color information will be lost. Similarly, other losses occur when converting from some formats to other formats. avcodec_find_best_pix_fmt_of_2() searches which of the given pixel formats should be used to suffer the least amount of loss. The pixel formats from which it chooses one, are determined by the pix_fmt_list parameter.",null,null],[5,"avcodec_find_best_pix_fmt_of_2","","@deprecated see av_find_best_pix_fmt_of_2()",null,null],[5,"avcodec_find_best_pix_fmt2","","",null,null],[5,"avcodec_default_get_format","","",null,null],[5,"avcodec_set_dimensions","","@deprecated this function is not supposed to be used from outside of lavc",null,null],[5,"av_get_codec_tag_string","","Put a string representing the codec tag codec_tag in buf.",null,null],[5,"avcodec_string","","",null,null],[5,"av_get_profile_name","","Return a name for the specified profile, if available.",null,null],[5,"avcodec_profile_name","","Return a name for the specified profile, if available.",null,null],[5,"avcodec_default_execute","","",null,null],[5,"avcodec_default_execute2","","",null,null],[5,"avcodec_fill_audio_frame","","Fill AVFrame audio data and linesize pointers.",null,null],[5,"avcodec_flush_buffers","","Reset the internal decoder state / flush internal buffers. Should be called e.g. when seeking or when switching to a different stream.",null,null],[5,"av_get_bits_per_sample","","Return codec bits per sample.",null,null],[5,"av_get_pcm_codec","","Return the PCM codec associated with a sample format. @param be  endianness, 0 for little, 1 for big,            -1 (or anything else) for native @return  AV_CODEC_ID_PCM_* or AV_CODEC_ID_NONE",null,null],[5,"av_get_exact_bits_per_sample","","Return codec bits per sample. Only return non-zero if the bits per sample is exactly correct, not an approximation.",null,null],[5,"av_get_audio_frame_duration","","Return audio frame duration.",null,null],[5,"av_get_audio_frame_duration2","","This function is the same as av_get_audio_frame_duration(), except it works with AVCodecParameters instead of an AVCodecContext.",null,null],[5,"av_register_bitstream_filter","","Register a bitstream filter.",null,null],[5,"av_bitstream_filter_init","","Create and initialize a bitstream filter context given a bitstream filter name.",null,null],[5,"av_bitstream_filter_filter","","Filter bitstream.",null,null],[5,"av_bitstream_filter_close","","Release bitstream filter context.",null,null],[5,"av_bitstream_filter_next","","If f is NULL, return the first registered bitstream filter, if f is non-NULL, return the next registered bitstream filter after f, or NULL if f is the last one.",null,null],[5,"av_bsf_get_by_name","","@return a bitstream filter with the specified name or NULL if no such bitstream filter exists.",null,null],[5,"av_bsf_next","","Iterate over all registered bitstream filters.",null,null],[5,"av_bsf_alloc","","Allocate a context for a given bitstream filter. The caller must fill in the context parameters as described in the documentation and then call av_bsf_init() before sending any data to the filter.",null,null],[5,"av_bsf_init","","Prepare the filter for use, after all the parameters and options have been set.",null,null],[5,"av_bsf_send_packet","","Submit a packet for filtering.",null,null],[5,"av_bsf_receive_packet","","Retrieve a filtered packet.",null,null],[5,"av_bsf_free","","Free a bitstream filter context and everything associated with it; write NULL into the supplied pointer.",null,null],[5,"av_bsf_get_class","","Get the AVClass for AVBSFContext. It can be used in combination with AV_OPT_SEARCH_FAKE_OBJ for examining options.",null,null],[5,"av_bsf_list_alloc","","Allocate empty list of bitstream filters. The list must be later freed by av_bsf_list_free() or finalized by av_bsf_list_finalize().",null,null],[5,"av_bsf_list_free","","Free list of bitstream filters.",null,null],[5,"av_bsf_list_append","","Append bitstream filter to the list of bitstream filters.",null,null],[5,"av_bsf_list_append2","","Construct new bitstream filter context given it's name and options and append it to the list of bitstream filters.",null,null],[5,"av_bsf_list_finalize","","Finalize list of bitstream filters.",null,null],[5,"av_bsf_list_parse_str","","Parse string describing list of bitstream filters and create single @ref AVBSFContext describing the whole chain of bitstream filters. Resulting @ref AVBSFContext can be treated as any other @ref AVBSFContext freshly allocated by av_bsf_alloc().",null,null],[5,"av_bsf_get_null_filter","","Get null/pass-through bitstream filter.",null,null],[5,"av_fast_padded_malloc","","Same behaviour av_fast_malloc but the buffer has additional AV_INPUT_BUFFER_PADDING_SIZE at the end which will always be 0.",null,null],[5,"av_fast_padded_mallocz","","Same behaviour av_fast_padded_malloc except that buffer will always be 0-initialized after call.",null,null],[5,"av_xiphlacing","","Encode extradata length to a buffer. Used by xiph codecs.",null,null],[5,"av_log_missing_feature","","Log a generic warning message about a missing feature. This function is intended to be used internally by FFmpeg (libavcodec, libavformat, etc.) only, and would normally not be used by applications. @param[in] avc a pointer to an arbitrary struct of which the first field is a pointer to an AVClass struct @param[in] feature string containing the name of the missing feature @param[in] want_sample indicates if samples are wanted which exhibit this feature. If want_sample is non-zero, additional verbiage will be added to the log message which tells the user how to report samples to the development mailing list. @deprecated Use avpriv_report_missing_feature() instead.",null,null],[5,"av_log_ask_for_sample","","Log a generic warning message asking for a sample. This function is intended to be used internally by FFmpeg (libavcodec, libavformat, etc.) only, and would normally not be used by applications. @param[in] avc a pointer to an arbitrary struct of which the first field is a pointer to an AVClass struct @param[in] msg string containing an optional message, or NULL if no message @deprecated Use avpriv_request_sample() instead.",null,null],[5,"av_register_hwaccel","","Register the hardware accelerator hwaccel.",null,null],[5,"av_hwaccel_next","","If hwaccel is NULL, returns the first registered hardware accelerator, if hwaccel is non-NULL, returns the next registered hardware accelerator after hwaccel, or NULL if hwaccel is the last one.",null,null],[5,"av_lockmgr_register","","Register a user provided lock manager supporting the operations specified by AVLockOp. The \"mutex\" argument to the function points to a (void *) where the lockmgr should store/get a pointer to a user allocated mutex. It is NULL upon AV_LOCK_CREATE and equal to the value left by the last call for all other ops. If the lock manager is unable to perform the op then it should leave the mutex in the same state as when it was called and return a non-zero value. However, when called with AV_LOCK_DESTROY the mutex will always be assumed to have been successfully destroyed. If av_lockmgr_register succeeds it will return a non-negative value, if it fails it will return a negative value and destroy all mutex and unregister all callbacks. av_lockmgr_register is not thread-safe, it must be called from a single thread before any calls which make use of locking are used.",null,null],[5,"avcodec_get_type","","Get the type of the given codec.",null,null],[5,"avcodec_get_name","","Get the name of a codec. @return  a static string identifying the codec; never NULL",null,null],[5,"avcodec_is_open","","@return a positive value if s is open (i.e. avcodec_open2() was called on it with no corresponding avcodec_close()), 0 otherwise.",null,null],[5,"av_codec_is_encoder","","@return a non-zero number if codec is an encoder, zero otherwise",null,null],[5,"av_codec_is_decoder","","@return a non-zero number if codec is a decoder, zero otherwise",null,null],[5,"avcodec_descriptor_get","","@return descriptor for given codec ID or NULL if no descriptor exists.",null,null],[5,"avcodec_descriptor_next","","Iterate over all codec descriptors known to libavcodec.",null,null],[5,"avcodec_descriptor_get_by_name","","@return codec descriptor with the given name or NULL if no such descriptor exists.",null,null],[5,"av_cpb_properties_alloc","","Allocate a CPB properties structure and initialize its fields to default values.",null,null],[5,"avio_find_protocol_name","","Return the name of the protocol that will handle the passed URL.",null,null],[5,"avio_check","","Return AVIO_FLAG_* access flags corresponding to the access permissions of the resource in url, or a negative value corresponding to an AVERROR code in case of failure. The returned access flags are masked by the value in flags.",null,null],[5,"avpriv_io_move","","Move or rename a resource.",null,null],[5,"avpriv_io_delete","","Delete a resource.",null,null],[5,"avio_open_dir","","Open directory for reading.",null,null],[5,"avio_read_dir","","Get next directory entry.",null,null],[5,"avio_close_dir","","Close directory.",null,null],[5,"avio_free_directory_entry","","Free entry allocated by avio_read_dir().",null,null],[5,"avio_alloc_context","","Allocate and initialize an AVIOContext for buffered I/O. It must be later freed with av_free().",null,null],[5,"avio_w8","","",null,null],[5,"avio_write","","",null,null],[5,"avio_wl64","","",null,null],[5,"avio_wb64","","",null,null],[5,"avio_wl32","","",null,null],[5,"avio_wb32","","",null,null],[5,"avio_wl24","","",null,null],[5,"avio_wb24","","",null,null],[5,"avio_wl16","","",null,null],[5,"avio_wb16","","",null,null],[5,"avio_put_str","","Write a NULL-terminated string. @return number of bytes written.",null,null],[5,"avio_put_str16le","","Convert an UTF-8 string to UTF-16LE and write it. @param s the AVIOContext @param str NULL-terminated UTF-8 string",null,null],[5,"avio_put_str16be","","Convert an UTF-8 string to UTF-16BE and write it. @param s the AVIOContext @param str NULL-terminated UTF-8 string",null,null],[5,"avio_write_marker","","Mark the written bytestream as a specific type.",null,null],[5,"avio_seek","","fseek() equivalent for AVIOContext. @return new position or AVERROR.",null,null],[5,"avio_skip","","Skip given number of bytes forward @return new position or AVERROR.",null,null],[5,"avio_size","","Get the filesize. @return filesize or AVERROR",null,null],[5,"avio_feof","","feof() equivalent for AVIOContext. @return non zero if and only if end of file",null,null],[5,"avio_printf","","@warning Writes up to 4 KiB per call ",null,null],[5,"avio_flush","","Force flushing of buffered data.",null,null],[5,"avio_read","","Read size bytes from AVIOContext into buf. @return number of bytes read or AVERROR",null,null],[5,"avio_r8","","@name Functions for reading from AVIOContext @{",null,null],[5,"avio_rl16","","",null,null],[5,"avio_rl24","","",null,null],[5,"avio_rl32","","",null,null],[5,"avio_rl64","","",null,null],[5,"avio_rb16","","",null,null],[5,"avio_rb24","","",null,null],[5,"avio_rb32","","",null,null],[5,"avio_rb64","","",null,null],[5,"avio_get_str","","Read a string from pb into buf. The reading will terminate when either a NULL character was encountered, maxlen bytes have been read, or nothing more can be read from pb. The result is guaranteed to be NULL-terminated, it will be truncated if buf is too small. Note that the string is not interpreted or validated in any way, it might get truncated in the middle of a sequence for multi-byte encodings.",null,null],[5,"avio_get_str16le","","Read a UTF-16 string from pb and convert it to UTF-8. The reading will terminate when either a null or invalid character was encountered or maxlen bytes have been read. @return number of bytes read (is always <= maxlen)",null,null],[5,"avio_get_str16be","","",null,null],[5,"avio_open","","Create and initialize a AVIOContext for accessing the resource indicated by url. @note When the resource indicated by url has been opened in read+write mode, the AVIOContext can be used only for writing.",null,null],[5,"avio_open2","","Create and initialize a AVIOContext for accessing the resource indicated by url. @note When the resource indicated by url has been opened in read+write mode, the AVIOContext can be used only for writing.",null,null],[5,"avio_close","","Close the resource accessed by the AVIOContext s and free it. This function can only be used if s was opened by avio_open().",null,null],[5,"avio_closep","","Close the resource accessed by the AVIOContext *s, free it and set the pointer pointing to it to NULL. This function can only be used if s was opened by avio_open().",null,null],[5,"avio_open_dyn_buf","","Open a write only memory stream.",null,null],[5,"avio_get_dyn_buf","","Return the written size and a pointer to the buffer. The AVIOContext stream is left intact. The buffer must NOT be freed. No padding is added to the buffer.",null,null],[5,"avio_close_dyn_buf","","Return the written size and a pointer to the buffer. The buffer must be freed with av_free(). Padding of AV_INPUT_BUFFER_PADDING_SIZE is added to the buffer.",null,null],[5,"avio_enum_protocols","","Iterate through names of available protocols.",null,null],[5,"avio_pause","","Pause and resume playing - only meaningful if using a network streaming protocol (e.g. MMS).",null,null],[5,"avio_seek_time","","Seek to a given timestamp relative to some component stream. Only meaningful if using a network streaming protocol (e.g. MMS.).",null,null],[5,"avio_read_to_bprint","","Read contents of h into print buffer, up to max_size bytes, or up to EOF.",null,null],[5,"avio_accept","","Accept and allocate a client context on a server context. @param  s the server context @param  c the client context, must be unallocated @return   >= 0 on success or a negative value corresponding           to an AVERROR on failure",null,null],[5,"avio_handshake","","Perform one step of the protocol handshake to accept a new client. This function must be called on a client returned by avio_accept() before using it as a read/write context. It is separate from avio_accept() because it may block. A step of the handshake is defined by places where the application may decide to change the proceedings. For example, on a protocol with a request header and a reply header, each one can constitute a step because the application may use the parameters from the request to change parameters in the reply; or each individual chunk of the request can constitute a step. If the handshake is already finished, avio_handshake() does nothing and returns 0 immediately.",null,null],[5,"av_get_packet","","Allocate and read the payload of a packet and initialize its fields with default values.",null,null],[5,"av_append_packet","","Read data and append it to the current content of the AVPacket. If pkt->size is 0 this is identical to av_get_packet. Note that this uses av_grow_packet and thus involves a realloc which is inefficient. Thus this function should only be used when there is no reasonable way to know (an upper bound of) the final size.",null,null],[5,"av_stream_get_r_frame_rate","","",null,null],[5,"av_stream_set_r_frame_rate","","",null,null],[5,"av_stream_get_parser","","",null,null],[5,"av_stream_get_recommended_encoder_configuration","","",null,null],[5,"av_stream_set_recommended_encoder_configuration","","",null,null],[5,"av_stream_get_end_pts","","Returns the pts of the last muxed packet + its duration",null,null],[5,"av_format_get_probe_score","","Accessors for some AVFormatContext fields. These used to be provided for ABI compatibility, and do not need to be used anymore.",null,null],[5,"av_format_get_video_codec","","",null,null],[5,"av_format_set_video_codec","","",null,null],[5,"av_format_get_audio_codec","","",null,null],[5,"av_format_set_audio_codec","","",null,null],[5,"av_format_get_subtitle_codec","","",null,null],[5,"av_format_set_subtitle_codec","","",null,null],[5,"av_format_get_data_codec","","",null,null],[5,"av_format_set_data_codec","","",null,null],[5,"av_format_get_metadata_header_padding","","",null,null],[5,"av_format_set_metadata_header_padding","","",null,null],[5,"av_format_get_opaque","","",null,null],[5,"av_format_set_opaque","","",null,null],[5,"av_format_get_control_message_cb","","",null,null],[5,"av_format_set_control_message_cb","","",null,null],[5,"av_format_get_open_cb","","",null,null],[5,"av_format_set_open_cb","","",null,null],[5,"av_format_inject_global_side_data","","This function will cause global side data to be injected in the next packet of each stream as well as after any subsequent seek.",null,null],[5,"av_fmt_ctx_get_duration_estimation_method","","Returns the method used to set ctx->duration.",null,null],[5,"avformat_version","","Return the LIBAVFORMAT_VERSION_INT constant.",null,null],[5,"avformat_configuration","","Return the libavformat build-time configuration.",null,null],[5,"avformat_license","","Return the libavformat license.",null,null],[5,"av_register_all","","Initialize libavformat and register all the muxers, demuxers and protocols. If you do not call this function, then you can select exactly which formats you want to support.",null,null],[5,"av_register_input_format","","",null,null],[5,"av_register_output_format","","",null,null],[5,"avformat_network_init","","Do global initialization of network components. This is optional, but recommended, since it avoids the overhead of implicitly doing the setup for each session.",null,null],[5,"avformat_network_deinit","","Undo the initialization done by avformat_network_init.",null,null],[5,"av_iformat_next","","If f is NULL, returns the first registered input format, if f is non-NULL, returns the next registered input format after f or NULL if f is the last one.",null,null],[5,"av_oformat_next","","If f is NULL, returns the first registered output format, if f is non-NULL, returns the next registered output format after f or NULL if f is the last one.",null,null],[5,"avformat_alloc_context","","Allocate an AVFormatContext. avformat_free_context() can be used to free the context and everything allocated by the framework within it.",null,null],[5,"avformat_free_context","","Free an AVFormatContext and all its streams. @param s context to free",null,null],[5,"avformat_get_class","","Get the AVClass for AVFormatContext. It can be used in combination with AV_OPT_SEARCH_FAKE_OBJ for examining options.",null,null],[5,"avformat_new_stream","","Add a new stream to a media file.",null,null],[5,"av_stream_add_side_data","","Wrap an existing array as stream side data.",null,null],[5,"av_stream_new_side_data","","Allocate new information from stream.",null,null],[5,"av_stream_get_side_data","","",null,null],[5,"av_new_program","","",null,null],[5,"avformat_alloc_output_context2","","Allocate an AVFormatContext for an output format. avformat_free_context() can be used to free the context and everything allocated by the framework within it.",null,null],[5,"av_find_input_format","","Find AVInputFormat based on the short name of the input format.",null,null],[5,"av_probe_input_format","","Guess the file format.",null,null],[5,"av_probe_input_format2","","Guess the file format.",null,null],[5,"av_probe_input_format3","","Guess the file format.",null,null],[5,"av_probe_input_buffer2","","Probe a bytestream to determine the input format. Each time a probe returns with a score that is too low, the probe buffer size is increased and another attempt is made. When the maximum probe size is reached, the input format with the highest score is returned.",null,null],[5,"av_probe_input_buffer","","Like av_probe_input_buffer2() but returns 0 on success",null,null],[5,"avformat_open_input","","Open an input stream and read the header. The codecs are not opened. The stream must be closed with avformat_close_input().",null,null],[5,"av_demuxer_open","","",null,null],[5,"avformat_find_stream_info","","Read packets of a media file to get stream information. This is useful for file formats with no headers such as MPEG. This function also computes the real framerate in case of MPEG-2 repeat frame mode. The logical file position is not changed by this function; examined packets may be buffered for later processing.",null,null],[5,"av_find_program_from_stream","","Find the programs which belong to a given stream.",null,null],[5,"av_program_add_stream_index","","",null,null],[5,"av_find_best_stream","","Find the \"best\" stream in the file. The best stream is determined according to various heuristics as the most likely to be what the user expects. If the decoder parameter is non-NULL, av_find_best_stream will find the default decoder for the stream's codec; streams for which no decoder can be found are ignored.",null,null],[5,"av_read_frame","","Return the next frame of a stream. This function returns what is stored in the file, and does not validate that what is there are valid frames for the decoder. It will split what is stored in the file into frames and return one for each call. It will not omit invalid data between valid frames so as to give the decoder the maximum information possible for decoding.",null,null],[5,"av_seek_frame","","Seek to the keyframe at timestamp. 'timestamp' in 'stream_index'.",null,null],[5,"avformat_seek_file","","Seek to timestamp ts. Seeking will be done so that the point from which all active streams can be presented successfully will be closest to ts and within min/max_ts. Active streams are all streams that have AVStream.discard < AVDISCARD_ALL.",null,null],[5,"avformat_flush","","Discard all internally buffered data. This can be useful when dealing with discontinuities in the byte stream. Generally works only with formats that can resync. This includes headerless formats like MPEG-TS/TS but should also work with NUT, Ogg and in a limited way AVI for example.",null,null],[5,"av_read_play","","Start playing a network-based stream (e.g. RTSP stream) at the current position.",null,null],[5,"av_read_pause","","Pause a network-based stream (e.g. RTSP stream).",null,null],[5,"avformat_close_input","","Close an opened input AVFormatContext. Free it and all its contents and set *s to NULL.",null,null],[5,"avformat_write_header","","Allocate the stream private data and write the stream header to an output media file.",null,null],[5,"avformat_init_output","","Allocate the stream private data and initialize the codec, but do not write the header. May optionally be used before avformat_write_header to initialize stream parameters before actually writing the header. If using this function, do not pass the same options to avformat_write_header.",null,null],[5,"av_write_frame","","Write a packet to an output media file.",null,null],[5,"av_interleaved_write_frame","","Write a packet to an output media file ensuring correct interleaving.",null,null],[5,"av_write_uncoded_frame","","Write an uncoded frame to an output media file.",null,null],[5,"av_interleaved_write_uncoded_frame","","Write an uncoded frame to an output media file.",null,null],[5,"av_write_uncoded_frame_query","","Test whether a muxer supports uncoded frame.",null,null],[5,"av_write_trailer","","Write the stream trailer to an output media file and free the file private data.",null,null],[5,"av_guess_format","","Return the output format in the list of registered output formats which best matches the provided parameters, or return NULL if there is no match.",null,null],[5,"av_guess_codec","","Guess the codec ID based upon muxer and filename.",null,null],[5,"av_get_output_timestamp","","Get timing information for the data currently output. The exact meaning of \"currently output\" depends on the format. It is mostly relevant for devices that have an internal buffer and/or work in real time. @param s          media file handle @param stream     stream in the media file @param[out] dts   DTS of the last packet output for the stream, in stream                   time_base units @param[out] wall  absolute time when that packet whas output,                   in microsecond @return  0 if OK, AVERROR(ENOSYS) if the format does not support it Note: some formats or devices may not allow to measure dts and wall atomically.",null,null],[5,"av_hex_dump","","Send a nice hexadecimal dump of a buffer to the specified file stream.",null,null],[5,"av_hex_dump_log","","Send a nice hexadecimal dump of a buffer to the log.",null,null],[5,"av_pkt_dump2","","Send a nice dump of a packet to the specified file stream.",null,null],[5,"av_pkt_dump_log2","","Send a nice dump of a packet to the log.",null,null],[5,"av_codec_get_id","","Get the AVCodecID for the given codec tag tag. If no codec id is found returns AV_CODEC_ID_NONE.",null,null],[5,"av_codec_get_tag","","Get the codec tag for the given codec id id. If no codec tag is found returns 0.",null,null],[5,"av_codec_get_tag2","","Get the codec tag for the given codec id.",null,null],[5,"av_find_default_stream_index","","",null,null],[5,"av_index_search_timestamp","","Get the index for a specific timestamp.",null,null],[5,"av_add_index_entry","","Add an index entry into a sorted list. Update the entry if the list already contains it.",null,null],[5,"av_url_split","","Split a URL string into components.",null,null],[5,"av_dump_format","","Print detailed information about the input or output format, such as duration, bitrate, streams, container, programs, metadata, side data, codec and time base.",null,null],[5,"av_get_frame_filename2","","Return in 'buf' the path with '%d' replaced by a number.",null,null],[5,"av_get_frame_filename","","",null,null],[5,"av_filename_number_test","","Check whether filename actually is a numbered sequence generator.",null,null],[5,"av_sdp_create","","Generate an SDP for an RTP session.",null,null],[5,"av_match_ext","","Return a positive value if the given filename has one of the given extensions, 0 otherwise.",null,null],[5,"avformat_query_codec","","Test if the given container can store a codec.",null,null],[5,"avformat_get_riff_video_tags","","@defgroup riff_fourcc RIFF FourCCs @{ Get the tables mapping RIFF FourCCs to libavcodec AVCodecIDs. The tables are meant to be passed to av_codec_get_id()/av_codec_get_tag() as in the following code: @code uint32_t tag = MKTAG('H', '2', '6', '4'); const struct AVCodecTag *table[] = { avformat_get_riff_video_tags(), 0 }; enum AVCodecID id = av_codec_get_id(table, tag); @endcode @return the table mapping RIFF FourCCs for video to libavcodec AVCodecID.",null,null],[5,"avformat_get_riff_audio_tags","","@return the table mapping RIFF FourCCs for audio to AVCodecID.",null,null],[5,"avformat_get_mov_video_tags","","@return the table mapping MOV FourCCs for video to libavcodec AVCodecID.",null,null],[5,"avformat_get_mov_audio_tags","","@return the table mapping MOV FourCCs for audio to AVCodecID.",null,null],[5,"av_guess_sample_aspect_ratio","","Guess the sample aspect ratio of a frame, based on both the stream and the frame aspect ratio.",null,null],[5,"av_guess_frame_rate","","Guess the frame rate, based on both the container and codec information.",null,null],[5,"avformat_match_stream_specifier","","Check if the stream st contained in s is matched by the stream specifier spec.",null,null],[5,"avformat_queue_attached_pictures","","",null,null],[5,"av_apply_bitstream_filters","","",null,null],[5,"avformat_transfer_internal_stream_timing_info","","Transfer internal timing information from one stream to another.",null,null],[5,"av_stream_get_codec_timebase","","Get the internal codec timebase from a stream.",null,null],[5,"swscale_version","","@defgroup libsws libswscale Color conversion and scaling library.",null,null],[5,"swscale_configuration","","Return the libswscale build-time configuration.",null,null],[5,"swscale_license","","Return the libswscale license.",null,null],[5,"sws_getCoefficients","","Return a pointer to yuv<->rgb coefficients for the given colorspace suitable for sws_setColorspaceDetails().",null,null],[5,"sws_isSupportedInput","","Return a positive value if pix_fmt is a supported input format, 0 otherwise.",null,null],[5,"sws_isSupportedOutput","","Return a positive value if pix_fmt is a supported output format, 0 otherwise.",null,null],[5,"sws_isSupportedEndiannessConversion","","@param[in]  pix_fmt the pixel format @return a positive value if an endianness conversion for pix_fmt is supported, 0 otherwise.",null,null],[5,"sws_alloc_context","","Allocate an empty SwsContext. This must be filled and passed to sws_init_context(). For filling see AVOptions, options.c and sws_setColorspaceDetails().",null,null],[5,"sws_init_context","","Initialize the swscaler context sws_context.",null,null],[5,"sws_freeContext","","Free the swscaler context swsContext. If swsContext is NULL, then does nothing.",null,null],[5,"sws_getContext","","Allocate and return an SwsContext. You need it to perform scaling/conversion operations using sws_scale().",null,null],[5,"sws_scale","","Scale the image slice in srcSlice and put the resulting scaled slice in the image in dst. A slice is a sequence of consecutive rows in an image.",null,null],[5,"sws_setColorspaceDetails","","@param dstRange flag indicating the while-black range of the output (1=jpeg / 0=mpeg) @param srcRange flag indicating the while-black range of the input (1=jpeg / 0=mpeg) @param table the yuv2rgb coefficients describing the output yuv space, normally ff_yuv2rgb_coeffs[x] @param inv_table the yuv2rgb coefficients describing the input yuv space, normally ff_yuv2rgb_coeffs[x] @param brightness 16.16 fixed point brightness correction @param contrast 16.16 fixed point contrast correction @param saturation 16.16 fixed point saturation correction @return -1 if not supported",null,null],[5,"sws_getColorspaceDetails","","@return -1 if not supported",null,null],[5,"sws_allocVec","","Allocate and return an uninitialized vector with length coefficients.",null,null],[5,"sws_getGaussianVec","","Return a normalized Gaussian curve used to filter stuff quality = 3 is high quality, lower is lower quality.",null,null],[5,"sws_scaleVec","","Scale all the coefficients of a by the scalar value.",null,null],[5,"sws_normalizeVec","","Scale all the coefficients of a so that their sum equals height.",null,null],[5,"sws_getConstVec","","",null,null],[5,"sws_getIdentityVec","","",null,null],[5,"sws_convVec","","",null,null],[5,"sws_addVec","","",null,null],[5,"sws_subVec","","",null,null],[5,"sws_shiftVec","","",null,null],[5,"sws_cloneVec","","",null,null],[5,"sws_printVec2","","",null,null],[5,"sws_freeVec","","",null,null],[5,"sws_getDefaultFilter","","",null,null],[5,"sws_freeFilter","","",null,null],[5,"sws_getCachedContext","","Check if context can be reused, otherwise reallocate a new one.",null,null],[5,"sws_convertPalette8ToPacked32","","Convert an 8-bit paletted frame into a frame with a color depth of 32 bits.",null,null],[5,"sws_convertPalette8ToPacked24","","Convert an 8-bit paletted frame into a frame with a color depth of 24 bits.",null,null],[5,"sws_get_class","","Get the AVClass for swsContext. It can be used in combination with AV_OPT_SEARCH_FAKE_OBJ for examining options.",null,null],[6,"int_least8_t","","",null,null],[6,"int_least16_t","","",null,null],[6,"int_least32_t","","",null,null],[6,"int_least64_t","","",null,null],[6,"uint_least8_t","","",null,null],[6,"uint_least16_t","","",null,null],[6,"uint_least32_t","","",null,null],[6,"uint_least64_t","","",null,null],[6,"int_fast8_t","","",null,null],[6,"int_fast16_t","","",null,null],[6,"int_fast32_t","","",null,null],[6,"int_fast64_t","","",null,null],[6,"uint_fast8_t","","",null,null],[6,"uint_fast16_t","","",null,null],[6,"uint_fast32_t","","",null,null],[6,"uint_fast64_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"__gwchar_t","","",null,null],[6,"float_t","","",null,null],[6,"double_t","","",null,null],[6,"__int8_t","","",null,null],[6,"__uint8_t","","",null,null],[6,"__int16_t","","",null,null],[6,"__uint16_t","","",null,null],[6,"__int32_t","","",null,null],[6,"__uint32_t","","",null,null],[6,"__int64_t","","",null,null],[6,"__uint64_t","","",null,null],[6,"__quad_t","","",null,null],[6,"__u_quad_t","","",null,null],[6,"__dev_t","","",null,null],[6,"__uid_t","","",null,null],[6,"__gid_t","","",null,null],[6,"__ino_t","","",null,null],[6,"__ino64_t","","",null,null],[6,"__mode_t","","",null,null],[6,"__nlink_t","","",null,null],[6,"__off_t","","",null,null],[6,"__off64_t","","",null,null],[6,"__pid_t","","",null,null],[6,"__clock_t","","",null,null],[6,"__rlim_t","","",null,null],[6,"__rlim64_t","","",null,null],[6,"__id_t","","",null,null],[6,"__time_t","","",null,null],[6,"__useconds_t","","",null,null],[6,"__suseconds_t","","",null,null],[6,"__daddr_t","","",null,null],[6,"__key_t","","",null,null],[6,"__clockid_t","","",null,null],[6,"__timer_t","","",null,null],[6,"__blksize_t","","",null,null],[6,"__blkcnt_t","","",null,null],[6,"__blkcnt64_t","","",null,null],[6,"__fsblkcnt_t","","",null,null],[6,"__fsblkcnt64_t","","",null,null],[6,"__fsfilcnt_t","","",null,null],[6,"__fsfilcnt64_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"__ssize_t","","",null,null],[6,"__syscall_slong_t","","",null,null],[6,"__syscall_ulong_t","","",null,null],[6,"__loff_t","","",null,null],[6,"__qaddr_t","","",null,null],[6,"__caddr_t","","",null,null],[6,"__intptr_t","","",null,null],[6,"__socklen_t","","",null,null],[6,"FILE","","",null,null],[6,"va_list","","",null,null],[6,"_IO_lock_t","","",null,null],[6,"off_t","","",null,null],[6,"fpos_t","","",null,null],[6,"wchar_t","","",null,null],[6,"quad_t","","",null,null],[6,"u_quad_t","","",null,null],[6,"fsid_t","","",null,null],[6,"loff_t","","",null,null],[6,"ino_t","","",null,null],[6,"dev_t","","",null,null],[6,"gid_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"uid_t","","",null,null],[6,"pid_t","","",null,null],[6,"id_t","","",null,null],[6,"daddr_t","","",null,null],[6,"caddr_t","","",null,null],[6,"key_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"clockid_t","","",null,null],[6,"timer_t","","",null,null],[6,"u_int8_t","","",null,null],[6,"u_int16_t","","",null,null],[6,"u_int32_t","","",null,null],[6,"u_int64_t","","",null,null],[6,"register_t","","",null,null],[6,"__sig_atomic_t","","",null,null],[6,"sigset_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"pthread_t","","",null,null],[6,"__pthread_list_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"pthread_once_t","","",null,null],[6,"pthread_spinlock_t","","",null,null],[6,"__compar_fn_t","","",null,null],[6,"__locale_t","","",null,null],[6,"locale_t","","",null,null],[6,"av_format_control_message","","Callback used by devices to communicate with application.",null,null],[6,"AVOpenCallback","","",null,null],[6,"__builtin_va_list","","",null,null],[17,"FF_LAMBDA_SHIFT","","",null,null],[17,"FF_LAMBDA_SCALE","","",null,null],[17,"FF_QP2LAMBDA","","",null,null],[17,"FF_LAMBDA_MAX","","",null,null],[17,"FF_QUALITY_SCALE","","",null,null],[17,"AV_TIME_BASE","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"AV_HAVE_BIGENDIAN","","",null,null],[17,"AV_HAVE_FAST_UNALIGNED","","",null,null],[17,"AVERROR_EXPERIMENTAL","","",null,null],[17,"AVERROR_INPUT_CHANGED","","",null,null],[17,"AVERROR_OUTPUT_CHANGED","","",null,null],[17,"AV_ERROR_MAX_STRING_SIZE","","",null,null],[17,"AV_LOG_QUIET","","",null,null],[17,"AV_LOG_PANIC","","",null,null],[17,"AV_LOG_FATAL","","",null,null],[17,"AV_LOG_ERROR","","",null,null],[17,"AV_LOG_WARNING","","",null,null],[17,"AV_LOG_INFO","","",null,null],[17,"AV_LOG_VERBOSE","","",null,null],[17,"AV_LOG_DEBUG","","",null,null],[17,"AV_LOG_TRACE","","",null,null],[17,"AV_LOG_MAX_OFFSET","","",null,null],[17,"AV_LOG_SKIP_REPEATED","","",null,null],[17,"AV_LOG_PRINT_LEVEL","","",null,null],[17,"AVPALETTE_SIZE","","",null,null],[17,"AVPALETTE_COUNT","","",null,null],[17,"AV_FOURCC_MAX_STRING_SIZE","","",null,null],[17,"AV_PIX_FMT_FLAG_BE","","",null,null],[17,"AV_PIX_FMT_FLAG_PAL","","",null,null],[17,"AV_PIX_FMT_FLAG_BITSTREAM","","",null,null],[17,"AV_PIX_FMT_FLAG_HWACCEL","","",null,null],[17,"AV_PIX_FMT_FLAG_PLANAR","","",null,null],[17,"AV_PIX_FMT_FLAG_RGB","","",null,null],[17,"AV_PIX_FMT_FLAG_PSEUDOPAL","","",null,null],[17,"AV_PIX_FMT_FLAG_ALPHA","","",null,null],[17,"AV_PIX_FMT_FLAG_BAYER","","",null,null],[17,"FF_LOSS_RESOLUTION","","",null,null],[17,"FF_LOSS_DEPTH","","",null,null],[17,"FF_LOSS_COLORSPACE","","",null,null],[17,"FF_LOSS_ALPHA","","",null,null],[17,"FF_LOSS_COLORQUANT","","",null,null],[17,"FF_LOSS_CHROMA","","",null,null],[17,"AV_TS_MAX_STRING_SIZE","","",null,null],[17,"AV_BUFFER_FLAG_READONLY","","",null,null],[17,"AV_CPU_FLAG_FORCE","","",null,null],[17,"AV_CPU_FLAG_MMX","","",null,null],[17,"AV_CPU_FLAG_MMXEXT","","",null,null],[17,"AV_CPU_FLAG_MMX2","","",null,null],[17,"AV_CPU_FLAG_3DNOW","","",null,null],[17,"AV_CPU_FLAG_SSE","","",null,null],[17,"AV_CPU_FLAG_SSE2","","",null,null],[17,"AV_CPU_FLAG_SSE2SLOW","","",null,null],[17,"AV_CPU_FLAG_3DNOWEXT","","",null,null],[17,"AV_CPU_FLAG_SSE3","","",null,null],[17,"AV_CPU_FLAG_SSE3SLOW","","",null,null],[17,"AV_CPU_FLAG_SSSE3","","",null,null],[17,"AV_CPU_FLAG_SSSE3SLOW","","",null,null],[17,"AV_CPU_FLAG_ATOM","","",null,null],[17,"AV_CPU_FLAG_SSE4","","",null,null],[17,"AV_CPU_FLAG_SSE42","","",null,null],[17,"AV_CPU_FLAG_AESNI","","",null,null],[17,"AV_CPU_FLAG_AVX","","",null,null],[17,"AV_CPU_FLAG_AVXSLOW","","",null,null],[17,"AV_CPU_FLAG_XOP","","",null,null],[17,"AV_CPU_FLAG_FMA4","","",null,null],[17,"AV_CPU_FLAG_CMOV","","",null,null],[17,"AV_CPU_FLAG_AVX2","","",null,null],[17,"AV_CPU_FLAG_FMA3","","",null,null],[17,"AV_CPU_FLAG_BMI1","","",null,null],[17,"AV_CPU_FLAG_BMI2","","",null,null],[17,"AV_CPU_FLAG_ALTIVEC","","",null,null],[17,"AV_CPU_FLAG_VSX","","",null,null],[17,"AV_CPU_FLAG_POWER8","","",null,null],[17,"AV_CPU_FLAG_ARMV5TE","","",null,null],[17,"AV_CPU_FLAG_ARMV6","","",null,null],[17,"AV_CPU_FLAG_ARMV6T2","","",null,null],[17,"AV_CPU_FLAG_VFP","","",null,null],[17,"AV_CPU_FLAG_VFPV3","","",null,null],[17,"AV_CPU_FLAG_NEON","","",null,null],[17,"AV_CPU_FLAG_ARMV8","","",null,null],[17,"AV_CPU_FLAG_VFP_VM","","",null,null],[17,"AV_CPU_FLAG_SETEND","","",null,null],[17,"AV_CH_FRONT_LEFT","","",null,null],[17,"AV_CH_FRONT_RIGHT","","",null,null],[17,"AV_CH_FRONT_CENTER","","",null,null],[17,"AV_CH_LOW_FREQUENCY","","",null,null],[17,"AV_CH_BACK_LEFT","","",null,null],[17,"AV_CH_BACK_RIGHT","","",null,null],[17,"AV_CH_FRONT_LEFT_OF_CENTER","","",null,null],[17,"AV_CH_FRONT_RIGHT_OF_CENTER","","",null,null],[17,"AV_CH_BACK_CENTER","","",null,null],[17,"AV_CH_SIDE_LEFT","","",null,null],[17,"AV_CH_SIDE_RIGHT","","",null,null],[17,"AV_CH_TOP_CENTER","","",null,null],[17,"AV_CH_TOP_FRONT_LEFT","","",null,null],[17,"AV_CH_TOP_FRONT_CENTER","","",null,null],[17,"AV_CH_TOP_FRONT_RIGHT","","",null,null],[17,"AV_CH_TOP_BACK_LEFT","","",null,null],[17,"AV_CH_TOP_BACK_CENTER","","",null,null],[17,"AV_CH_TOP_BACK_RIGHT","","",null,null],[17,"AV_CH_STEREO_LEFT","","",null,null],[17,"AV_CH_STEREO_RIGHT","","",null,null],[17,"AV_CH_WIDE_LEFT","","",null,null],[17,"AV_CH_WIDE_RIGHT","","",null,null],[17,"AV_CH_SURROUND_DIRECT_LEFT","","",null,null],[17,"AV_CH_SURROUND_DIRECT_RIGHT","","",null,null],[17,"AV_CH_LOW_FREQUENCY_2","","",null,null],[17,"AV_CH_LAYOUT_NATIVE","","",null,null],[17,"AV_CH_LAYOUT_MONO","","",null,null],[17,"AV_CH_LAYOUT_STEREO","","",null,null],[17,"AV_CH_LAYOUT_2POINT1","","",null,null],[17,"AV_CH_LAYOUT_2_1","","",null,null],[17,"AV_CH_LAYOUT_SURROUND","","",null,null],[17,"AV_CH_LAYOUT_3POINT1","","",null,null],[17,"AV_CH_LAYOUT_4POINT0","","",null,null],[17,"AV_CH_LAYOUT_4POINT1","","",null,null],[17,"AV_CH_LAYOUT_2_2","","",null,null],[17,"AV_CH_LAYOUT_QUAD","","",null,null],[17,"AV_CH_LAYOUT_5POINT0","","",null,null],[17,"AV_CH_LAYOUT_5POINT1","","",null,null],[17,"AV_CH_LAYOUT_5POINT0_BACK","","",null,null],[17,"AV_CH_LAYOUT_5POINT1_BACK","","",null,null],[17,"AV_CH_LAYOUT_6POINT0","","",null,null],[17,"AV_CH_LAYOUT_6POINT0_FRONT","","",null,null],[17,"AV_CH_LAYOUT_HEXAGONAL","","",null,null],[17,"AV_CH_LAYOUT_6POINT1","","",null,null],[17,"AV_CH_LAYOUT_6POINT1_BACK","","",null,null],[17,"AV_CH_LAYOUT_6POINT1_FRONT","","",null,null],[17,"AV_CH_LAYOUT_7POINT0","","",null,null],[17,"AV_CH_LAYOUT_7POINT0_FRONT","","",null,null],[17,"AV_CH_LAYOUT_7POINT1","","",null,null],[17,"AV_CH_LAYOUT_7POINT1_WIDE","","",null,null],[17,"AV_CH_LAYOUT_7POINT1_WIDE_BACK","","",null,null],[17,"AV_CH_LAYOUT_OCTAGONAL","","",null,null],[17,"AV_CH_LAYOUT_HEXADECAGONAL","","",null,null],[17,"AV_CH_LAYOUT_STEREO_DOWNMIX","","",null,null],[17,"AV_DICT_MATCH_CASE","","",null,null],[17,"AV_DICT_IGNORE_SUFFIX","","",null,null],[17,"AV_DICT_DONT_STRDUP_KEY","","",null,null],[17,"AV_DICT_DONT_STRDUP_VAL","","",null,null],[17,"AV_DICT_DONT_OVERWRITE","","",null,null],[17,"AV_DICT_APPEND","","",null,null],[17,"AV_DICT_MULTIKEY","","",null,null],[17,"AV_NUM_DATA_POINTERS","","",null,null],[17,"AV_FRAME_FLAG_CORRUPT","","",null,null],[17,"AV_FRAME_FLAG_DISCARD","","",null,null],[17,"FF_DECODE_ERROR_INVALID_BITSTREAM","","",null,null],[17,"FF_DECODE_ERROR_MISSING_REFERENCE","","",null,null],[17,"AV_CODEC_PROP_INTRA_ONLY","","",null,null],[17,"AV_CODEC_PROP_LOSSY","","",null,null],[17,"AV_CODEC_PROP_LOSSLESS","","",null,null],[17,"AV_CODEC_PROP_REORDER","","",null,null],[17,"AV_CODEC_PROP_BITMAP_SUB","","",null,null],[17,"AV_CODEC_PROP_TEXT_SUB","","",null,null],[17,"AV_INPUT_BUFFER_PADDING_SIZE","","",null,null],[17,"AV_INPUT_BUFFER_MIN_SIZE","","",null,null],[17,"FF_INPUT_BUFFER_PADDING_SIZE","","",null,null],[17,"FF_MIN_BUFFER_SIZE","","",null,null],[17,"FF_MAX_B_FRAMES","","",null,null],[17,"AV_CODEC_FLAG_UNALIGNED","","",null,null],[17,"AV_CODEC_FLAG_QSCALE","","",null,null],[17,"AV_CODEC_FLAG_4MV","","",null,null],[17,"AV_CODEC_FLAG_OUTPUT_CORRUPT","","",null,null],[17,"AV_CODEC_FLAG_QPEL","","",null,null],[17,"AV_CODEC_FLAG_PASS1","","",null,null],[17,"AV_CODEC_FLAG_PASS2","","",null,null],[17,"AV_CODEC_FLAG_LOOP_FILTER","","",null,null],[17,"AV_CODEC_FLAG_GRAY","","",null,null],[17,"AV_CODEC_FLAG_PSNR","","",null,null],[17,"AV_CODEC_FLAG_TRUNCATED","","",null,null],[17,"AV_CODEC_FLAG_INTERLACED_DCT","","",null,null],[17,"AV_CODEC_FLAG_LOW_DELAY","","",null,null],[17,"AV_CODEC_FLAG_GLOBAL_HEADER","","",null,null],[17,"AV_CODEC_FLAG_BITEXACT","","",null,null],[17,"AV_CODEC_FLAG_AC_PRED","","",null,null],[17,"AV_CODEC_FLAG_INTERLACED_ME","","",null,null],[17,"AV_CODEC_FLAG_CLOSED_GOP","","",null,null],[17,"AV_CODEC_FLAG2_FAST","","",null,null],[17,"AV_CODEC_FLAG2_NO_OUTPUT","","",null,null],[17,"AV_CODEC_FLAG2_LOCAL_HEADER","","",null,null],[17,"AV_CODEC_FLAG2_DROP_FRAME_TIMECODE","","",null,null],[17,"AV_CODEC_FLAG2_CHUNKS","","",null,null],[17,"AV_CODEC_FLAG2_IGNORE_CROP","","",null,null],[17,"AV_CODEC_FLAG2_SHOW_ALL","","",null,null],[17,"AV_CODEC_FLAG2_EXPORT_MVS","","",null,null],[17,"AV_CODEC_FLAG2_SKIP_MANUAL","","",null,null],[17,"AV_CODEC_FLAG2_RO_FLUSH_NOOP","","",null,null],[17,"AV_CODEC_CAP_DRAW_HORIZ_BAND","","",null,null],[17,"AV_CODEC_CAP_DR1","","",null,null],[17,"AV_CODEC_CAP_TRUNCATED","","",null,null],[17,"AV_CODEC_CAP_DELAY","","",null,null],[17,"AV_CODEC_CAP_SMALL_LAST_FRAME","","",null,null],[17,"AV_CODEC_CAP_HWACCEL_VDPAU","","",null,null],[17,"AV_CODEC_CAP_SUBFRAMES","","",null,null],[17,"AV_CODEC_CAP_EXPERIMENTAL","","",null,null],[17,"AV_CODEC_CAP_CHANNEL_CONF","","",null,null],[17,"AV_CODEC_CAP_FRAME_THREADS","","",null,null],[17,"AV_CODEC_CAP_SLICE_THREADS","","",null,null],[17,"AV_CODEC_CAP_PARAM_CHANGE","","",null,null],[17,"AV_CODEC_CAP_AUTO_THREADS","","",null,null],[17,"AV_CODEC_CAP_VARIABLE_FRAME_SIZE","","",null,null],[17,"AV_CODEC_CAP_AVOID_PROBING","","",null,null],[17,"AV_CODEC_CAP_INTRA_ONLY","","",null,null],[17,"AV_CODEC_CAP_LOSSLESS","","",null,null],[17,"FF_QSCALE_TYPE_MPEG1","","",null,null],[17,"FF_QSCALE_TYPE_MPEG2","","",null,null],[17,"FF_QSCALE_TYPE_H264","","",null,null],[17,"FF_QSCALE_TYPE_VP56","","",null,null],[17,"AV_GET_BUFFER_FLAG_REF","","",null,null],[17,"AV_PKT_FLAG_KEY","","",null,null],[17,"AV_PKT_FLAG_CORRUPT","","",null,null],[17,"AV_PKT_FLAG_DISCARD","","",null,null],[17,"FF_COMPRESSION_DEFAULT","","",null,null],[17,"FF_ASPECT_EXTENDED","","",null,null],[17,"FF_RC_STRATEGY_XVID","","",null,null],[17,"FF_PRED_LEFT","","",null,null],[17,"FF_PRED_PLANE","","",null,null],[17,"FF_PRED_MEDIAN","","",null,null],[17,"FF_CMP_SAD","","",null,null],[17,"FF_CMP_SSE","","",null,null],[17,"FF_CMP_SATD","","",null,null],[17,"FF_CMP_DCT","","",null,null],[17,"FF_CMP_PSNR","","",null,null],[17,"FF_CMP_BIT","","",null,null],[17,"FF_CMP_RD","","",null,null],[17,"FF_CMP_ZERO","","",null,null],[17,"FF_CMP_VSAD","","",null,null],[17,"FF_CMP_VSSE","","",null,null],[17,"FF_CMP_NSSE","","",null,null],[17,"FF_CMP_W53","","",null,null],[17,"FF_CMP_W97","","",null,null],[17,"FF_CMP_DCTMAX","","",null,null],[17,"FF_CMP_DCT264","","",null,null],[17,"FF_CMP_MEDIAN_SAD","","",null,null],[17,"FF_CMP_CHROMA","","",null,null],[17,"FF_DTG_AFD_SAME","","",null,null],[17,"FF_DTG_AFD_4_3","","",null,null],[17,"FF_DTG_AFD_16_9","","",null,null],[17,"FF_DTG_AFD_14_9","","",null,null],[17,"FF_DTG_AFD_4_3_SP_14_9","","",null,null],[17,"FF_DTG_AFD_16_9_SP_14_9","","",null,null],[17,"FF_DTG_AFD_SP_4_3","","",null,null],[17,"FF_DEFAULT_QUANT_BIAS","","",null,null],[17,"FF_MB_DECISION_SIMPLE","","",null,null],[17,"FF_MB_DECISION_BITS","","",null,null],[17,"FF_MB_DECISION_RD","","",null,null],[17,"FF_CODER_TYPE_VLC","","",null,null],[17,"FF_CODER_TYPE_AC","","",null,null],[17,"FF_CODER_TYPE_RAW","","",null,null],[17,"FF_CODER_TYPE_RLE","","",null,null],[17,"FF_CODER_TYPE_DEFLATE","","",null,null],[17,"FF_BUG_AUTODETECT","","",null,null],[17,"FF_BUG_OLD_MSMPEG4","","",null,null],[17,"FF_BUG_XVID_ILACE","","",null,null],[17,"FF_BUG_UMP4","","",null,null],[17,"FF_BUG_NO_PADDING","","",null,null],[17,"FF_BUG_AMV","","",null,null],[17,"FF_BUG_AC_VLC","","",null,null],[17,"FF_BUG_QPEL_CHROMA","","",null,null],[17,"FF_BUG_STD_QPEL","","",null,null],[17,"FF_BUG_QPEL_CHROMA2","","",null,null],[17,"FF_BUG_DIRECT_BLOCKSIZE","","",null,null],[17,"FF_BUG_EDGE","","",null,null],[17,"FF_BUG_HPEL_CHROMA","","",null,null],[17,"FF_BUG_DC_CLIP","","",null,null],[17,"FF_BUG_MS","","",null,null],[17,"FF_BUG_TRUNCATED","","",null,null],[17,"FF_BUG_IEDGE","","",null,null],[17,"FF_COMPLIANCE_VERY_STRICT","","",null,null],[17,"FF_COMPLIANCE_STRICT","","",null,null],[17,"FF_COMPLIANCE_NORMAL","","",null,null],[17,"FF_COMPLIANCE_UNOFFICIAL","","",null,null],[17,"FF_COMPLIANCE_EXPERIMENTAL","","",null,null],[17,"FF_EC_GUESS_MVS","","",null,null],[17,"FF_EC_DEBLOCK","","",null,null],[17,"FF_EC_FAVOR_INTER","","",null,null],[17,"FF_DEBUG_PICT_INFO","","",null,null],[17,"FF_DEBUG_RC","","",null,null],[17,"FF_DEBUG_BITSTREAM","","",null,null],[17,"FF_DEBUG_MB_TYPE","","",null,null],[17,"FF_DEBUG_QP","","",null,null],[17,"FF_DEBUG_MV","","",null,null],[17,"FF_DEBUG_DCT_COEFF","","",null,null],[17,"FF_DEBUG_SKIP","","",null,null],[17,"FF_DEBUG_STARTCODE","","",null,null],[17,"FF_DEBUG_PTS","","",null,null],[17,"FF_DEBUG_ER","","",null,null],[17,"FF_DEBUG_MMCO","","",null,null],[17,"FF_DEBUG_BUGS","","",null,null],[17,"FF_DEBUG_VIS_QP","","",null,null],[17,"FF_DEBUG_VIS_MB_TYPE","","",null,null],[17,"FF_DEBUG_BUFFERS","","",null,null],[17,"FF_DEBUG_THREADS","","",null,null],[17,"FF_DEBUG_GREEN_MD","","",null,null],[17,"FF_DEBUG_NOMC","","",null,null],[17,"FF_DEBUG_VIS_MV_P_FOR","","",null,null],[17,"FF_DEBUG_VIS_MV_B_FOR","","",null,null],[17,"FF_DEBUG_VIS_MV_B_BACK","","",null,null],[17,"AV_EF_CRCCHECK","","",null,null],[17,"AV_EF_BITSTREAM","","",null,null],[17,"AV_EF_BUFFER","","",null,null],[17,"AV_EF_EXPLODE","","",null,null],[17,"AV_EF_IGNORE_ERR","","",null,null],[17,"AV_EF_CAREFUL","","",null,null],[17,"AV_EF_COMPLIANT","","",null,null],[17,"AV_EF_AGGRESSIVE","","",null,null],[17,"FF_DCT_AUTO","","",null,null],[17,"FF_DCT_FASTINT","","",null,null],[17,"FF_DCT_INT","","",null,null],[17,"FF_DCT_MMX","","",null,null],[17,"FF_DCT_ALTIVEC","","",null,null],[17,"FF_DCT_FAAN","","",null,null],[17,"FF_IDCT_AUTO","","",null,null],[17,"FF_IDCT_INT","","",null,null],[17,"FF_IDCT_SIMPLE","","",null,null],[17,"FF_IDCT_SIMPLEMMX","","",null,null],[17,"FF_IDCT_ARM","","",null,null],[17,"FF_IDCT_ALTIVEC","","",null,null],[17,"FF_IDCT_SH4","","",null,null],[17,"FF_IDCT_SIMPLEARM","","",null,null],[17,"FF_IDCT_IPP","","",null,null],[17,"FF_IDCT_XVID","","",null,null],[17,"FF_IDCT_XVIDMMX","","",null,null],[17,"FF_IDCT_SIMPLEARMV5TE","","",null,null],[17,"FF_IDCT_SIMPLEARMV6","","",null,null],[17,"FF_IDCT_SIMPLEVIS","","",null,null],[17,"FF_IDCT_FAAN","","",null,null],[17,"FF_IDCT_SIMPLENEON","","",null,null],[17,"FF_IDCT_SIMPLEALPHA","","",null,null],[17,"FF_IDCT_SIMPLEAUTO","","",null,null],[17,"FF_THREAD_FRAME","","",null,null],[17,"FF_THREAD_SLICE","","",null,null],[17,"FF_PROFILE_UNKNOWN","","",null,null],[17,"FF_PROFILE_RESERVED","","",null,null],[17,"FF_PROFILE_AAC_MAIN","","",null,null],[17,"FF_PROFILE_AAC_LOW","","",null,null],[17,"FF_PROFILE_AAC_SSR","","",null,null],[17,"FF_PROFILE_AAC_LTP","","",null,null],[17,"FF_PROFILE_AAC_HE","","",null,null],[17,"FF_PROFILE_AAC_HE_V2","","",null,null],[17,"FF_PROFILE_AAC_LD","","",null,null],[17,"FF_PROFILE_AAC_ELD","","",null,null],[17,"FF_PROFILE_MPEG2_AAC_LOW","","",null,null],[17,"FF_PROFILE_MPEG2_AAC_HE","","",null,null],[17,"FF_PROFILE_DNXHD","","",null,null],[17,"FF_PROFILE_DNXHR_LB","","",null,null],[17,"FF_PROFILE_DNXHR_SQ","","",null,null],[17,"FF_PROFILE_DNXHR_HQ","","",null,null],[17,"FF_PROFILE_DNXHR_HQX","","",null,null],[17,"FF_PROFILE_DNXHR_444","","",null,null],[17,"FF_PROFILE_DTS","","",null,null],[17,"FF_PROFILE_DTS_ES","","",null,null],[17,"FF_PROFILE_DTS_96_24","","",null,null],[17,"FF_PROFILE_DTS_HD_HRA","","",null,null],[17,"FF_PROFILE_DTS_HD_MA","","",null,null],[17,"FF_PROFILE_DTS_EXPRESS","","",null,null],[17,"FF_PROFILE_MPEG2_422","","",null,null],[17,"FF_PROFILE_MPEG2_HIGH","","",null,null],[17,"FF_PROFILE_MPEG2_SS","","",null,null],[17,"FF_PROFILE_MPEG2_SNR_SCALABLE","","",null,null],[17,"FF_PROFILE_MPEG2_MAIN","","",null,null],[17,"FF_PROFILE_MPEG2_SIMPLE","","",null,null],[17,"FF_PROFILE_H264_CONSTRAINED","","",null,null],[17,"FF_PROFILE_H264_INTRA","","",null,null],[17,"FF_PROFILE_H264_BASELINE","","",null,null],[17,"FF_PROFILE_H264_CONSTRAINED_BASELINE","","",null,null],[17,"FF_PROFILE_H264_MAIN","","",null,null],[17,"FF_PROFILE_H264_EXTENDED","","",null,null],[17,"FF_PROFILE_H264_HIGH","","",null,null],[17,"FF_PROFILE_H264_HIGH_10","","",null,null],[17,"FF_PROFILE_H264_HIGH_10_INTRA","","",null,null],[17,"FF_PROFILE_H264_MULTIVIEW_HIGH","","",null,null],[17,"FF_PROFILE_H264_HIGH_422","","",null,null],[17,"FF_PROFILE_H264_HIGH_422_INTRA","","",null,null],[17,"FF_PROFILE_H264_STEREO_HIGH","","",null,null],[17,"FF_PROFILE_H264_HIGH_444","","",null,null],[17,"FF_PROFILE_H264_HIGH_444_PREDICTIVE","","",null,null],[17,"FF_PROFILE_H264_HIGH_444_INTRA","","",null,null],[17,"FF_PROFILE_H264_CAVLC_444","","",null,null],[17,"FF_PROFILE_VC1_SIMPLE","","",null,null],[17,"FF_PROFILE_VC1_MAIN","","",null,null],[17,"FF_PROFILE_VC1_COMPLEX","","",null,null],[17,"FF_PROFILE_VC1_ADVANCED","","",null,null],[17,"FF_PROFILE_MPEG4_SIMPLE","","",null,null],[17,"FF_PROFILE_MPEG4_SIMPLE_SCALABLE","","",null,null],[17,"FF_PROFILE_MPEG4_CORE","","",null,null],[17,"FF_PROFILE_MPEG4_MAIN","","",null,null],[17,"FF_PROFILE_MPEG4_N_BIT","","",null,null],[17,"FF_PROFILE_MPEG4_SCALABLE_TEXTURE","","",null,null],[17,"FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION","","",null,null],[17,"FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE","","",null,null],[17,"FF_PROFILE_MPEG4_HYBRID","","",null,null],[17,"FF_PROFILE_MPEG4_ADVANCED_REAL_TIME","","",null,null],[17,"FF_PROFILE_MPEG4_CORE_SCALABLE","","",null,null],[17,"FF_PROFILE_MPEG4_ADVANCED_CODING","","",null,null],[17,"FF_PROFILE_MPEG4_ADVANCED_CORE","","",null,null],[17,"FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE","","",null,null],[17,"FF_PROFILE_MPEG4_SIMPLE_STUDIO","","",null,null],[17,"FF_PROFILE_MPEG4_ADVANCED_SIMPLE","","",null,null],[17,"FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0","","",null,null],[17,"FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1","","",null,null],[17,"FF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION","","",null,null],[17,"FF_PROFILE_JPEG2000_DCINEMA_2K","","",null,null],[17,"FF_PROFILE_JPEG2000_DCINEMA_4K","","",null,null],[17,"FF_PROFILE_VP9_0","","",null,null],[17,"FF_PROFILE_VP9_1","","",null,null],[17,"FF_PROFILE_VP9_2","","",null,null],[17,"FF_PROFILE_VP9_3","","",null,null],[17,"FF_PROFILE_HEVC_MAIN","","",null,null],[17,"FF_PROFILE_HEVC_MAIN_10","","",null,null],[17,"FF_PROFILE_HEVC_MAIN_STILL_PICTURE","","",null,null],[17,"FF_PROFILE_HEVC_REXT","","",null,null],[17,"FF_LEVEL_UNKNOWN","","",null,null],[17,"FF_SUB_CHARENC_MODE_DO_NOTHING","","",null,null],[17,"FF_SUB_CHARENC_MODE_AUTOMATIC","","",null,null],[17,"FF_SUB_CHARENC_MODE_PRE_DECODER","","",null,null],[17,"FF_CODEC_PROPERTY_LOSSLESS","","",null,null],[17,"FF_CODEC_PROPERTY_CLOSED_CAPTIONS","","",null,null],[17,"FF_SUB_TEXT_FMT_ASS","","",null,null],[17,"FF_SUB_TEXT_FMT_ASS_WITH_TIMINGS","","",null,null],[17,"AV_HWACCEL_FLAG_IGNORE_LEVEL","","",null,null],[17,"AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH","","",null,null],[17,"AV_SUBTITLE_FLAG_FORCED","","",null,null],[17,"AV_PARSER_PTS_NB","","",null,null],[17,"FF_API_R_FRAME_RATE","","",null,null],[17,"AVIO_SEEKABLE_NORMAL","","",null,null],[17,"AVIO_SEEKABLE_TIME","","",null,null],[17,"AVSEEK_SIZE","","",null,null],[17,"AVSEEK_FORCE","","",null,null],[17,"AVIO_FLAG_READ","","",null,null],[17,"AVIO_FLAG_WRITE","","",null,null],[17,"AVIO_FLAG_READ_WRITE","","",null,null],[17,"AVIO_FLAG_NONBLOCK","","",null,null],[17,"AVIO_FLAG_DIRECT","","",null,null],[17,"AVPROBE_SCORE_EXTENSION","","",null,null],[17,"AVPROBE_SCORE_MIME","","",null,null],[17,"AVPROBE_SCORE_MAX","","",null,null],[17,"AVPROBE_PADDING_SIZE","","",null,null],[17,"AVFMT_NOFILE","","",null,null],[17,"AVFMT_NEEDNUMBER","","",null,null],[17,"AVFMT_SHOW_IDS","","",null,null],[17,"AVFMT_RAWPICTURE","","",null,null],[17,"AVFMT_GLOBALHEADER","","",null,null],[17,"AVFMT_NOTIMESTAMPS","","",null,null],[17,"AVFMT_GENERIC_INDEX","","",null,null],[17,"AVFMT_TS_DISCONT","","",null,null],[17,"AVFMT_VARIABLE_FPS","","",null,null],[17,"AVFMT_NODIMENSIONS","","",null,null],[17,"AVFMT_NOSTREAMS","","",null,null],[17,"AVFMT_NOBINSEARCH","","",null,null],[17,"AVFMT_NOGENSEARCH","","",null,null],[17,"AVFMT_NO_BYTE_SEEK","","",null,null],[17,"AVFMT_ALLOW_FLUSH","","",null,null],[17,"AVFMT_TS_NONSTRICT","","",null,null],[17,"AVFMT_TS_NEGATIVE","","",null,null],[17,"AVFMT_SEEK_TO_PTS","","",null,null],[17,"AVINDEX_KEYFRAME","","",null,null],[17,"AVINDEX_DISCARD_FRAME","","",null,null],[17,"AV_DISPOSITION_DEFAULT","","",null,null],[17,"AV_DISPOSITION_DUB","","",null,null],[17,"AV_DISPOSITION_ORIGINAL","","",null,null],[17,"AV_DISPOSITION_COMMENT","","",null,null],[17,"AV_DISPOSITION_LYRICS","","",null,null],[17,"AV_DISPOSITION_KARAOKE","","",null,null],[17,"AV_DISPOSITION_FORCED","","",null,null],[17,"AV_DISPOSITION_HEARING_IMPAIRED","","",null,null],[17,"AV_DISPOSITION_VISUAL_IMPAIRED","","",null,null],[17,"AV_DISPOSITION_CLEAN_EFFECTS","","",null,null],[17,"AV_DISPOSITION_ATTACHED_PIC","","",null,null],[17,"AV_DISPOSITION_TIMED_THUMBNAILS","","",null,null],[17,"AV_DISPOSITION_CAPTIONS","","",null,null],[17,"AV_DISPOSITION_DESCRIPTIONS","","",null,null],[17,"AV_DISPOSITION_METADATA","","",null,null],[17,"AV_PTS_WRAP_IGNORE","","",null,null],[17,"AV_PTS_WRAP_ADD_OFFSET","","",null,null],[17,"AV_PTS_WRAP_SUB_OFFSET","","",null,null],[17,"AVSTREAM_EVENT_FLAG_METADATA_UPDATED","","",null,null],[17,"AV_PROGRAM_RUNNING","","",null,null],[17,"AVFMTCTX_NOHEADER","","",null,null],[17,"AVFMT_FLAG_GENPTS","","",null,null],[17,"AVFMT_FLAG_IGNIDX","","",null,null],[17,"AVFMT_FLAG_NONBLOCK","","",null,null],[17,"AVFMT_FLAG_IGNDTS","","",null,null],[17,"AVFMT_FLAG_NOFILLIN","","",null,null],[17,"AVFMT_FLAG_NOPARSE","","",null,null],[17,"AVFMT_FLAG_NOBUFFER","","",null,null],[17,"AVFMT_FLAG_CUSTOM_IO","","",null,null],[17,"AVFMT_FLAG_DISCARD_CORRUPT","","",null,null],[17,"AVFMT_FLAG_FLUSH_PACKETS","","",null,null],[17,"AVFMT_FLAG_BITEXACT","","",null,null],[17,"AVFMT_FLAG_MP4A_LATM","","",null,null],[17,"AVFMT_FLAG_SORT_DTS","","",null,null],[17,"AVFMT_FLAG_PRIV_OPT","","",null,null],[17,"AVFMT_FLAG_KEEP_SIDE_DATA","","",null,null],[17,"AVFMT_FLAG_FAST_SEEK","","",null,null],[17,"AVFMT_FLAG_SHORTEST","","",null,null],[17,"AVFMT_FLAG_AUTO_BSF","","",null,null],[17,"FF_FDEBUG_TS","","",null,null],[17,"AVFMT_EVENT_FLAG_METADATA_UPDATED","","",null,null],[17,"AVFMT_AVOID_NEG_TS_AUTO","","",null,null],[17,"AVFMT_AVOID_NEG_TS_MAKE_NON_NEGATIVE","","",null,null],[17,"AVFMT_AVOID_NEG_TS_MAKE_ZERO","","",null,null],[17,"AVSEEK_FLAG_BACKWARD","","",null,null],[17,"AVSEEK_FLAG_BYTE","","",null,null],[17,"AVSEEK_FLAG_ANY","","",null,null],[17,"AVSEEK_FLAG_FRAME","","",null,null],[17,"AVSTREAM_INIT_IN_WRITE_HEADER","","",null,null],[17,"AVSTREAM_INIT_IN_INIT_OUTPUT","","",null,null],[17,"AV_FRAME_FILENAME_FLAGS_MULTIPLE","","",null,null],[17,"SWS_FAST_BILINEAR","","",null,null],[17,"SWS_BILINEAR","","",null,null],[17,"SWS_BICUBIC","","",null,null],[17,"SWS_X","","",null,null],[17,"SWS_POINT","","",null,null],[17,"SWS_AREA","","",null,null],[17,"SWS_BICUBLIN","","",null,null],[17,"SWS_GAUSS","","",null,null],[17,"SWS_SINC","","",null,null],[17,"SWS_LANCZOS","","",null,null],[17,"SWS_SPLINE","","",null,null],[17,"SWS_SRC_V_CHR_DROP_MASK","","",null,null],[17,"SWS_SRC_V_CHR_DROP_SHIFT","","",null,null],[17,"SWS_PARAM_DEFAULT","","",null,null],[17,"SWS_PRINT_INFO","","",null,null],[17,"SWS_FULL_CHR_H_INT","","",null,null],[17,"SWS_FULL_CHR_H_INP","","",null,null],[17,"SWS_DIRECT_BGR","","",null,null],[17,"SWS_ACCURATE_RND","","",null,null],[17,"SWS_BITEXACT","","",null,null],[17,"SWS_ERROR_DIFFUSION","","",null,null],[17,"SWS_MAX_REDUCE_CUTOFF","","",null,null],[17,"SWS_CS_ITU709","","",null,null],[17,"SWS_CS_FCC","","",null,null],[17,"SWS_CS_ITU601","","",null,null],[17,"SWS_CS_ITU624","","",null,null],[17,"SWS_CS_SMPTE170M","","",null,null],[17,"SWS_CS_SMPTE240M","","",null,null],[17,"SWS_CS_DEFAULT","","",null,null],[17,"SWS_CS_BT2020","","",null,null],[17,"AVPixelFormat_AV_PIX_FMT_XVMC","","",null,null],[17,"AVPixelFormat_AV_PIX_FMT_VAAPI","","",null,null],[17,"AVPixelFormat_AV_PIX_FMT_Y400A","","",null,null],[17,"AVPixelFormat_AV_PIX_FMT_GRAY8A","","",null,null],[17,"AVPixelFormat_AV_PIX_FMT_GBR24P","","",null,null],[17,"AVColorPrimaries_AVCOL_PRI_SMPTEST428_1","","",null,null],[17,"AVColorTransferCharacteristic_AVCOL_TRC_SMPTEST2084","","",null,null],[17,"AVColorTransferCharacteristic_AVCOL_TRC_SMPTEST428_1","","",null,null],[17,"AVColorSpace_AVCOL_SPC_YCOCG","","",null,null],[17,"AVCodecID_AV_CODEC_ID_PCM_S16LE","","",null,null],[17,"AVCodecID_AV_CODEC_ID_VIMA","","",null,null],[17,"AVCodecID_AV_CODEC_ID_DVD_SUBTITLE","","",null,null],[17,"AVCodecID_AV_CODEC_ID_TTF","","",null,null],[17,"NOPTS_VALUE","","",null,null],[17,"AVERROR_EAGAIN","","",null,null],[17,"AVERROR_EOF","","",null,null],[11,"new","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",104,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",104,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"avmediatype"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"avmediatype"}],"output":{"name":"bool"}}],[11,"hash","","",75,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"avpicturetype"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"avpicturetype"}],"output":{"name":"bool"}}],[11,"hash","","",76,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"_io_jump_t"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"idtype_t"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"idtype_t"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"avrounding"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"avrounding"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"avclasscategory"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"avclasscategory"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"avoptionranges"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"avpixelformat"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"avpixelformat"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"avcolorprimaries"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"avcolorprimaries"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"avcolortransfercharacteristic"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"avcolortransfercharacteristic"}],"output":{"name":"bool"}}],[11,"hash","","",82,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"avcolorspace"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"avcolorspace"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"avcolorrange"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"avcolorrange"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"avchromalocation"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"avchromalocation"}],"output":{"name":"bool"}}],[11,"hash","","",85,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"avsampleformat"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"avsampleformat"}],"output":{"name":"bool"}}],[11,"hash","","",86,null],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"avbuffer"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"avbufferpool"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"avmatrixencoding"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"avmatrixencoding"}],"output":{"name":"bool"}}],[11,"hash","","",87,null],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"avbprint"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"avdictionary"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"avframesidedatatype"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"avframesidedatatype"}],"output":{"name":"bool"}}],[11,"hash","","",88,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"avactiveformatdescription"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"avactiveformatdescription"}],"output":{"name":"bool"}}],[11,"hash","","",89,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"avcodecid"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"avcodecid"}],"output":{"name":"bool"}}],[11,"hash","","",90,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"avdiscard"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"avdiscard"}],"output":{"name":"bool"}}],[11,"hash","","",91,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"avaudioservicetype"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"avaudioservicetype"}],"output":{"name":"bool"}}],[11,"hash","","",92,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"avpacketsidedatatype"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"avpacketsidedatatype"}],"output":{"name":"bool"}}],[11,"hash","","",93,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"avsidedataparamchangeflags"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"avsidedataparamchangeflags"}],"output":{"name":"bool"}}],[11,"hash","","",94,null],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"avcodecinternal"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"avfieldorder"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"avfieldorder"}],"output":{"name":"bool"}}],[11,"hash","","",95,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"avcodecdefault"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"mpegenccontext"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"avsubtitletype"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"avsubtitletype"}],"output":{"name":"bool"}}],[11,"hash","","",96,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"avpicturestructure"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"avpicturestructure"}],"output":{"name":"bool"}}],[11,"hash","","",97,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"resamplecontext"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"avresamplecontext"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"avbsfinternal"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"avbsflist"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"avlockop"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"avlockop"}],"output":{"name":"bool"}}],[11,"hash","","",98,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"aviodirentrytype"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"aviodirentrytype"}],"output":{"name":"bool"}}],[11,"hash","","",99,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"aviodatamarkertype"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"aviodatamarkertype"}],"output":{"name":"bool"}}],[11,"hash","","",100,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"avdeviceinfolist"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"avdevicecapabilitiesquery"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"avcodectag"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"avstreamparsetype"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"avstreamparsetype"}],"output":{"name":"bool"}}],[11,"hash","","",101,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"flags","","",62,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"set_flags","","",62,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"size","","",62,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"set_size","","",62,{"inputs":[{"name":"self"},{"name":"c_int"}],"output":null}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"avstreaminternal"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"avdurationestimationmethod"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"avdurationestimationmethod"}],"output":{"name":"bool"}}],[11,"hash","","",102,null],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"avformatinternal"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"avtimebasesource"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"avtimebasesource"}],"output":{"name":"bool"}}],[11,"hash","","",103,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"swscontext"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"self"}}]],"paths":[[3,"imaxdiv_t"],[3,"__fsid_t"],[3,"_IO_FILE"],[3,"__mbstate_t"],[3,"__mbstate_t__bindgen_ty_1"],[3,"_G_fpos_t"],[3,"_G_fpos64_t"],[3,"_IO_marker"],[3,"div_t"],[3,"ldiv_t"],[3,"lldiv_t"],[3,"__sigset_t"],[3,"pthread_attr_t"],[3,"__pthread_internal_list"],[3,"pthread_mutex_t"],[3,"pthread_mutex_t___pthread_mutex_s"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_cond_t__bindgen_ty_1"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"pthread_rwlock_t__bindgen_ty_1"],[3,"pthread_rwlockattr_t"],[3,"pthread_barrier_t"],[3,"pthread_barrierattr_t"],[3,"__locale_struct"],[3,"AVRational"],[3,"AVClass"],[3,"AVComponentDescriptor"],[3,"AVPixFmtDescriptor"],[3,"AVBufferRef"],[3,"AVDictionaryEntry"],[3,"AVFrameSideData"],[3,"AVFrame"],[3,"AVCodecDescriptor"],[3,"RcOverride"],[3,"AVPanScan"],[3,"AVCPBProperties"],[3,"AVPacketSideData"],[3,"AVPacket"],[3,"AVCodecContext"],[3,"AVProfile"],[3,"AVSubtitle"],[3,"AVCodec"],[3,"AVHWAccel"],[3,"AVPicture"],[3,"AVSubtitleRect"],[3,"AVCodecParameters"],[3,"AVCodecParserContext"],[3,"AVCodecParser"],[3,"AVBitStreamFilterContext"],[3,"AVBSFContext"],[3,"AVBitStreamFilter"],[3,"AVIOInterruptCB"],[3,"AVIODirEntry"],[3,"AVIODirContext"],[3,"AVIOContext"],[3,"AVFormatContext"],[3,"AVFrac"],[3,"AVProbeData"],[3,"AVOutputFormat"],[3,"AVInputFormat"],[3,"AVIndexEntry"],[3,"AVStream"],[3,"AVStream__bindgen_ty_1"],[3,"AVProgram"],[3,"AVChapter"],[3,"AVPacketList"],[3,"SwsVector"],[3,"SwsFilter"],[3,"__va_list_tag"],[3,"__locale_data"],[3,"AVOption"],[3,"URLContext"],[3,"FFFrac"],[4,"AVMediaType"],[4,"AVPictureType"],[4,"idtype_t"],[4,"AVRounding"],[4,"AVClassCategory"],[4,"AVPixelFormat"],[4,"AVColorPrimaries"],[4,"AVColorTransferCharacteristic"],[4,"AVColorSpace"],[4,"AVColorRange"],[4,"AVChromaLocation"],[4,"AVSampleFormat"],[4,"AVMatrixEncoding"],[4,"AVFrameSideDataType"],[4,"AVActiveFormatDescription"],[4,"AVCodecID"],[4,"AVDiscard"],[4,"AVAudioServiceType"],[4,"AVPacketSideDataType"],[4,"AVSideDataParamChangeFlags"],[4,"AVFieldOrder"],[4,"AVSubtitleType"],[4,"AVPictureStructure"],[4,"AVLockOp"],[4,"AVIODirEntryType"],[4,"AVIODataMarkerType"],[4,"AVStreamParseType"],[4,"AVDurationEstimationMethod"],[4,"AVTimebaseSource"],[3,"__BindgenUnionField"],[3,"_IO_jump_t"],[3,"AVOptionRanges"],[3,"AVBuffer"],[3,"AVBufferPool"],[3,"AVBPrint"],[3,"AVDictionary"],[3,"AVCodecInternal"],[3,"AVCodecDefault"],[3,"MpegEncContext"],[3,"ReSampleContext"],[3,"AVResampleContext"],[3,"AVBSFInternal"],[3,"AVBSFList"],[3,"AVDeviceInfoList"],[3,"AVDeviceCapabilitiesQuery"],[3,"AVCodecTag"],[3,"AVStreamInternal"],[3,"AVFormatInternal"],[3,"SwsContext"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"ip","","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Returns the name of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as a `str` if the symbols is valid utf-8.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"backtraceframe"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"from","","",3,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"backtrace"}}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["dbghelp"] = {"doc":"","items":[],"paths":[]};
searchIndex["error_chain"] = {"doc":"A library for consistent and reliable error handling","items":[[3,"Backtrace","error_chain","Representation of an owned and self-contained backtrace.",null,null],[3,"ErrorChainIter","","Iterator over the error chain using the `Error::cause()` method.",null,null],[12,"0","","",0,null],[3,"Display","","A struct which formats an error for output.",null,null],[0,"example_generated","","These modules show an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Error","error_chain::example_generated","The Error type.",null,null],[12,"0","","The kind of the error.",1,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",2,null],[13,"Inner","","Link to another `ErrorChain`.",2,null],[13,"Io","","Link to a `std::error::Error` type.",2,null],[13,"Custom","","A custom error kind.",2,null],[0,"inner","","Another code generated by the macro.",null,null],[3,"Error","error_chain::example_generated::inner","The Error type.",null,null],[12,"0","","The kind of the error.",3,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",4,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",3,null],[11,"kind","","",3,null],[11,"iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",3,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",3,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",3,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",3,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[6,"Result","error_chain::example_generated","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",1,null],[11,"kind","","",1,null],[11,"iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",1,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",1,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",2,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[8,"ExitCode","error_chain","Represents a value that can be used as the exit status of the process. See `quick_main!`.",null,null],[10,"code","","Returns the value to use as the exit status.",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"ChainedError","","This trait is implemented on all the errors generated by the `error_chain` macro.",null,null],[16,"ErrorKind","","Associated kind type.",8,null],[10,"from_kind","","Constructs an error from a kind, and generates a backtrace.",8,null],[10,"kind","","Returns the kind of the error.",8,null],[10,"iter","","Iterates over the error chain.",8,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[10,"backtrace","","Returns the backtrace associated with this error.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"display","","Returns an object which implements `Display` for printing the full context of this error.",8,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"quick_error","","",null,null],[14,"error_chain_processed","","Prefer to use `error_chain` instead of this macro.",null,null],[14,"error_chain","","This macro is used for handling of duplicated and out-of-order fields. For the exact rules, see `error_chain_processed`.",null,null],[14,"quick_main","","Convenient wrapper to be able to use `try!` and such in the main. You can use it with a separated function:",null,null],[14,"bail","","Exits a function early with an error",null,null],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",10,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",10,null],[11,"into","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"backtrace"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"backtrace"}}]],"paths":[[3,"ErrorChainIter"],[3,"Error"],[4,"ErrorKind"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[8,"ResultExt"],[8,"ExitCode"],[8,"ChainedError"],[3,"Display"],[3,"Backtrace"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",17,null],[12,"sin_port","","",17,null],[12,"sin_addr","","",17,null],[12,"sin_zero","","",17,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",18,null],[12,"sin6_port","","",18,null],[12,"sin6_flowinfo","","",18,null],[12,"sin6_addr","","",18,null],[12,"sin6_scope_id","","",18,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",19,null],[12,"sun_path","","",19,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",20,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",21,null],[12,"ai_family","","",21,null],[12,"ai_socktype","","",21,null],[12,"ai_protocol","","",21,null],[12,"ai_addrlen","","",21,null],[12,"ai_addr","","",21,null],[12,"ai_canonname","","",21,null],[12,"ai_next","","",21,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",22,null],[12,"nl_pid","","",22,null],[12,"nl_groups","","",22,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",23,null],[12,"sll_protocol","","",23,null],[12,"sll_ifindex","","",23,null],[12,"sll_hatype","","",23,null],[12,"sll_pkttype","","",23,null],[12,"sll_halen","","",23,null],[12,"sll_addr","","",23,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",24,null],[12,"tm_min","","",24,null],[12,"tm_hour","","",24,null],[12,"tm_mday","","",24,null],[12,"tm_mon","","",24,null],[12,"tm_year","","",24,null],[12,"tm_wday","","",24,null],[12,"tm_yday","","",24,null],[12,"tm_isdst","","",24,null],[12,"tm_gmtoff","","",24,null],[12,"tm_zone","","",24,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",25,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",26,null],[12,"dli_fbase","","",26,null],[12,"dli_sname","","",26,null],[12,"dli_saddr","","",26,null],[3,"epoll_event","","",null,null],[12,"events","","",27,null],[12,"u64","","",27,null],[3,"utsname","","",null,null],[12,"sysname","","",28,null],[12,"nodename","","",28,null],[12,"release","","",28,null],[12,"version","","",28,null],[12,"machine","","",28,null],[12,"domainname","","",28,null],[3,"lconv","","",null,null],[12,"decimal_point","","",29,null],[12,"thousands_sep","","",29,null],[12,"grouping","","",29,null],[12,"int_curr_symbol","","",29,null],[12,"currency_symbol","","",29,null],[12,"mon_decimal_point","","",29,null],[12,"mon_thousands_sep","","",29,null],[12,"mon_grouping","","",29,null],[12,"positive_sign","","",29,null],[12,"negative_sign","","",29,null],[12,"int_frac_digits","","",29,null],[12,"frac_digits","","",29,null],[12,"p_cs_precedes","","",29,null],[12,"p_sep_by_space","","",29,null],[12,"n_cs_precedes","","",29,null],[12,"n_sep_by_space","","",29,null],[12,"p_sign_posn","","",29,null],[12,"n_sign_posn","","",29,null],[12,"int_p_cs_precedes","","",29,null],[12,"int_p_sep_by_space","","",29,null],[12,"int_n_cs_precedes","","",29,null],[12,"int_n_sep_by_space","","",29,null],[12,"int_p_sign_posn","","",29,null],[12,"int_n_sign_posn","","",29,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",30,null],[12,"sigev_signo","","",30,null],[12,"sigev_notify","","",30,null],[12,"sigev_notify_thread_id","","",30,null],[3,"dirent","","",null,null],[12,"d_ino","","",31,null],[12,"d_off","","",31,null],[12,"d_reclen","","",31,null],[12,"d_type","","",31,null],[12,"d_name","","",31,null],[3,"dirent64","","",null,null],[12,"d_ino","","",32,null],[12,"d_off","","",32,null],[12,"d_reclen","","",32,null],[12,"d_type","","",32,null],[12,"d_name","","",32,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",33,null],[12,"rlim_max","","",33,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",34,null],[12,"gl_pathv","","",34,null],[12,"gl_offs","","",34,null],[12,"gl_flags","","",34,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",35,null],[12,"ifa_name","","",35,null],[12,"ifa_flags","","",35,null],[12,"ifa_addr","","",35,null],[12,"ifa_netmask","","",35,null],[12,"ifa_ifu","","",35,null],[12,"ifa_data","","",35,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",36,null],[12,"pw_passwd","","",36,null],[12,"pw_uid","","",36,null],[12,"pw_gid","","",36,null],[12,"pw_gecos","","",36,null],[12,"pw_dir","","",36,null],[12,"pw_shell","","",36,null],[3,"spwd","","",null,null],[12,"sp_namp","","",37,null],[12,"sp_pwdp","","",37,null],[12,"sp_lstchg","","",37,null],[12,"sp_min","","",37,null],[12,"sp_max","","",37,null],[12,"sp_warn","","",37,null],[12,"sp_inact","","",37,null],[12,"sp_expire","","",37,null],[12,"sp_flag","","",37,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",38,null],[12,"f_frsize","","",38,null],[12,"f_blocks","","",38,null],[12,"f_bfree","","",38,null],[12,"f_bavail","","",38,null],[12,"f_files","","",38,null],[12,"f_ffree","","",38,null],[12,"f_favail","","",38,null],[12,"f_fsid","","",38,null],[12,"f_flag","","",38,null],[12,"f_namemax","","",38,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",39,null],[12,"dqb_bsoftlimit","","",39,null],[12,"dqb_curspace","","",39,null],[12,"dqb_ihardlimit","","",39,null],[12,"dqb_isoftlimit","","",39,null],[12,"dqb_curinodes","","",39,null],[12,"dqb_btime","","",39,null],[12,"dqb_itime","","",39,null],[12,"dqb_valid","","",39,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",40,null],[12,"ssi_errno","","",40,null],[12,"ssi_code","","",40,null],[12,"ssi_pid","","",40,null],[12,"ssi_uid","","",40,null],[12,"ssi_fd","","",40,null],[12,"ssi_tid","","",40,null],[12,"ssi_band","","",40,null],[12,"ssi_overrun","","",40,null],[12,"ssi_trapno","","",40,null],[12,"ssi_status","","",40,null],[12,"ssi_int","","",40,null],[12,"ssi_ptr","","",40,null],[12,"ssi_utime","","",40,null],[12,"ssi_stime","","",40,null],[12,"ssi_addr","","",40,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",41,null],[12,"mq_maxmsg","","",41,null],[12,"mq_msgsize","","",41,null],[12,"mq_curmsgs","","",41,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",42,null],[12,"if_name","","",42,null],[3,"msginfo","","",null,null],[12,"msgpool","","",43,null],[12,"msgmap","","",43,null],[12,"msgmax","","",43,null],[12,"msgmnb","","",43,null],[12,"msgmni","","",43,null],[12,"msgssz","","",43,null],[12,"msgtql","","",43,null],[12,"msgseg","","",43,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",44,null],[12,"msg_len","","",44,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",45,null],[12,"aio_lio_opcode","","",45,null],[12,"aio_reqprio","","",45,null],[12,"aio_buf","","",45,null],[12,"aio_nbytes","","",45,null],[12,"aio_sigevent","","",45,null],[12,"aio_offset","","",45,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",46,null],[12,"e_exit","","",46,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",47,null],[12,"tv_usec","","",47,null],[3,"utmpx","","",null,null],[12,"ut_type","","",48,null],[12,"ut_pid","","",48,null],[12,"ut_line","","",48,null],[12,"ut_id","","",48,null],[12,"ut_user","","",48,null],[12,"ut_host","","",48,null],[12,"ut_exit","","",48,null],[12,"ut_session","","",48,null],[12,"ut_tv","","",48,null],[12,"ut_addr_v6","","",48,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",49,null],[12,"sa_mask","","",49,null],[12,"sa_flags","","",49,null],[12,"sa_restorer","","",49,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",50,null],[12,"ss_flags","","",50,null],[12,"ss_size","","",50,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",51,null],[12,"si_errno","","",51,null],[12,"si_code","","",51,null],[12,"_pad","","",51,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",52,null],[12,"gl_pathv","","",52,null],[12,"gl_offs","","",52,null],[12,"gl_flags","","",52,null],[3,"ucred","","",null,null],[12,"pid","","",53,null],[12,"uid","","",53,null],[12,"gid","","",53,null],[3,"statfs","","",null,null],[12,"f_type","","",54,null],[12,"f_bsize","","",54,null],[12,"f_blocks","","",54,null],[12,"f_bfree","","",54,null],[12,"f_bavail","","",54,null],[12,"f_files","","",54,null],[12,"f_ffree","","",54,null],[12,"f_fsid","","",54,null],[12,"f_namelen","","",54,null],[12,"f_frsize","","",54,null],[3,"msghdr","","",null,null],[12,"msg_name","","",55,null],[12,"msg_namelen","","",55,null],[12,"msg_iov","","",55,null],[12,"msg_iovlen","","",55,null],[12,"msg_control","","",55,null],[12,"msg_controllen","","",55,null],[12,"msg_flags","","",55,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",56,null],[12,"cmsg_level","","",56,null],[12,"cmsg_type","","",56,null],[3,"termios","","",null,null],[12,"c_iflag","","",57,null],[12,"c_oflag","","",57,null],[12,"c_cflag","","",57,null],[12,"c_lflag","","",57,null],[12,"c_line","","",57,null],[12,"c_cc","","",57,null],[12,"c_ispeed","","",57,null],[12,"c_ospeed","","",57,null],[3,"flock","","",null,null],[12,"l_type","","",58,null],[12,"l_whence","","",58,null],[12,"l_start","","",58,null],[12,"l_len","","",58,null],[12,"l_pid","","",58,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",59,null],[12,"loads","","",59,null],[12,"totalram","","",59,null],[12,"freeram","","",59,null],[12,"sharedram","","",59,null],[12,"bufferram","","",59,null],[12,"totalswap","","",59,null],[12,"freeswap","","",59,null],[12,"procs","","",59,null],[12,"pad","","",59,null],[12,"totalhigh","","",59,null],[12,"freehigh","","",59,null],[12,"mem_unit","","",59,null],[12,"_f","","",59,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",60,null],[12,"msg_stime","","",60,null],[12,"msg_rtime","","",60,null],[12,"msg_ctime","","",60,null],[12,"msg_qnum","","",60,null],[12,"msg_qbytes","","",60,null],[12,"msg_lspid","","",60,null],[12,"msg_lrpid","","",60,null],[3,"stat","","",null,null],[12,"st_dev","","",61,null],[12,"st_ino","","",61,null],[12,"st_nlink","","",61,null],[12,"st_mode","","",61,null],[12,"st_uid","","",61,null],[12,"st_gid","","",61,null],[12,"st_rdev","","",61,null],[12,"st_size","","",61,null],[12,"st_blksize","","",61,null],[12,"st_blocks","","",61,null],[12,"st_atime","","",61,null],[12,"st_atime_nsec","","",61,null],[12,"st_mtime","","",61,null],[12,"st_mtime_nsec","","",61,null],[12,"st_ctime","","",61,null],[12,"st_ctime_nsec","","",61,null],[3,"stat64","","",null,null],[12,"st_dev","","",62,null],[12,"st_ino","","",62,null],[12,"st_nlink","","",62,null],[12,"st_mode","","",62,null],[12,"st_uid","","",62,null],[12,"st_gid","","",62,null],[12,"st_rdev","","",62,null],[12,"st_size","","",62,null],[12,"st_blksize","","",62,null],[12,"st_blocks","","",62,null],[12,"st_atime","","",62,null],[12,"st_atime_nsec","","",62,null],[12,"st_mtime","","",62,null],[12,"st_mtime_nsec","","",62,null],[12,"st_ctime","","",62,null],[12,"st_ctime_nsec","","",62,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",63,null],[12,"exponent","","",63,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",64,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",65,null],[12,"swd","","",65,null],[12,"ftw","","",65,null],[12,"fop","","",65,null],[12,"rip","","",65,null],[12,"rdp","","",65,null],[12,"mxcsr","","",65,null],[12,"mxcr_mask","","",65,null],[12,"_st","","",65,null],[12,"_xmm","","",65,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",66,null],[12,"fpregs","","",66,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",67,null],[12,"uc_link","","",67,null],[12,"uc_stack","","",67,null],[12,"uc_mcontext","","",67,null],[12,"uc_sigmask","","",67,null],[3,"ipc_perm","","",null,null],[12,"__key","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[12,"cuid","","",68,null],[12,"cgid","","",68,null],[12,"mode","","",68,null],[12,"__seq","","",68,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",69,null],[12,"shm_segsz","","",69,null],[12,"shm_atime","","",69,null],[12,"shm_dtime","","",69,null],[12,"shm_ctime","","",69,null],[12,"shm_cpid","","",69,null],[12,"shm_lpid","","",69,null],[12,"shm_nattch","","",69,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_atfork","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"clock_settime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"initgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"ENOATTR","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",null,null],[3,"IntoIter","","",null,null],[6,"SmallVec1","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec2","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec4","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec8","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec16","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec24","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec32","","Deprecated alias to ease transition from an earlier version.",null,null],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","",1,null],[10,"size","","",1,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","",1,null],[10,"ptr_mut","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct an empty vector",3,{"inputs":[],"output":{"name":"smallvec"}}],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>` without copying elements.",3,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"set_len","","Sets the length of a vector.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","The maximum number of elements this vector can hold inline",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","The number of elements stored in the vector",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector is empty",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","The number of items the vector can hold without reallocating",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Empty the vector and return an iterator over its former contents.",3,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"push","","Append an item to the vector.",3,null],[11,"push_all_move","","Append elements from an iterator.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","Re-allocate to set the capacity to `new_cap`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",3,null],[11,"clear","","Remove all elements from the vector.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",3,null],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",3,null],[11,"insert_many","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"i"}],"output":null}],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_slice","","",3,null],[11,"insert_from_slice","","",3,null],[11,"extend_from_slice","","",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"from","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"push","","",3,null],[11,"from_iter","","",3,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",3,null]],"paths":[[8,"VecLike"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
initSearch(searchIndex);
